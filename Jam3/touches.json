{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Jam3/touches\">touches</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p><a href=\"http://jam3.github.io/touches/\">(click for demo)</a> - <a href=\"http://github.com/Jam3/touches/blob/master/demo.js\">(source)</a></p>\n<p>Normalizes touch and mouse events to provide a simpler interface. Simplest case:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>//get&#xA0;mouse/touch&#xA0;events&#xA0;on&#xA0;window</span></span></div><div class=\"line\"><span class=\"source js\"><span>require(&apos;touches&apos;)()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;.on(&apos;start&apos;,&#xA0;mouseDown)&#xA0;&#xA0;&#xA0;//-&gt;&#xA0;mousedown&#xA0;/&#xA0;touchstart</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;.on(&apos;move&apos;,&#xA0;mouseMove)&#xA0;&#xA0;&#xA0;&#xA0;//-&gt;&#xA0;mousemove&#xA0;/&#xA0;touchmove</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;.on(&apos;end&apos;,&#xA0;mouseEnd)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//-&gt;&#xA0;mouseup&#xA0;&#xA0;&#xA0;/&#xA0;touchend</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>...</span></span></div>\n</code></pre>\n<p>A common pattern for drag events is to listen for events on a parent element (like the <code>window</code>), and use a different element as the <code>target</code> for client offset calculation. The second argument to the event listener is a <code>[x, y]</code> vector representing the calculated client offset (relative to top left of target element).</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;touch&#xA0;=&#xA0;require(&apos;touches&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>touch(window,&#xA0;{&#xA0;target:&#xA0;button&#xA0;})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;.on(&apos;move&apos;,&#xA0;function&#xA0;(ev,&#xA0;position)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;console.log(&apos;relative&#xA0;pos&apos;,&#xA0;position[0],&#xA0;position[1])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;})</span></span></div>\n</code></pre>\n<p>Another common pattern, especially with drag events, is filtering touch input to a single finger. Below; the events will only get fired for the first finger placed on the screen. Subsequent fingers will be ignored until after the first finger has been lifted. </p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>touch(window,&#xA0;{&#xA0;target:&#xA0;button,&#xA0;filtered:&#xA0;true&#xA0;})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;.on(&apos;start&apos;,&#xA0;dragStart)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;.on(&apos;move&apos;,&#xA0;dragMove)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;.on(&apos;end&apos;,&#xA0;dragEnd)</span></span></div>\n</code></pre>\n<iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://jam3.github.io/touches/\"></iframe><h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://www.npmjs.com/package/touches\"></a></p>\n<h4 id=\"emitter-require-touches-element-opt-\"><code>emitter = require(&apos;touches&apos;)([element, opt])</code></h4>\n<p>Creates a new drag emitter by attaching listeners to <code>element</code>, which defaults to <code>window</code>. </p>\n<p>The <code>opt</code> options can be:</p>\n<ul>\n<li><code>target</code> the element to use when calculating the <code>position</code> parameter passed to event listeners. The clientX/clientY of the event will be relative to this target</li>\n<li><code>filtered</code> whether the touch events should be filtered to the first placed finger</li>\n<li><code>type</code> can be a string, either <code>&quot;mouse&quot;</code> or <code>&quot;touch&quot;</code> if listening to only one or the other event is desired. If any other value, will listen for both mouse and touch.</li>\n<li><code>preventSimulated</code> (default <code>true</code>) if true, prevents simulated touch events by running <code>ev.preventDefault()</code> on <code>&apos;touchend&apos;</code> events</li>\n</ul>\n<p>If the events are not filtered, the <code>position</code> for an event will be the first changed touch associated with the <code>target</code>. </p>\n<h4 id=\"emitter-disable-\"><code>emitter.disable()</code></h4>\n<p>Disables the events associated with this emitter by removing them from the DOM element. Returns the emitter for chaining.</p>\n<h4 id=\"emitter-enable-\"><code>emitter.enable()</code></h4>\n<p>Enables the events associated with this emitter by adding them to the DOM element. The emitter is enabled by default. Returns the emitter for chaining.</p>\n<h4 id=\"emitter-target\"><code>emitter.target</code></h4>\n<p>The current target for position offset calculation.</p>\n<h4 id=\"emitter-on-start-listener-\"><code>emitter.on(&apos;start&apos;, listener)</code></h4>\n<h4 id=\"emitter-on-move-listener-\"><code>emitter.on(&apos;move&apos;, listener)</code></h4>\n<h4 id=\"emitter-on-end-listener-\"><code>emitter.on(&apos;end&apos;, listener)</code></h4>\n<p>The mousedown/touchstart, mousemove/touchmove, and mouseup/touchend events, respectively. Listeners are called with two parameters: <code>(ev, position)</code> where <code>ev</code> is the event and <code>position</code> is an <code>[x, y]</code> array of the client offset, relative to the target&apos;s top left.</p>\n<h2 id=\"demo\">demo</h2>\n<p>To run the demo from source, first <code>git clone</code> this repo, then:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>cd&#xA0;touches</span></span></div><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install</span></span></div><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;start</span></span></div>\n</code></pre>\n<p>And open <code>localhost:9966</code> in your browser.</p>\n<p>To generate a distribution bundle: </p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;run&#xA0;build</span></span></div>\n</code></pre>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/Jam3/touches/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}