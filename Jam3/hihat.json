{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Jam3/hihat\">hihat</a><div class=\"contrib\"></div></h1>\n<p><img src=\"http://i.imgur.com/Sqpbjzl.gif\" alt=\"hihat\"></p>\n<blockquote>\n<p>local Node/Browser development with Chrome DevTools</p>\n</blockquote>\n<p>Runs a source file in a Chrome DevTools process. Saving the file will reload the tab. </p>\n<p>This is useful for locally unit testing browser code with the full range of Web APIs (WebGL, WebAudio, etc). It provides access to profiling, debugger statements, network requests, and so forth. </p>\n<p>It can also be used to develop typical Node projects, or as a generic <a href=\"#repl\">Node REPL</a>. For example, instead of using <a href=\"https://www.npmjs.com/package/nodemon\">nodemon</a> during development, you can use <code>hihat</code> to make use of a debugger.</p>\n<p>Since it provides Browser and Node APIs, it can also be used for some simple CLI tooling, like <a href=\"#save-canvas-2d-to-png-image\">saving a Canvas2D to a PNG file</a>.</p>\n<p>Under the hood, this uses <a href=\"https://github.com/atom/electron\">electron</a>, <a href=\"https://github.com/substack/node-browserify\">browserify</a> and <a href=\"https://github.com/substack/watchify\">watchify</a>.</p>\n<hr>\n<h4 id=\"update-jan-2016\">Update: Jan 2016</h4>\n<p>A lot of new efforts are going toward <a href=\"https://github.com/Jam3/devtool\">devtool</a>, a very similar project but without <code>browserify</code> and <code>watchify</code> under the hood. In many ways it replaces <code>hihat</code>, but not all. Both tools will continue to exist, although <code>devtool</code> will probably receive more regular enhancements and maintenance.</p>\n<h2 id=\"install\">Install</h2>\n<p><a href=\"https://www.npmjs.com/package/hihat\"></a></p>\n<p>This project is currently best suited as a global install. Use <code>npm</code> to install it like so:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;hihat&#xA0;-g</span></span></div>\n</code></pre>\n<h2 id=\"basic-examples\">Basic Examples</h2>\n<p>Simplest case is just to run <code>hihat</code> on any source file that can be browserified (Node/CommonJS).</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;index.js</span></span></div>\n</code></pre>\n<p>Any options after <code>--</code> will be passed to browserify. For example:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>#&#xA0;transpile&#xA0;ES6&#xA0;files</span></span></div><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;tests/*.js&#xA0;--&#xA0;--transform&#xA0;babelify</span></span></div>\n</code></pre>\n<p>You can use <code>--print</code> to redirect <code>console</code> logging into your terminal:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;test.js&#xA0;--print&#xA0;|&#xA0;tap-spec</span></span></div>\n</code></pre>\n<p>The process will stay open until you call <code>window.close()</code> from the client code. Also see the <code>--quit</code> and <code>--timeout</code> options in <a href=\"#usage\">Usage</a>.</p>\n<h2 id=\"usage\">Usage</h2>\n<p>Usage:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;[entries]&#xA0;[options]&#xA0;--&#xA0;[browserifyOptions]</span></span></div>\n</code></pre>\n<p>Options:</p>\n<ul>\n<li><code>--port</code> (default <code>9541</code>)<ul>\n<li>the port to host the local server on</li>\n</ul>\n</li>\n<li><code>--host</code> (default <code>&apos;localhost&apos;</code>)<ul>\n<li>the host for the local development server</li>\n</ul>\n</li>\n<li><code>--dir</code> (default <code>process.cwd()</code>)<ul>\n<li>the root directory to serve static files from</li>\n</ul>\n</li>\n<li><code>--print</code><ul>\n<li><code>console.log</code> and <code>console.error</code> will print to <code>process.stdout</code> and <code>process.stderr</code></li>\n</ul>\n</li>\n<li><code>--quit</code><ul>\n<li>uncaught errors (like syntax) will cause the application to exit (useful for unit testing)</li>\n</ul>\n</li>\n<li><code>--frame</code> (default <code>&apos;0,0,0,0&apos;</code>)<ul>\n<li>a comma-separated string for <code>x,y,width,height</code> window bounds</li>\n<li>if only two numbers are passed, treated as <code>width,height</code></li>\n<li>if <code>true</code> is passed, uses the native default size</li>\n</ul>\n</li>\n<li><code>--no-devtool</code><ul>\n<li>do not open a DevTools window when running</li>\n</ul>\n</li>\n<li><code>--raw-output</code><ul>\n<li>do not silence Chromium debug logs on stdout/stderr</li>\n</ul>\n</li>\n<li><code>--node</code><ul>\n<li>enables Node integration (see <a href=\"#node\">node</a>)</li>\n</ul>\n</li>\n<li><code>--no-electron-builtins</code><ul>\n<li>when <code>--node</code> is enabled, makes it behave more like Node by ignoring Electron builtins</li>\n</ul>\n</li>\n<li><code>--timeout</code> (default 0)<ul>\n<li>a number, will close the process after this duration. Use 0 for no timeout</li>\n</ul>\n</li>\n<li><code>--exec</code><ul>\n<li>an alias for <code>--print</code>, <code>--no-devtool</code> and <code>--quit</code> options. Useful for headless executions</li>\n</ul>\n</li>\n<li><code>--index=path/to/index.html</code><ul>\n<li>optional <code>index.html</code> file to override the default (see <a href=\"#html-index\">HTML index</a>)</li>\n</ul>\n</li>\n<li><code>--serve</code><ul>\n<li>what to serve your bundle entry point as</li>\n<li>defaults to file name if possible, otherwise &apos;bundle.js&apos;</li>\n</ul>\n</li>\n<li><code>--browser-field</code><ul>\n<li>Can specify <code>true</code> or <code>false</code> to force enable/disable the <code>&quot;browser&quot;</code> field resolution, independently of the <code>--node</code> option</li>\n</ul>\n</li>\n</ul>\n<p>By default, browserify will use source maps. You can change this with <code>--no-debug</code> as a browserify option:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;test.js&#xA0;--&#xA0;--no-debug</span></span></div>\n</code></pre>\n<h2 id=\"node\">Node</h2>\n<blockquote>\n<p><strong>Note:</strong> Users seeking the Node.js features may be more interested in <a href=\"https://github.com/Jam3/devtool\">devtool</a> &#x2013; very similar to <code>hihat</code> but better architected to deal with large Node applications.</p>\n</blockquote>\n<p>hihat can also be used for developing <em>simple</em> Node modules. The <code>--node</code> flag will disable the <code>&quot;browser&quot;</code> field resolution and use actual Node modules for <code>process</code>, <code>Buffer</code>, <code>&quot;os&quot;</code>, etc. It also exposes <code>require</code> statement outside of the bundle, so you can use it in the Chrome Console while developing.</p>\n<p>For example, <code>foobar.js</code></p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;fs&#xA0;=&#xA0;require(&apos;fs&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>fs.readdir(process.cwd(),&#xA0;function&#xA0;(err,&#xA0;files)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;if&#xA0;(err)&#xA0;throw&#xA0;err</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;debugger</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;console.log(files)</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div>\n</code></pre>\n<p>Now we can run the following on our file:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;foobar.js&#xA0;--node</span></span></div>\n</code></pre>\n<p><img src=\"http://i.imgur.com/jZdEcxC.png\" alt=\"screenshot\"></p>\n<p>By default, enabling <code>--node</code> will also enable the Electron builtins. You can pass <code>--no-electron-builtins</code> to disable Electron modules and make the source behave more like Node.</p>\n<h4 id=\"limitations\">Limitations</h4>\n<p>There are some known limitations with this approach.</p>\n<ul>\n<li>Modules that use native addons (like <a href=\"https://github.com/Automattic/node-canvas\">node-canvas</a>) are not supported.</li>\n<li>Unlike a typical Node.js program, you will need to explicitly quit the application with <code>window.close()</code></li>\n<li>Since the source is run through browserify, the initial build time is slow and features like <code>require.resolve</code> are not yet supported. <a href=\"https://github.com/Jam3/hihat/issues/21\">#21</a></li>\n<li>Some features like <code>process.stdin</code> are not possible. <a href=\"https://github.com/Jam3/hihat/issues/12\">#12</a></li>\n<li>Since this runs Electron instead of a plain Node.js runtime, it may produce some unusual results</li>\n</ul>\n<h2 id=\"repl\">REPL</h2>\n<p>If you specify <code>hihat</code> without any entry files, it will not invoke browserify or watchify. For example, you can use this as a generic alternative to the Node REPL, but with better debugging and various Web APIs.</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;--node</span></span></div>\n</code></pre>\n<p>Example:</p>\n<p><img src=\"http://i.imgur.com/Xns0gGT.png\" alt=\"repl\"></p>\n<h2 id=\"html-index\">HTML index</h2>\n<p>By default, hihat will serve a <a href=\"https://www.npmjs.com/package/simple-html-index\">simple HTML <code>index.html</code></a> file. You can use <code>--index</code> for an alternative. The path is relative to your current working directory.</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;test.js&#xA0;--index=foo.html</span></span></div>\n</code></pre>\n<p>And the following <code>foo.html</code>:</p>\n<pre><code class=\"lang-html\"><div class=\"line\"><span class=\"text html basic\"><span class=\"meta tag sgml html\"><span class=\"punctuation definition tag html\"><span>&lt;!</span></span><span class=\"meta tag sgml doctype html\"><span>doctype</span><span>&#xA0;html</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html basic\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>head</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html basic\"><span>&#xA0;&#xA0;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag begin html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>title</span></span><span class=\"punctuation definition tag end html\"><span>&gt;</span></span></span><span>FOO</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag begin html\"><span>&lt;/</span></span><span class=\"entity name tag inline any html\"><span>title</span></span><span class=\"punctuation definition tag end html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html basic\"><span>&#xA0;&#xA0;</span><span class=\"meta tag inline any html\"><span class=\"punctuation definition tag begin html\"><span>&lt;</span></span><span class=\"entity name tag inline any html\"><span>meta</span></span><span>&#xA0;</span><span class=\"entity other attribute-name html\"><span>charset</span></span><span>=</span><span class=\"string quoted double html\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>utf-8</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag end html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html basic\"><span>&#xA0;&#xA0;</span><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>head</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html basic\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag structure any html\"><span>body</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html basic\"><span class=\"source js embedded html\"><span>&#xA0;&#xA0;</span><span class=\"punctuation definition tag html\"><span>&lt;</span></span><span class=\"entity name tag script html\"><span>script</span></span><span>&#xA0;</span><span class=\"entity other attribute-name html\"><span>src</span></span><span>=</span><span class=\"string quoted double html\"><span class=\"punctuation definition string begin html\"><span>&quot;</span></span><span>test.js</span><span class=\"punctuation definition string end html\"><span>&quot;</span></span></span><span class=\"punctuation definition tag html\"><span>&gt;</span><span>&lt;/</span></span><span class=\"entity name tag script html\"><span>script</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"text html basic\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>body</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div><div class=\"line\"><span class=\"text html basic\"><span class=\"meta tag structure any html\"><span class=\"punctuation definition tag html\"><span>&lt;/</span></span><span class=\"entity name tag structure any html\"><span>html</span></span><span class=\"punctuation definition tag html\"><span>&gt;</span></span></span></span></div>\n</code></pre>\n<p>You can also specify a <code>--serve</code> option to force a certain entry point for your bundle. For example:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;test.js&#xA0;--index=foo.html&#xA0;--serve=bundle.js</span></span></div>\n</code></pre>\n<p>With this, your script tag would be:</p>\n<pre><code class=\"lang-html\"><div class=\"line\"><span class=\"text plain null-grammar\"><span>&lt;script&#xA0;src=&quot;bundle.js&quot;&gt;&lt;/script&gt;&#xA0;</span></span></div>\n</code></pre>\n<p>In most cases, <code>--serve</code> will default to the file name of your entry file. In complex cases, such as absolute paths or <code>&apos;.&apos;</code>, it may default to <code>&apos;bundle.js&apos;</code>.</p>\n<h2 id=\"advanced-examples\">Advanced Examples</h2>\n<p>Some more advanced uses of hihat.</p>\n<ul>\n<li><a href=\"http://github.com/Jam3/hihat/blob/master/prettify-tap-in-console\">prettify TAP in console</a></li>\n<li><a href=\"http://github.com/Jam3/hihat/blob/master/write-clipboard-to-stdout\">write clipboard to <code>stdout</code></a></li>\n<li><a href=\"http://github.com/Jam3/hihat/blob/master/save-canvas-2d-to-png-image\">save Canvas 2D to PNG image</a></li>\n</ul>\n<h4 id=\"prettify-tap-in-console\">prettify TAP in console</h4>\n<p>You can use the browserify plugin <a href=\"https://github.com/Jam3/tap-dev-tool\">tap-dev-tool</a> to pretty-print TAP output in the console.</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>#&#xA0;install&#xA0;it&#xA0;locally</span></span></div><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;tap-dev-tool&#xA0;--save-dev</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source shell\"><span>#&#xA0;now&#xA0;run&#xA0;it&#xA0;as&#xA0;a&#xA0;plugin</span></span></div><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;test.js&#xA0;--&#xA0;-p&#xA0;tap-dev-tool</span></span></div>\n</code></pre>\n<p>Files that use <a href=\"https://www.npmjs.com/package/tap\">tap</a> or <a href=\"https://www.npmjs.com/package/tape\">tape</a> will be logged like so:</p>\n<p><img src=\"http://i.imgur.com/LS014oR.png\" alt=\"tap-dev-tool\"></p>\n<h4 id=\"write-clipboard-to-stdout\">write clipboard to <code>stdout</code></h4>\n<p>Using the <code>clipboard</code> module in Electron, we can write it to stdout like so.</p>\n<p><code>paste.js</code>:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;clipboard&#xA0;=&#xA0;require(&apos;clipboard&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>process.stdout.write(clipboard.readText()&#xA0;+&#xA0;&apos;\\n&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>window.close()</span></span></div>\n</code></pre>\n<p>Then run:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;paste.js&#xA0;--node&#xA0;--exec&#xA0;&gt;&#xA0;clipboard.txt</span></span></div>\n</code></pre>\n<p>This will write the clipboard contents to a new file, <code>clipboard.txt</code>.</p>\n<h4 id=\"save-canvas-2d-to-png-image\">save Canvas 2D to PNG image</h4>\n<p>Here is an example which writes a Canvas2D element into a new PNG image, using <a href=\"https://github.com/mattdesl/electron-canvas-to-buffer\">electron-canvas-to-buffer</a>.</p>\n<p><code>render.js</code></p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;toBuffer&#xA0;=&#xA0;require(&apos;electron-canvas-to-buffer&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;canvas&#xA0;=&#xA0;document.createElement(&apos;canvas&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;context&#xA0;=&#xA0;canvas.getContext(&apos;2d&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;width&#xA0;=&#xA0;canvas.width</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;height&#xA0;=&#xA0;canvas.height</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;gradient&#xA0;=&#xA0;context.createLinearGradient(0,&#xA0;0,&#xA0;width,&#xA0;0)</span></span></div><div class=\"line\"><span class=\"source js\"><span>gradient.addColorStop(0,&#xA0;&apos;#f39821&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>gradient.addColorStop(1,&#xA0;&apos;#f321b0&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>context.fillStyle&#xA0;=&#xA0;gradient</span></span></div><div class=\"line\"><span class=\"source js\"><span>context.fillRect(0,&#xA0;0,&#xA0;width,&#xA0;height)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>process.stdout.write(toBuffer(canvas,&#xA0;&apos;image/png&apos;))</span></span></div><div class=\"line\"><span class=\"source js\"><span>window.close()</span></span></div>\n</code></pre>\n<p>Now run the following:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>hihat&#xA0;render.js&#xA0;--node&#xA0;--exec&#xA0;&gt;&#xA0;image.png</span></span></div>\n</code></pre>\n<p>And the result of <code>image.png</code> will be:</p>\n<p><img src=\"http://i.imgur.com/whDkS67.png\" alt=\"image\"></p>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"https://github.com/Jam3/devtool\">devtool</a> - a similar tool, but built specifically for Node and without the browserify/watchify cruft</li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/Jam3/hihat/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}