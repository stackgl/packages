{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Jam3/camera-picking-ray\">camera-picking-ray</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>Creates a picking ray for a camera. Commonly used for mouse interaction in 2D and 3D games.</p>\n<p>The camera is assumed to have a <code>projection</code> and <code>view</code> matrix, which can be combined and inverted to form <code>invProjView</code>. </p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;origin&#xA0;=&#xA0;[0,&#xA0;0,&#xA0;0]</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;direction&#xA0;=&#xA0;[0,&#xA0;0,&#xA0;0]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//compute&#xA0;ray&#xA0;and&#xA0;store&#xA0;it&#xA0;in&#xA0;(origin,&#xA0;direction)</span></span></div><div class=\"line\"><span class=\"source js\"><span>pick(origin,&#xA0;direction,&#xA0;mouse,&#xA0;viewport,&#xA0;invProjView)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(origin,&#xA0;direction)</span></span></div>\n</code></pre>\n<p>Full example, hit-testing against a 3D sphere:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mat4&#xA0;=&#xA0;require(&apos;gl-mat4&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;pick&#xA0;=&#xA0;require(&apos;camera-picking-ray&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;intersect&#xA0;=&#xA0;require(&apos;ray-sphere-intersection&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//your&#xA0;camera&#xA0;matrices</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;projection&#xA0;=&#xA0;...</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;view&#xA0;=&#xA0;...</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;projView&#xA0;=&#xA0;mat4.multiply([],&#xA0;projection,&#xA0;view)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;invProjView&#xA0;=&#xA0;mat4.invert([],&#xA0;projView)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mouse&#xA0;=&#xA0;[&#xA0;screenX,&#xA0;screenHeight&#xA0;-&#xA0;screenY&#xA0;]</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;viewport&#xA0;=&#xA0;[&#xA0;0,&#xA0;0,&#xA0;screenWidth,&#xA0;screenHeight&#xA0;]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;ray&#xA0;=&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;ro:&#xA0;[0,&#xA0;0,&#xA0;0],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;rd:&#xA0;[0,&#xA0;0,&#xA0;0]</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//store&#xA0;result&#xA0;in&#xA0;ray&#xA0;(origin,&#xA0;direction)</span></span></div><div class=\"line\"><span class=\"source js\"><span>pick(ray.ro,&#xA0;ray.rd,&#xA0;mouse,&#xA0;viewport,&#xA0;invProjView)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//let&apos;s&#xA0;see&#xA0;if&#xA0;the&#xA0;mouse&#xA0;hit&#xA0;a&#xA0;3D&#xA0;sphere...</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;center&#xA0;=&#xA0;[0,&#xA0;0,&#xA0;0],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;radius&#xA0;=&#xA0;1.5</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;hit&#xA0;=&#xA0;intersect([],&#xA0;ray.ro,&#xA0;ray.rd,&#xA0;center,&#xA0;radius)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>if&#xA0;(hit)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;console.log(&quot;Mouse&#xA0;hit&#xA0;the&#xA0;sphere&#xA0;at:&quot;,&#xA0;hit)</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<p>PRs welcome.</p>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://www.npmjs.com/package/camera-picking-ray\"></a></p>\n<h4 id=\"pick-origin-direction-mouse-viewport-invprojview-\"><code>pick(origin, direction, mouse, viewport, invProjView)</code></h4>\n<p>Creates a picking ray for the given <code>mouse</code> screen-space position (vec2) and <code>viewport</code> screen-space bounds (x, y, width, height). <code>invProjView</code> is the inverse of the combined <code>projection * view</code> matrix for your camera.</p>\n<p>Stores the resulting ray in the first two parameters: <code>origin</code> (vec3) and <code>direction</code> (vec3).</p>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/ray-sphere-intersection\">ray-sphere-intersection</a></li>\n<li><a href=\"https://www.npmjs.com/package/ray-triangle-intersection\">ray-triangle-intersection</a></li>\n<li><a href=\"https://www.npmjs.com/package/ray-plane-intersection\">ray-plane-intersection</a></li>\n<li><a href=\"https://www.npmjs.com/package/ray-aabb\">ray-aabb</a></li>\n<li><a href=\"https://www.npmjs.com/package/camera-unproject\">camera-unproject</a></li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/Jam3/camera-picking-ray/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}