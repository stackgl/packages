{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Jam3/ray-3d\">ray-3d</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>A high-level ray picking helper for 3D intersection, built from modular pieces.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;Ray&#xA0;=&#xA0;require(&apos;ray-3d&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;ray&#xA0;=&#xA0;new&#xA0;Ray(origin,&#xA0;direction)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>if&#xA0;(ray.intersectsSphere(center,&#xA0;radius))&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;console.log(&quot;Hit&#xA0;a&#xA0;sphere!&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<p>Features:</p>\n<ul>\n<li><code>intersectsSphere</code></li>\n<li><code>intersectsPlane</code></li>\n<li><code>intersectsTriangle</code></li>\n<li><code>intersectsTriangleCell</code></li>\n<li><code>intersectsAABB</code> (Axis-Aligned Bounding Box)</li>\n</ul>\n<p>The API is still experimental, and missing some features:</p>\n<ul>\n<li><code>ray-ray-intersection</code></li>\n<li><code>ray-mesh-intersection</code> (simplicial complex)</li>\n</ul>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://www.npmjs.com/package/ray-3d\"></a></p>\n<h4 id=\"ray-new-ray-origin-direction-\"><code>ray = new Ray([origin, direction])</code></h4>\n<p>Creates a new <code>Ray</code> with optional <code>origin</code> and <code>direction</code>, both arrays in the form <code>[x, y, z]</code>. </p>\n<p><code>origin</code> defaults to <code>[0, 0, 0]</code> and <code>direction</code> defaults to <code>[0, 0, -1]</code>.</p>\n<h4 id=\"ray-set-origin-direction-\"><code>ray.set(origin, direction)</code></h4>\n<p>Assigns this ray&apos;s <code>origin</code> and <code>direction</code> to the given values.</p>\n<h4 id=\"ray-copy-otherray-\"><code>ray.copy(otherRay)</code></h4>\n<p>Copies the <code>origin</code> and <code>direction</code> from the <code>otherRay</code> into this ray.</p>\n<h4 id=\"otherray-ray-clone-\"><code>otherRay = ray.clone()</code></h4>\n<p>Deep clones this ray into a new <code>Ray</code> instance.</p>\n<hr>\n<h3 id=\"intersections\">intersections</h3>\n<p>All intersection methods return the collision point <code>[x, y, z]</code> if one occurred, which is re-used across calls to avoid GC thrashing. </p>\n<p>If no collision occurred, the methods return <code>null</code>.</p>\n<h4 id=\"ray-intersectsplane-normal-distance-\"><code>ray.intersectsPlane(normal, distance)</code></h4>\n<p>Whether this ray intersects the plane with the unit <code>normal</code> [x, y, z] and <code>distance</code> from origin.</p>\n<h4 id=\"ray-intersectssphere-center-radius-\"><code>ray.intersectsSphere(center, radius)</code></h4>\n<p>Whether this ray intersects with the sphere at <code>center</code> [x, y, z] and <code>radius</code>.</p>\n<h4 id=\"ray-intersectstriangle-triangle-\"><code>ray.intersectsTriangle(triangle)</code></h4>\n<p>Whether this ray intersects with the <code>triangle</code>:</p>\n<pre><code>[ [x1, y1, z1], [x2, y2, z2], [x3, y3, z3] ]\n</code></pre><h4 id=\"ray-intersectstrianglecell-cell-positions-\"><code>ray.intersectsTriangleCell(cell, positions)</code></h4>\n<p>Whether this ray intersects with the triangle cell, where <code>cell</code> is a face like so:</p>\n<pre><code>[ a, b, c ]\n</code></pre><p>Where <code>[ a, b, c ]</code> are indices into the <code>positions</code> array:</p>\n<pre><code>[ [x1, y1, z1], [x2, y2, z2] ... ]\n</code></pre><p>This is useful for indexed meshes and simplicial complexes like <a href=\"https://www.npmjs.com/package/icosphere\">icosphere</a>.</p>\n<h4 id=\"ray-intersectsbox-aabb-\"><code>ray.intersectsBox(aabb)</code></h4>\n<p>Whether this ray intersects with the <a href=\"http://www.gamasutra.com/view/feature/131833/when_two_hearts_collide_.php\">Axis-Aligned Bounding Box</a> <code>aabb</code>:</p>\n<pre><code>[ [x1, y1, z1], [x2, y2, z2] ]\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/camera-unproject\">camera-unproject</a></li>\n<li><a href=\"https://www.npmjs.com/package/camera-project\">camera-project</a></li>\n<li><a href=\"https://www.npmjs.com/package/camera-picking-ray\">camera-picking-ray</a></li>\n<li><a href=\"https://www.npmjs.com/package/ray-sphere-intersection\">ray-sphere-intersection</a></li>\n<li><a href=\"https://www.npmjs.com/package/ray-plane-intersection\">ray-plane-intersection</a></li>\n<li><a href=\"https://www.npmjs.com/package/ray-triangle-intersection\">ray-triangle-intersection</a></li>\n<li><a href=\"https://www.npmjs.com/package/ray-aabb-intersection\">ray-aabb-intersection</a></li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/Jam3/ray-3d/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}