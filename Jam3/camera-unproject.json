{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Jam3/camera-unproject\">camera-unproject</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>Unprojects a 2D screen space point into 3D space using the inverse of your camera&apos;s combined matrix.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mat4&#xA0;=&#xA0;require(&apos;gl-mat4&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;unproject&#xA0;=&#xA0;require(&apos;camera-unproject&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//projection&#xA0;*&#xA0;view&#xA0;matrix</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;combinedProjView&#xA0;=&#xA0;mat4.multiply([],&#xA0;projection,&#xA0;view)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//now&#xA0;invert&#xA0;it</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;invProjView&#xA0;=&#xA0;mat4.invert([],&#xA0;combinedProjView)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//viewport&#xA0;bounds</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;viewport&#xA0;=&#xA0;[x,&#xA0;y,&#xA0;width,&#xA0;height]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//2D&#xA0;point&#xA0;in&#xA0;screen&#xA0;space</span></span></div><div class=\"line\"><span class=\"source js\"><span>//z=0&#xA0;means&#xA0;&quot;near&#xA0;plane&quot;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;point&#xA0;=&#xA0;[123,&#xA0;52,&#xA0;0]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//vec3&#xA0;output</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;output&#xA0;=&#xA0;[]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>unproject(output,&#xA0;point,&#xA0;viewport,&#xA0;invProjView)</span></span></div>\n</code></pre>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://www.npmjs.com/package/camera-unproject\"></a></p>\n<h4 id=\"vec3-unproject-out-point-viewport-invcombined-\"><code>vec3 = unproject(out, point, viewport, invCombined)</code></h4>\n<p>Unprojects the 2D <code>point</code> into 3D space using the <code>viewport</code> bounds (screen x, y, width, height) and <code>invCombined</code> matrix. </p>\n<p>Where <code>point</code> [x, y, z] uses window coordinates for XY and a range between 0.0 (near plane) and 1.0 (far plane) for Z. <code>invCombined</code> is typically the invert of the combined <code>projection * view</code> matrix for your camera. </p>\n<p>The <code>[x, y, z]</code> result is stored in <code>out</code> and returned.</p>\n<h2 id=\"see-also\">See Also</h2>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/camera-project\">camera-project</a></li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/Jam3/camera-unproject/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}