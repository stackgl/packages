{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Jam3/gl-shader-output\">gl-shader-output</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p><img src=\"http://i.imgur.com/bROGMVq.png\" alt=\"img\"></p>\n<p>A helper module for unit testing shaders and comparing the result of <code>gl_FragColor</code> from a 1x1 WebGL canvas. See <a href=\"https://github.com/Jam3/glsl-hsl2rgb\">glsl-hsl2rgb</a> for a practical example.</p>\n<p>Example:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createShaderOutput&#xA0;=&#xA0;require(&apos;gl-shader-output&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//&#xA0;Fragment&#xA0;shader&#xA0;source,&#xA0;or&#xA0;a&#xA0;gl-shader&#xA0;instance</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;fragShader&#xA0;=&#xA0;[</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&apos;precision&#xA0;mediump&#xA0;float;&apos;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&apos;uniform&#xA0;float&#xA0;green;&apos;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&apos;void&#xA0;main()&#xA0;{&apos;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&apos;gl_FragColor&#xA0;=&#xA0;vec4(0.0,&#xA0;green,&#xA0;0.0,&#xA0;1.0);&apos;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&apos;}&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>].join(&apos;\\n&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//&#xA0;get&#xA0;a&#xA0;draw&#xA0;function&#xA0;for&#xA0;our&#xA0;test</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;draw&#xA0;=&#xA0;createShaderOutput(fragShader);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//&#xA0;returns&#xA0;the&#xA0;frag&#xA0;color&#xA0;as&#xA0;[R,&#xA0;G,&#xA0;B,&#xA0;A]</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;color&#xA0;=&#xA0;draw();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//&#xA0;we&#xA0;could&#xA0;also&#xA0;set&#xA0;uniforms&#xA0;before&#xA0;rendering</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;color2&#xA0;=&#xA0;draw({&#xA0;green:&#xA0;0.5&#xA0;});</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//&#xA0;due&#xA0;to&#xA0;precision&#xA0;loss,&#xA0;you&#xA0;may&#xA0;want&#xA0;to&#xA0;use&#xA0;a&#xA0;fuzzy&#xA0;equality&#xA0;check</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;epsilon&#xA0;=&#xA0;0.01;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;almostEqual&#xA0;=&#xA0;require(&apos;array-almost-equal&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>almostEqual(color2,&#xA0;[0.0,&#xA0;0.5,&#xA0;0.0,&#xA0;1.0],&#xA0;epsilon);</span></span></div>\n</code></pre>\n<p>You can use this with tools like <a href=\"https://github.com/hughsk/smokestack\">smokestack</a> for test-driven GLSL development.</p>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://www.npmjs.com/package/gl-shader-output\"></a></p>\n<h4 id=\"draw-createshaderoutput-shader-opt-\"><code>draw = createShaderOutput(shader, [opt])</code></h4>\n<p>Takes a <code>shader</code> with optional <code>opt</code> settings and returns a <code>draw</code> function.</p>\n<p>Where <code>shader</code> can be one of the following:</p>\n<ul>\n<li>A GLSL String, which is used as the fragment shader</li>\n<li>An instance of <a href=\"https://github.com/stackgl/gl-shader\"><code>gl-shader</code></a></li>\n<li>A function with the signature <code>fn(gl)</code>, which returns a new gl-shader instance</li>\n</ul>\n<p>Options:</p>\n<ul>\n<li><code>gl</code> the WebGL context &#x2013; defaults to <code>shader.gl</code> if an instance is passed, otherwise constructs a new context</li>\n<li><code>width</code> the width of gl context, by default <code>1</code></li>\n<li><code>height</code> the height of gl context, by default <code>1</code></li>\n<li><code>float</code> whether to use floating point values, default <code>true</code> (requires an extension)</li>\n</ul>\n<p>Also supports <a href=\"https://www.npmjs.com/package/webgl-context\">webgl-context</a> options such as <code>alpha</code> and <code>premultipliedAlpha</code>.</p>\n<p>The returned function has the following signature:</p>\n<h4 id=\"color-draw-uniforms-\"><code>color = draw([uniforms])</code></h4>\n<p>Where <code>uniforms</code> is an optional map of uniform names to values (such as <code>[x, y]</code> array for vec2), applied before rendering.</p>\n<p>The return value is the gl_FragColor RGBA of the canvas, in floats, such as <code>[0.5, 1.0, 0.25, 1.0]</code>.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/Jam3/gl-shader-output/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}