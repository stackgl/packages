{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/hughsk/matcap\">matcap  </a><div class=\"contrib\"></div></h1>\n<p>GLSL shaders for calculating/rendering Spherical Environment Maps, or &quot;matcaps&quot;.</p>\n<p>For more information, check out\n<a href=\"http://www.clicktorelease.com/blog/creating-spherical-environment-mapping-shader\">Creating a Spherical Reflection/Environment Mapping shader</a>,\nwhich was used as a reference when writing this module and the demo.</p>\n<p>Most of the images in the demo were sourced from\n<a href=\"http://www.clicktorelease.com/code/spherical-normal-mapping/\">this demo</a>,\nthough a couple I made myself.</p>\n<iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://hughsk.io/matcap/\"></iframe><h3 id=\"view-demo\"><a href=\"http://hughsk.github.io/matcap/\">view demo</a></h3>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/matcap\"></a></p>\n<h3 id=\"with-glslify\">With glslify</h3>\n<p>You can import the module using\n<a href=\"http://github.com/chrisdickinson/glslify\">glslify</a> to get the bare function\nresponsible for generating the texture coordinate to look up.</p>\n<p>This function takes two arguments:</p>\n<ul>\n<li><code>vec3 eye</code>: the camera&apos;s current position.</li>\n<li><code>vec3 normal</code>: the surface&apos;s normal vector.</li>\n</ul>\n<p>Returning a <code>vec2</code> you can use on your <code>sampler2D</code>.</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;matcap&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>matcap</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>sampler2D</span></span><span>&#xA0;texture;&#xA0;</span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;the&#xA0;matcap&#xA0;texture&#xA0;you&#xA0;want&#xA0;to&#xA0;use</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;eyeVector;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;normalVector;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;uv&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>matcap</span></span><span>(</span></span><span>eyeVector,&#xA0;normalVector);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_FragColor</span></span><span>&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec4</span></span><span>(</span><span class=\"support function any-method c\"><span>texture2D</span></span><span>(</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;texture,&#xA0;uv</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;)</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>rgb</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<h3 id=\"with-browserify\">With browserify</h3>\n<p>If you&apos;re looking to get started a little more quickly, you can require matcap\nas a module from <a href=\"http://github.com/substack/node-browserify\">browserify</a>.</p>\n<p>The required function simply takes the current WebGL context, and returns a\na GLSL program wrapped up in\n<a href=\"http://github.com/gl-modules/gl-shader-core\">gl-shader-core</a>.</p>\n<p>You&apos;ll still need to take care of its uniforms and attributes though:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>shader.bind()</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.attributes.aPosition.location&#xA0;=&#xA0;0</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.attributes.aNormal.location&#xA0;=&#xA0;0</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.uniforms.uTexture&#xA0;=&#xA0;textureIndex</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.uniforms.uEye&#xA0;=&#xA0;eyeVector</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.uniforms.mView&#xA0;=&#xA0;viewMatrix</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.uniforms.mModel&#xA0;=&#xA0;modelMatrix</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.uniforms.mNormal&#xA0;=&#xA0;normalMatrix</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.uniforms.mProjection&#xA0;=&#xA0;projectionMatrix</span></span></div>\n</code></pre>\n<p>If you&apos;re looking for a full example, check out the demo!</p>\n<h2 id=\"license\">License</h2>\n<p>MIT. See <a href=\"http://github.com/hughsk/matcap/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}