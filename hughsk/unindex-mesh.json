{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/hughsk/unindex-mesh\">unindex-mesh </a><div class=\"contrib\"></div></h1>\n<p>Takes a list of vertices and faces, giving you back an array of individual\ntriangles.</p>\n<p>In most cases with WebGL, you&apos;ll want to stick with indexed geometry - i.e.\nproviding a list of unique vertices and the faces that consume them, rather\nthen including a bunch of duplicate vertices to make each face. This way,\nyou consume less memory and <em>maybe</em> get some performance benefits too. That&apos;s\nwhy modules like <a href=\"http://npmjs.org/package/bunny\">bunny</a> are formatted this\nway.</p>\n<p>One exemption to this case is if you want to for an intentionally flat\npolygonal look. If you use indexed geometry you&apos;ll have forced interpolation\nbetween your faces, getting rid of hard edges: this is normally a good thing,\nbut it spoils the low-poly look if that&apos;s what you&apos;re after.</p>\n<p>So for interoperability/convenience this module can take indexes meshes and\noutput a <code>Float32Array</code> of individual triangles ready to send over to the GPU.</p>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/unindex-mesh\"></a></p>\n<h3 id=\"require-unindex-mesh-positions-faces-out-\"><code>require(&apos;unindex-mesh&apos;)(positions, faces[, out])</code></h3>\n<p><code>positions</code> is an array of vertex positions and <code>faces</code> is a list of faces. The\nnumber of points for each face and dimension of each position is determined by\nthe first position/face supplied.</p>\n<p><code>out</code> is an optional argument for including your own array to output the\nresult into. If not passed, a <code>Float32Array</code> of the correct length will\nbe created for you.</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;faceNormals&#xA0;=&#xA0;require(&apos;mesh-normals&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;unindex&#xA0;=&#xA0;require(&apos;unindex-mesh&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;bunny&#xA0;=&#xA0;require(&apos;bunny&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;lowpoly&#xA0;=&#xA0;unindex(bunny.positions,&#xA0;bunny.cells)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;lowpolynormals&#xA0;=&#xA0;faceNormals(lowpoly)</span></span></div>\n</code></pre>\n<h3 id=\"require-unindex-mesh-mesh-out-\"><code>require(&apos;unindex-mesh&apos;)(mesh[, out])</code></h3>\n<p>Alternatively, you can pass in an object with the properties <code>positions</code> and\n<code>cells</code> in place of the previous <code>positions</code> and <code>faces</code> arguments respectively.</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;faceNormals&#xA0;=&#xA0;require(&apos;mesh-normals&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;unindex&#xA0;=&#xA0;require(&apos;unindex-mesh&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;lowpoly&#xA0;=&#xA0;unindex(require(&apos;bunny&apos;))</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;lowpolynormals&#xA0;=&#xA0;faceNormals(lowpoly)</span></span></div>\n</code></pre>\n<h2 id=\"license\">License</h2>\n<p>MIT. See <a href=\"http://github.com/hughsk/unindex-mesh/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}