{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Erkaman/glsl-godrays\">glsl-godrays</a><div class=\"contrib\"></div></h1>\n<p>This module implements the volumetric light scattering effect(godrays) described in\n&quot;Volumetric Light Scattering as a Post-Process&quot; as a GLSL shader. A demo\nis provided at: <a href=\"http://erkaman.github.io/glsl-godrays/\">http://erkaman.github.io/glsl-godrays/</a></p>\n<p>The camera in the demo is controlled as follows:</p>\n<ul>\n<li>Keys <code>W</code> and <code>S</code> are used to walk forward and backward.</li>\n<li>Keys <code>A</code> and <code>D</code> are used to stride left and right.</li>\n<li>Keys <code>O</code> and <code>L</code> are used to fly up and down.</li>\n<li>Hold down the key <code>M</code> to speed up the camera.</li>\n<li>Hold down the left mouse button and move the mouse to turn the camera.</li>\n</ul>\n<p><iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://erkaman.github.io/glsl-godrays/\"></iframe></p>\n<p><a href=\"https://www.npmjs.com/package/glsl-godrays\"></a></p>\n<h2 id=\"rendering-setup\">Rendering Setup</h2>\n<p>In order to implement the effect, no less than three rendering passes will have to be done:</p>\n<ul>\n<li>Pass 1: Render all geometry that could occlude the light source as black. Normally render light source.\nAnd render all the above to a texture called the &quot;occlusion texture&quot;. Note that this texture\ndoes not have to be exactly the size of the screen, but it can be smaller.\nAnd by making it smaller, lots of performance can be gained.</li>\n</ul>\n<ul>\n<li>Pass 2: Render everything normally, to the default framebuffer.</li>\n</ul>\n<ul>\n<li>Pass 3: Now enable alpha blending, because we will render the volumetric light rays in a fullscreen pass, and\n   combine them with the scene rendered in pass 2 by simply using alpha blending. Also, as input to pass 3, is the &quot;occlusion texture&quot; that was rendered to in pass 1. This texture is used to\n   ensure that unnatural streaks of light do not appear on objects that are occluding the light source.</li>\n</ul>\n<p>For more details, please refer to the source code of the provided demo.</p>\n<h2 id=\"shader-usage\">Shader Usage</h2>\n<p>In the third pass, the godrays are rendered in a fullscreen pass, where every fragment\ngets its color from the following function:</p>\n<pre><code>vec3 godrays(\n    float density,\n    float weight,\n    float decay,\n    float exposure,\n    int numSamples,\n    sampler2D occlusionTexture,\n    vec2 screenSpaceLightPos,\n    vec2 uv\n    );\n</code></pre><p>Where the parameters are</p>\n<ul>\n<li><code>density</code> please refer to the article &quot;Volumetric Light Scattering as a Post-Process&quot; for a definition of this parameter.</li>\n<li><code>weight</code> see the above.</li>\n<li><code>decay</code> see the above.</li>\n<li><code>exposure</code> see the above.</li>\n<li><code>numSamples</code> see the above. However, note that the maximum value of this parameter is 100!</li>\n<li><code>occlusionTexture</code> the &quot;occlusion texture&quot; created in pass 1.</li>\n<li><code>screenSpaceLightPos</code> the light position in screen space. In the source code of the demo it is shown how this can be calculated.</li>\n<li><code>uv</code> the coordinates of the current fragment. Note that <code>x</code> and <code>y</code> should both be in the interval\n<code>[0,1]</code>, over the entire screen.</li>\n</ul>\n"}