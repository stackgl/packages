{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Erkaman/pnp-gui\">pnp-gui</a><div class=\"contrib\"></div></h1>\n<p>pnp-gui(plug n&apos; play GUI) is a WebGL gui toolkit whose main goal is to be easy to use, bloat-free, and be easy to\nintegrate into any project. Impatient people probably want a demo right away,\nand <a href=\"https://github.com/Erkaman/pnp-gui#demo\">here</a> it is.</p>\n<p>pnp-gui takes much inspiration from the fantastic <a href=\"https://github.com/ocornut/imgui\">imgui</a>\nproject. Like imgui, it provides an Immediate Mode GUI toolkit. Also like imgui,\nit aims to be as bloat-free as possible, and to be easy to integrate into\nany project. Very little code needs to be written to create a simple GUI,\nand a font comes pre-packaged with the library.</p>\n<p>pnp-gui is mainly meant to be used by programmers who want to make a simple GUI\nfor debugging purposes, or who want a simple GUI that can be used\nto tweak a couple of variables in their applications. Also, in the provided demo,\nsome possible use-cases of pnp-gui are shown.</p>\n<p>However, do note that due to the simplicity of the toolkit, there are many drawbacks.\npnp-gui does not provide you with any way to do advanced widget and window layout.\nMore advanced GUI toolkits such as Swing and QT provides ways to create advanced\nwindow layouts. However, in order to reduce complexity, the window layout\noptions of pnp-gui have been made very limited.</p>\n<p>Another important thing to note is that pnp-gui does not provide any way of\ncreating beautiful interfaces that can be presented to the end user. You can\ntweak a couple of colors and spacing constants here and there, but there is\nno support at all for skinning the GUI. Again, we empathize that the toolkit\nis mainly meant to be used by programmers who want a simple GUI for debugging\npurposes.</p>\n<p><a href=\"https://www.npmjs.com/package/pnp-gui\"></a></p>\n<iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://erkaman.github.io/pnp-gui/\"></iframe><h2 id=\"demo\">Demo</h2>\n<p>A demo is given at this link:\n<a href=\"http://erkaman.github.io/pnp-gui/\">http://erkaman.github.io/pnp-gui/</a></p>\n<p>It should look like this:</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/pnp-gui/master/images/demo_screen.png\" alt=\"text\"></p>\n<p>First, note that the GUI in the demo is all rendered using WebGL, and no HTML is used at all. It is actually two demos in one, and the demo can be toggled with the upper radio button.\nIn the first demo, you can use the widgets of pnp-gui to change the lighting and color\nsettings of a simple model. In the second demo, you can use the widgets\nof pnp-gui to modify the lighting, color and geometry of a simple heightmap. Note that you can move the\nwindow by dragging and dropping.</p>\n<p>And the source code of the demo can be found at <code>example/index.js</code></p>\n<p>See also <a href=\"https://github.com/Erkaman/glsl-godrays#readme\">here</a> for an example of an actual application using pnp-gui</p>\n<h2 id=\"tutorial\">Tutorial</h2>\n<p>In this section, we give a tutorial that demonstrates how easy it is to use\nthe toolkit. First we give the source code of another simple demo:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>/*&#xA0;global&#xA0;requestAnimationFrame&#xA0;*/</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;bunny&#xA0;=&#xA0;require(&apos;bunny&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mat4&#xA0;=&#xA0;require(&apos;gl-mat4&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;vec3&#xA0;=&#xA0;require(&apos;gl-vec3&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;Geometry&#xA0;=&#xA0;require(&apos;gl-geometry&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glShader&#xA0;=&#xA0;require(&apos;gl-shader&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;normals&#xA0;=&#xA0;require(&apos;normals&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glslify&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createOrbitCamera&#xA0;=&#xA0;require(&apos;orbit-camera&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;shell&#xA0;=&#xA0;require(&quot;gl-now&quot;)();</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createGui&#xA0;=&#xA0;require(&quot;pnp-gui&quot;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;cameraPosFromViewMatrix&#xA0;=&#xA0;require(&apos;gl-camera-pos-from-view-matrix&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;dragon&#xA0;=&#xA0;require(&apos;stanford-dragon/3&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;boundingBox&#xA0;=&#xA0;require(&apos;vertices-bounding-box&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;transform&#xA0;=&#xA0;require(&apos;geo-3d-transform-mat4&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;randomArray&#xA0;=&#xA0;require(&apos;random-array&apos;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;demo1Shader,&#xA0;bunnyGeo,&#xA0;dragonGeo;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;camera&#xA0;=&#xA0;createOrbitCamera([0,&#xA0;-1000,&#xA0;0],&#xA0;[0,&#xA0;0,&#xA0;0],&#xA0;[0,&#xA0;1,&#xA0;0]);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mouseLeftDownPrev&#xA0;=&#xA0;false;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>const&#xA0;RENDER_BUNNY&#xA0;=&#xA0;0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>const&#xA0;RENDER_DRAGON&#xA0;=&#xA0;1;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>/*</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;Variables&#xA0;that&#xA0;can&#xA0;be&#xA0;modified&#xA0;through&#xA0;the&#xA0;GUI.</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;*/</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;bg&#xA0;=&#xA0;[0.6,&#xA0;0.7,&#xA0;1.0];&#xA0;//&#xA0;clear&#xA0;color.</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;demo1DiffuseColor&#xA0;=&#xA0;[0.42,&#xA0;0.34,&#xA0;0.0];</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;demo1AmbientLight&#xA0;=&#xA0;[0.77,&#xA0;0.72,&#xA0;0.59];</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;demo1LightColor&#xA0;=&#xA0;[0.40,&#xA0;0.47,&#xA0;0.0];</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;demo1SunDir&#xA0;=&#xA0;[-0.69,&#xA0;1.33,&#xA0;0.57];</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;demo1SpecularPower&#xA0;=&#xA0;{val:&#xA0;12.45};</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;demo1HasSpecular&#xA0;=&#xA0;{val:&#xA0;true};</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;demo1RenderModel&#xA0;=&#xA0;{val:&#xA0;RENDER_BUNNY};</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>const&#xA0;demo1Vert&#xA0;=&#xA0;`</span></span></div><div class=\"line\"><span class=\"source js\"><span>precision&#xA0;mediump&#xA0;float;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>attribute&#xA0;vec3&#xA0;aPosition;</span></span></div><div class=\"line\"><span class=\"source js\"><span>attribute&#xA0;vec3&#xA0;aNormal;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>varying&#xA0;vec3&#xA0;vNormal;</span></span></div><div class=\"line\"><span class=\"source js\"><span>varying&#xA0;vec3&#xA0;vPosition;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;mat4&#xA0;uProjection;</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;mat4&#xA0;uView;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>void&#xA0;main()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;vNormal&#xA0;=&#xA0;aNormal;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;vPosition&#xA0;=&#xA0;aPosition;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;gl_Position&#xA0;=&#xA0;uProjection&#xA0;*&#xA0;uView&#xA0;*&#xA0;vec4(aPosition,&#xA0;1.0);</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div><div class=\"line\"><span class=\"source js\"><span>`</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>const&#xA0;demo1Frag&#xA0;=&#xA0;`</span></span></div><div class=\"line\"><span class=\"source js\"><span>precision&#xA0;mediump&#xA0;float;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>varying&#xA0;vec3&#xA0;vNormal;</span></span></div><div class=\"line\"><span class=\"source js\"><span>varying&#xA0;vec3&#xA0;vPosition;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;vec3&#xA0;uDiffuseColor;</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;vec3&#xA0;uAmbientLight;</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;vec3&#xA0;uLightColor;</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;vec3&#xA0;uLightDir;</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;vec3&#xA0;uEyePos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;mat4&#xA0;uView;</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;float&#xA0;uSpecularPower;</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;float&#xA0;uHasSpecular;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>void&#xA0;main()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vec3&#xA0;n&#xA0;=&#xA0;vNormal;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vec3&#xA0;l&#xA0;=&#xA0;normalize(uLightDir);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vec3&#xA0;v&#xA0;=&#xA0;normalize(uEyePos&#xA0;-&#xA0;vPosition);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vec3&#xA0;ambient&#xA0;=&#xA0;uAmbientLight&#xA0;*&#xA0;uDiffuseColor;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vec3&#xA0;diffuse&#xA0;=&#xA0;uDiffuseColor&#xA0;*&#xA0;uLightColor&#xA0;*&#xA0;dot(n,&#xA0;l)&#xA0;;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vec3&#xA0;specular&#xA0;=&#xA0;pow(clamp(dot(normalize(l+v),n),0.0,1.0)&#xA0;&#xA0;,&#xA0;uSpecularPower)&#xA0;*&#xA0;vec3(1.0,1.0,1.0);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gl_FragColor&#xA0;=&#xA0;vec4(ambient&#xA0;+&#xA0;diffuse&#xA0;+&#xA0;specular*uHasSpecular,&#xA0;1.0);</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div><div class=\"line\"><span class=\"source js\"><span>`</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//&#xA0;center&#xA0;geometry&#xA0;on&#xA0;(0,0,0)</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;centerGeometry(geo,&#xA0;scale)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Calculate&#xA0;the&#xA0;bounding&#xA0;box.</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;bb&#xA0;=&#xA0;boundingBox(geo.positions);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;Translate&#xA0;the&#xA0;geometry&#xA0;center&#xA0;to&#xA0;the&#xA0;origin.</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;translate&#xA0;=&#xA0;[-0.5&#xA0;*&#xA0;(bb[0][0]&#xA0;+&#xA0;bb[1][0]),&#xA0;-0.5&#xA0;*&#xA0;(bb[0][1]&#xA0;+&#xA0;bb[1][1]),&#xA0;-0.5&#xA0;*&#xA0;(bb[0][2]&#xA0;+&#xA0;bb[1][2])];</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;m&#xA0;=&#xA0;mat4.create();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;mat4.scale(m,&#xA0;m,&#xA0;[scale,&#xA0;scale,&#xA0;scale]);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;mat4.translate(m,&#xA0;m,&#xA0;translate);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;geo.positions&#xA0;=&#xA0;transform(geo.positions,&#xA0;m)</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shell.on(&quot;gl-init&quot;,&#xA0;function&#xA0;()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;gl&#xA0;=&#xA0;shell.gl</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gl.enable(gl.DEPTH_TEST);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gl.enable(gl.CULL_FACE);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui&#xA0;=&#xA0;new&#xA0;createGui(gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.windowSizes&#xA0;=&#xA0;[360,&#xA0;580];</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;centerGeometry(bunny,&#xA0;80.0);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;bunnyGeo&#xA0;=&#xA0;Geometry(gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.attr(&apos;aPosition&apos;,&#xA0;bunny.positions)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.attr(&apos;aNormal&apos;,&#xA0;normals.vertexNormals(bunny.cells,&#xA0;bunny.positions))</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.faces(bunny.cells)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;centerGeometry(dragon,&#xA0;16.0);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;dragonGeo&#xA0;=&#xA0;Geometry(gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.attr(&apos;aPosition&apos;,&#xA0;dragon.positions)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.attr(&apos;aNormal&apos;,&#xA0;normals.vertexNormals(dragon.cells,&#xA0;dragon.positions))</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;.faces(dragon.cells)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader&#xA0;=&#xA0;glShader(gl,&#xA0;demo1Vert,&#xA0;demo1Frag);</span></span></div><div class=\"line\"><span class=\"source js\"><span>});</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;demo1Randomize()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1DiffuseColor&#xA0;=&#xA0;randomArray(0,&#xA0;1).oned(3);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1AmbientLight&#xA0;=&#xA0;randomArray(0,&#xA0;1).oned(3);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1LightColor&#xA0;=&#xA0;randomArray(0,&#xA0;1).oned(3);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1SunDir&#xA0;=&#xA0;randomArray(-2,&#xA0;+2).oned(3);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1SpecularPower.val&#xA0;=&#xA0;Math.round(randomArray(0,&#xA0;40).oned(1)[0]);</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shell.on(&quot;gl-render&quot;,&#xA0;function&#xA0;(t)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;gl&#xA0;=&#xA0;shell.gl</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;canvas&#xA0;=&#xA0;shell.canvas;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gl.clearColor(bg[0],&#xA0;bg[1],&#xA0;bg[2],&#xA0;1);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gl.clear(gl.COLOR_BUFFER_BIT&#xA0;|&#xA0;gl.DEPTH_BUFFER_BIT);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gl.viewport(0,&#xA0;0,&#xA0;canvas.width,&#xA0;canvas.height);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;model&#xA0;=&#xA0;mat4.create();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;projection&#xA0;=&#xA0;mat4.create();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;scratchMat&#xA0;=&#xA0;mat4.create();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;view&#xA0;=&#xA0;camera.view(scratchMat);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;scratchVec&#xA0;=&#xA0;vec3.create();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;mat4.perspective(projection,&#xA0;Math.PI&#xA0;/&#xA0;2,&#xA0;canvas.width&#xA0;/&#xA0;canvas.height,&#xA0;0.1,&#xA0;10000.0);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader.bind();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader.uniforms.uView&#xA0;=&#xA0;view;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader.uniforms.uProjection&#xA0;=&#xA0;projection;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader.uniforms.uDiffuseColor&#xA0;=&#xA0;demo1DiffuseColor;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader.uniforms.uAmbientLight&#xA0;=&#xA0;demo1AmbientLight;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader.uniforms.uLightColor&#xA0;=&#xA0;demo1LightColor;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader.uniforms.uLightDir&#xA0;=&#xA0;demo1SunDir;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader.uniforms.uEyePos&#xA0;=&#xA0;cameraPosFromViewMatrix(scratchVec,&#xA0;view);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader.uniforms.uSpecularPower&#xA0;=&#xA0;demo1SpecularPower.val;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;demo1Shader.uniforms.uHasSpecular&#xA0;=&#xA0;demo1HasSpecular.val&#xA0;?&#xA0;1.0&#xA0;:&#xA0;0.0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(demo1RenderModel.val&#xA0;==&#xA0;RENDER_BUNNY)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bunnyGeo.bind(demo1Shader);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;bunnyGeo.draw();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;else&#xA0;if&#xA0;(demo1RenderModel.val&#xA0;==&#xA0;RENDER_DRAGON)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dragonGeo.bind(demo1Shader);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;dragonGeo.draw();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;pressed&#xA0;=&#xA0;shell.wasDown(&quot;mouse-left&quot;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;io&#xA0;=&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mouseLeftDownCur:&#xA0;pressed,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mouseLeftDownPrev:&#xA0;mouseLeftDownPrev,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mousePositionCur:&#xA0;shell.mouse,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mousePositionPrev:&#xA0;shell.prevMouse</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;};</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;mouseLeftDownPrev&#xA0;=&#xA0;pressed;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.begin(io,&#xA0;&quot;Window&quot;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.textLine(&quot;Lighting&#xA0;Settings&quot;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.radioButton(&quot;Bunny&quot;,&#xA0;demo1RenderModel,&#xA0;RENDER_BUNNY);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.sameLine();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.radioButton(&quot;Dragon&quot;,&#xA0;demo1RenderModel,&#xA0;RENDER_DRAGON);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Ambient&#xA0;Light&quot;,&#xA0;demo1AmbientLight);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Diffuse&#xA0;Color&quot;,&#xA0;demo1DiffuseColor);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Light&#xA0;Color&quot;,&#xA0;demo1LightColor);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.checkbox(&quot;Has&#xA0;Specular&#xA0;Lighting&quot;,&#xA0;demo1HasSpecular);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(demo1HasSpecular.val)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gui.sliderFloat(&quot;Specular&#xA0;Power&quot;,&#xA0;demo1SpecularPower,&#xA0;0,&#xA0;40);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerFloat3(&quot;Light&#xA0;Direction&quot;,&#xA0;demo1SunDir,&#xA0;[-2,&#xA0;+2],&#xA0;[&quot;X:&quot;,&#xA0;&quot;Y:&quot;,&#xA0;&quot;Z:&quot;]);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(gui.button(&quot;Randomize&quot;))&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;demo1Randomize();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.separator();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.textLine(&quot;Miscellaneous&quot;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Background&quot;,&#xA0;bg);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.end(gl,&#xA0;canvas.width,&#xA0;canvas.height);</span></span></div><div class=\"line\"><span class=\"source js\"><span>});</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shell.on(&quot;tick&quot;,&#xA0;function&#xA0;()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;if&#xA0;interacting&#xA0;with&#xA0;the&#xA0;GUI,&#xA0;do&#xA0;not&#xA0;let&#xA0;the&#xA0;mouse&#xA0;control&#xA0;the&#xA0;camera.</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(gui.hasMouseFocus())</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(shell.wasDown(&quot;mouse-left&quot;))&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;speed&#xA0;=&#xA0;2.0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;camera.rotate([(shell.mouseX&#xA0;/&#xA0;shell.width&#xA0;-&#xA0;0.5)&#xA0;*&#xA0;speed,&#xA0;(shell.mouseY&#xA0;/&#xA0;shell.height&#xA0;-&#xA0;0.5)&#xA0;*&#xA0;speed],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[(shell.prevMouseX&#xA0;/&#xA0;shell.width&#xA0;-&#xA0;0.5)&#xA0;*&#xA0;speed,&#xA0;(shell.prevMouseY&#xA0;/&#xA0;shell.height&#xA0;-&#xA0;0.5)&#xA0;*&#xA0;speed])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(shell.scroll[1])&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;camera.zoom(shell.scroll[1]&#xA0;*&#xA0;0.6);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>});</span></span></div>\n</code></pre>\n<p>the above demo results in the following GUI:</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/pnp-gui/master/images/tut_gui.png\" width=\"433\" height=\"407\"></p>\n<p>Let us now go through the important parts of the above demo.\nFirst of all, the code that creates the gui object:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui&#xA0;=&#xA0;new&#xA0;createGui(gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.windowSizes&#xA0;=&#xA0;[360,&#xA0;580];</span></span></div>\n</code></pre>\n<p>In the first line, we simply create the gui object. In the second line, we set the\nwindow sizes of the GUI. As remarked in the Introduction, we do not provide any means of doing advanced\nGUI layout. So if the window does not fit all widgets you place out,\nyou will have to solve this by setting the value of <code>gui.windowSizes</code> so that all widgets fit.\nNote that you can tweak this value at any time, not just after creation.</p>\n<p>After creating the gui object, we are now ready to use it. You need to first provide png-gui with IO-information:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;pressed&#xA0;=&#xA0;shell.wasDown(&quot;mouse-left&quot;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;io&#xA0;=&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mouseLeftDownCur:&#xA0;pressed,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mouseLeftDownPrev:&#xA0;mouseLeftDownPrev,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mousePositionCur:&#xA0;shell.mouse,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mousePositionPrev:&#xA0;shell.prevMouse</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;};</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;mouseLeftDownPrev&#xA0;=&#xA0;pressed;</span></span></div>\n</code></pre>\n<p>before you can start placing out the widgets, you must provide the toolkit\nwith IO-information. Currently, the toolkit only needs the current mouse position,\nthe mouse position in the previous frame, whether the left mouse button is\ndown the current frame, and whether the left mouse button was down the previous frame.\nAnd we put all information into a single <code>io</code> object. We then pass this\nobject to pnp-gui</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>gui.begin(io,&#xA0;&quot;Window&quot;);</span></span></div>\n</code></pre>\n<p>where we specify the io-information, and the window title. After this method\nhas been called, we can start placing out GUI widgets:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.textLine(&quot;Lighting&#xA0;Settings&quot;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.radioButton(&quot;Bunny&quot;,&#xA0;demo1RenderModel,&#xA0;RENDER_BUNNY);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.sameLine();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.radioButton(&quot;Dragon&quot;,&#xA0;demo1RenderModel,&#xA0;RENDER_DRAGON);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Ambient&#xA0;Light&quot;,&#xA0;demo1AmbientLight);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Diffuse&#xA0;Color&quot;,&#xA0;demo1DiffuseColor);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Light&#xA0;Color&quot;,&#xA0;demo1LightColor);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.checkbox(&quot;Has&#xA0;Specular&#xA0;Lighting&quot;,&#xA0;demo1HasSpecular);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(demo1HasSpecular.val)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gui.sliderFloat(&quot;Specular&#xA0;Power&quot;,&#xA0;demo1SpecularPower,&#xA0;0,&#xA0;40);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerFloat3(&quot;Light&#xA0;Direction&quot;,&#xA0;demo1SunDir,&#xA0;[-2,&#xA0;+2],&#xA0;[&quot;X:&quot;,&#xA0;&quot;Y:&quot;,&#xA0;&quot;Z:&quot;]);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(gui.button(&quot;Randomize&quot;))&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;demo1Randomize();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.separator();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.textLine(&quot;Miscellaneous&quot;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Background&quot;,&#xA0;bg);</span></span></div>\n</code></pre>\n<p>Let us step by step go through the above. By calling</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>gui.textLine(&quot;Lighting&#xA0;Settings&quot;);</span></span></div>\n</code></pre>\n<p>we can simply write out a line of text.</p>\n<p>Let us look at the next couple lines.\nThese lines renders two radio buttons that are used to choose the model that\nis being rendered.</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.radioButton(&quot;Bunny&quot;,&#xA0;demo1RenderModel,&#xA0;RENDER_BUNNY);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.sameLine();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.radioButton(&quot;Dragon&quot;,&#xA0;demo1RenderModel,&#xA0;RENDER_DRAGON);</span></span></div>\n</code></pre>\n<p>the above lines results in:</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/pnp-gui/master/images/tut_radio.png\" width=\"239\" height=\"23\"></p>\n<p>Note here that <code>demo1RenderModel</code> is defined as</p>\n<pre><code>var demo1RenderModel = {val: RENDER_BUNNY};\n</code></pre><p>Since <code>demo1RenderModel.val</code> has value <code>RENDER_BUNNY</code>, and because first radio button\nalso has the value <code>RENDER_BUNNY</code>, the first radio button is rendered as filled in.\nHowever, if the user clicks on the second radio button, <code>demo1RenderModel.val</code>\nwill, by the toolkit, be modified to <code>RENDER_DRAGON</code>, and thus the second\nradio button is rendered as filled in.</p>\n<p>It is also easy to add another radio button. Just add another line</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.radioButton(&quot;Cat&quot;,&#xA0;demo1RenderModel,&#xA0;RENDER_CAT);</span></span></div>\n</code></pre>\n<p>and, if <code>RENDER_CAT</code> has a value distinct from <code>RENDER_BUNNY</code> and <code>RENDER_BUNNY</code>, it will work.</p>\n<p>Finally, note that between the two calls to <code>radioButton</code>, we are calling\n<code>sameLine</code>. This makes it so that the two radio buttons are put on the same line. Otherwise, they would have been placed on different lines. Like this:</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/pnp-gui/master/images/tut_radio_lines.png\" width=\"194\" height=\"55\"></p>\n<p><code>sameLine</code> is a very flexible function, and can be used with any two widgets!</p>\n<p>Let us now look at the next three lines of the GUI. Here we are using three <code>draggerRgb</code> widgets to control the\nambient light, diffuse color, and light color of the model:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Ambient&#xA0;Light&quot;,&#xA0;demo1AmbientLight);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Diffuse&#xA0;Color&quot;,&#xA0;demo1DiffuseColor);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Light&#xA0;Color&quot;,&#xA0;demo1LightColor);</span></span></div>\n</code></pre>\n<p>the above results in:</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/pnp-gui/master/images/tut_rgb.png\" width=\"304\" height=\"84\"></p>\n<p><code>draggerRgb</code> is a useful widget that can be used to let the user input a color. The input parameters to the function <code>draggerRgb</code> is\na label string, and an array that contains the color being modified by the widget. Note, for instance, that\n<code>demo1DiffuseColor</code> is defined as</p>\n<pre><code>var demo1DiffuseColor = [0.42, 0.34, 0.0];\n</code></pre><p>and this array will be modified by the toolkit when the user manipulates the first of the three <code>draggerRgb</code> widgets.</p>\n<p>Let us now look at the next part of the GUI. Next, comes a checkbox that controls whether the model should have\nspecular lighting. If it should have specular lighting, then we also render a slider widget that controls the specular power.\nThis is all rendered with the following code:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.checkbox(&quot;Has&#xA0;Specular&#xA0;Lighting&quot;,&#xA0;demo1HasSpecular);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(demo1HasSpecular.val)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gui.sliderFloat(&quot;Specular&#xA0;Power&quot;,&#xA0;demo1SpecularPower,&#xA0;0,&#xA0;40);</span></span></div>\n</code></pre>\n<p>the above results in this:</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/pnp-gui/master/images/tut_checkbox.png\" width=\"308\" height=\"56\"></p>\n<p>and especially note that if the checkbox is not checked, then the below slider widget is not rendered!</p>\n<p>The <code>checkbox</code> widget is a simple widget. If the user checks the checkbox, then <code>demo1SpecularPower.val</code> is <code>true</code>, othewise, it is <code>false</code>. The next couple of lines are however quite interesting</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>if&#xA0;(demo1HasSpecular.val)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gui.sliderFloat(&quot;Specular&#xA0;Power&quot;,&#xA0;demo1SpecularPower,&#xA0;0,&#xA0;40);</span></span></div>\n</code></pre>\n<p>this shows that in order to remove a widget in pnp-gui, all we have to do is not render the widget at all. And that&apos;s it.  So if <code>demo1HasSpecular.val</code>, then render widget, otherwise do not render it at all.</p>\n<p>The <code>sliderFloat</code> is also a relatively simple widget. <code>demo1SpecularPower</code> is defined as</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;demo1SpecularPower&#xA0;=&#xA0;{val:&#xA0;12.45};</span></span></div>\n</code></pre>\n<p>and if the user manipulates <code>sliderFloat</code>, then <code>demo1SpecularPower.val</code> is modified. However, since the third and fourth parameters are <code>0</code> and <code>40</code>, the value is restricted to be in the range <code>[0,40]</code>. Also, if you want a slider widget for integer values, simply use <code>sliderInt</code>.</p>\n<p>Now let us look at the next line of code in the GUI. This is a widget that allow you to change the light direction\nof the light that is illuminating the model:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerFloat3(&quot;Light&#xA0;Direction&quot;,&#xA0;demo1SunDir,&#xA0;[-2,&#xA0;+2],&#xA0;[&quot;X:&quot;,&#xA0;&quot;Y:&quot;,&#xA0;&quot;Z:&quot;]);</span></span></div>\n</code></pre>\n<p>the code results in</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/pnp-gui/master/images/tut_xyz.png\" width=\"325\" height=\"29\"></p>\n<p><code>draggerFloat3</code> is a very flexible widget. You can use it when you want to set three values in a single widget.\nAs can be observed it is really a single widget composed of three subwidgets.\nAnd as has probably already been guessed, <code>demo1SunDir</code> is simply an array of three:</p>\n<pre><code>var demo1SunDir = [-0.69, 1.33, 0.57];\n</code></pre><p>The argument <code>[-2, +2]</code>  specifies that the min and max values of all the three subwidgets is <code>-2</code> and <code>+2</code>. However,\nyou can have even more fine-grained control of the subwidgets. If you instead pass <code>[[0,1], [-2,1], [-1,0]</code> you\ncan specify that the first subwidget specifies values in range <code>[0,1]</code>, the second one in range <code>[-2,1]</code> and the third one\nin range <code>[-1,0]</code>.</p>\n<p>Optionally, you can also specify labels for all the subwidgets. The argument <code>[&quot;X:&quot;, &quot;Y:&quot;, &quot;Z:&quot;]</code> specifies a label for each\nof the three subwidgets.</p>\n<p>Finally, in addition to <code>draggerFloat3</code>, there are also the widgets <code>draggerFloat1</code>, <code>draggerFloat2</code> and <code>draggerFloat4</code>. But they work exactly like <code>draggerFloat3</code>, except that they handle arrays of size 1, 2, 4.</p>\n<p>Now let us look at the next lines of code in the Gui. Next, we have a button that randomizes all the values in the above widgets if you press it:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(gui.button(&quot;Randomize&quot;))&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;demo1Randomize();</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div>\n</code></pre>\n<p>it looks like this:</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/pnp-gui/master/images/tut_button.png\" width=\"343\" height=\"21\"></p>\n<p>As can be seen, <code>button</code> is very easy to use; if the button was pressed the current frame, return <code>true</code>, otherwise, return false <code>false</code>.</p>\n<p>Let us go to the next line in the GUI. It is a widget that places out a separator:</p>\n<pre><code>    gui.separator();\n</code></pre><p>it is the gray line in the following image:</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/pnp-gui/master/images/tut_separator.png\" width=\"340\" height=\"86\"></p>\n<p>As can be observed, the separator can be used to introduce logical groupings into a GUI.</p>\n<p>the remainder of the GUI code looks like this:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.textLine(&quot;Miscellaneous&quot;);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.draggerRgb(&quot;Background&quot;,&#xA0;bg);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gui.end(gl,&#xA0;canvas.width,&#xA0;canvas.height);</span></span></div>\n</code></pre>\n<p>the first two lines should already be perfectly understandable by now. So let us skip to the third line. In order to use pnp-gui, you\nmust do the following every single frame:</p>\n<pre><code>    gui.begin(io, &quot;Window&quot;);\n\n    // place out widgets here....\n\n    gui.end(gl, canvas.width, canvas.height);\n</code></pre><p>so you MUST place out the widgets every single frame. It will not work if you only place them out the first frame.\nThis is because pnp-gui does, as is stated in the FAQ, not save any retained state. It will not remember where you\nplaced out the widgets for you, instead the GUI is created on the fly every single frame. Therefore, you must specify\nthe widgets every single frame.</p>\n<p>Now the tutorial is almost over. The last thing we would like to cover are these lines:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>shell.on(&quot;tick&quot;,&#xA0;function&#xA0;()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;if&#xA0;interacting&#xA0;with&#xA0;the&#xA0;GUI,&#xA0;do&#xA0;not&#xA0;let&#xA0;the&#xA0;mouse&#xA0;control&#xA0;the&#xA0;camera.</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(gui.hasMouseFocus())</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(shell.wasDown(&quot;mouse-left&quot;))&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;speed&#xA0;=&#xA0;2.0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;camera.rotate([(shell.mouseX&#xA0;/&#xA0;shell.width&#xA0;-&#xA0;0.5)&#xA0;*&#xA0;speed,&#xA0;(shell.mouseY&#xA0;/&#xA0;shell.height&#xA0;-&#xA0;0.5)&#xA0;*&#xA0;speed],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[(shell.prevMouseX&#xA0;/&#xA0;shell.width&#xA0;-&#xA0;0.5)&#xA0;*&#xA0;speed,&#xA0;(shell.prevMouseY&#xA0;/&#xA0;shell.height&#xA0;-&#xA0;0.5)&#xA0;*&#xA0;speed])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(shell.scroll[1])&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;camera.zoom(shell.scroll[1]&#xA0;*&#xA0;0.6);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>});</span></span></div>\n</code></pre>\n<p>these lines do the following: if the user is not interacting with the GUI, we let the user manipulate the camera using the\nmouse. However, if the user is interacting with the GUI, then <code>gui.hasMouseFocus()</code> will return true. If the user\nis using the GUI, we often do not want the user to be able to interact with the 3D view as well, so we do not allow that if <code>gui.hasMouseFocus()</code> returns <code>true</code>.</p>\n<p>So, by using <code>gui.hasMouseFocus()</code>, we can ensure that the user does not use the GUI and the 3D application at the same time.</p>\n<h2 id=\"faq\">FAQ</h2>\n<p><b>What is an Immediate Mode GUI?</b></p>\n<p>This basically means that there is no retained state in the GUI; that is to say,\nthere are no objects that are used to store the widgets of the GUI. Instead the\nGUI is being created on the fly every single frame. While this may seem unnatural\nto people who have not used such a GUI before, this kind of design actually results in\na GUI that is very intuitive to use for programmers. If you wish to see this in action, please\nsee the <a href=\"https://github.com/Erkaman/pnp-gui#tutorial\">tutorial</a></p>\n<p><b>Does pnp-gui support text input?</b></p>\n<p>This is not yet supported.</p>\n<p><b>Is it possible to change the default font?</b></p>\n<p>As was stated in the introduction, png-gui does not, by design, offer very many features when it comes to changing the visual appearance.\nTherefore, this feature is not supported.</p>\n<p>If you anyways wish to change the font, you will have to dig into the source code of the project. The font is stored as a font-atlas <code>.png</code> packed using <code>ndpack-image</code> and as a <code>.json</code> file of character info, and both files were generated by <a href=\"https://github.com/Erkaman/small_proggy_font_creator\">this</a> C++ program.</p>\n<p><b>Can you render unicode text strings with pnp-gui?</b></p>\n<p>Currently, the toolkit can only render text strings where the characters are in the range <code>0x20</code>-<code>0x7E</code> in the ASCII table. But for rendering English text, you do not need any other characters. If you use any other character than these, the result is undefined.</p>\n<p><b>Can you create multiple windows?</b></p>\n<p>Not yet supported.</p>\n<p><b>Can you change the font size?</b></p>\n<p>Not yet supported.</p>\n<p><b>To what degree can you customize the appearance of the GUI?</b></p>\n<p>This toolkit is not really meant to be used to create beautiful GUIs, but there are certain visual aspects that you can customize. There are many constants that control the spacing and colors of the GUI. To, for instance, change the transparency of the window, you simply do this:</p>\n<pre><code>    gui.windowAlpha = 0.5;\n</code></pre><p>The rest of the constants that can be customized are all listed in the function <code>_setupDefaultSettings</code> in <code>index.js</code>. Note that these constants can be customized at ANY time; you do not have to do all customization at the initialization of the GUI.</p>\n<h2 id=\"api\">API</h2>\n<p>Note that this section should be treated as a quick reference, and if you want more details, you should read the <a href=\"https://github.com/Erkaman/pnp-gui#tutorial\">tutorial</a></p>\n<h3 id=\"var-gui-new-require-pnp-gui-gl-\"><code>var gui = new require(&quot;pnp-gui&quot;)(gl);</code></h3>\n<p>create the GUI.</p>\n<ul>\n<li><code>gl</code> your WebGL context</li>\n</ul>\n<h3 id=\"gui-begin-io-windowtitle-\"><code>gui.begin(io, windowTitle)</code></h3>\n<p>Creates a window where you can place out your widgets. Should always be called before you place out your widgets.</p>\n<ul>\n<li><code>io</code> an object that contains the properties<ul>\n<li><code>mouseLeftDownCur</code> whether the left mouse button is down for the current frame.</li>\n<li><code>mouseLeftDownPrev</code> whether the left mouse button was down for the previous frame.</li>\n<li><code>mousePositionCur</code> the mouse position of the current frame</li>\n<li><code>mousePositionPrev</code>  the mouse position of the previous frame</li>\n</ul>\n</li>\n<li><code>windowTitle</code> the title of the window.</li>\n</ul>\n<h3 id=\"gui-end-gl-canvaswidth-canvasheight-\"><code>gui.end(gl, canvasWidth, canvasHeight)</code></h3>\n<p>Should be called once you have placed out your widgets.</p>\n<ul>\n<li><code>gl</code> your WebGL context</li>\n<li><code>canvasWidth</code> the width of the canvas.</li>\n<li><code>canvasHeight</code> the height of the canvas.</li>\n</ul>\n<h3 id=\"gui-hasmousefocus-\"><code>gui.hasMouseFocus()</code></h3>\n<p>Returns <code>true</code> if the user is interacting with the GUI in some manner. Else <code>false</code>.</p>\n<h3 id=\"gui-button-str-\"><code>gui.button(str)</code></h3>\n<p>Places a button. Returns <code>true</code> if the button is clicked, else <code>false</code></p>\n<ul>\n<li><code>str</code> the text string in the button.</li>\n</ul>\n<h3 id=\"gui-sameline-\"><code>gui.sameLine()</code></h3>\n<p>The next widget is placed on the same line as the previous widget, if this method is called between them.</p>\n<h3 id=\"gui-sliderfloat-labelstr-value-min-max-numdecimaldigits-\"><code>gui.sliderFloat(labelStr, value, min, max, numDecimalDigits)</code></h3>\n<p>A slider that can be used to set a floating point value.</p>\n<ul>\n<li><code>labelStr</code> The right label of the slider.</li>\n<li><code>value</code> the value manipulated by this widget. Should be on the form <code>{val: v}</code></li>\n<li><code>min</code> the minimum value of the slider.</li>\n<li><code>max</code> the maximum value of the slider.</li>\n<li><code>numDecimalDigits</code> the number of decimal digits to display the value in the slider with.</li>\n</ul>\n<h3 id=\"gui-sliderint-labelstr-value-min-max-\"><code>gui.sliderInt(labelStr, value, min, max)</code></h3>\n<p>Same as <code>sliderFloat</code>, expect the values are rounded to integers.</p>\n<h3 id=\"gui-draggerfloat3-labelstr-value-minmaxvalues-sublabels-\"><code>gui.draggerFloat3(labelStr, value, minMaxValues, subLabels)</code></h3>\n<p>Places out a list of three dragger subwidgets. This widget can be used to manipulate an array of length 3 with a single widget.</p>\n<ul>\n<li><code>labelStr</code> The right label of the widget.</li>\n<li><code>value</code> the array that is manipulated by this widget. Should be an array of length 3.</li>\n<li><code>minMaxValues</code> if an array on the form <code>[min,max]</code>, then this parameter specifies the min and max values of ALL the three subwidgets. However, if it is an array on the form <code>[ [min1,max1], [min2,max2], [min3,max3] ]</code>, then <code>[min1,max1]</code> is the min and max values of the first subwidget, and so on.</li>\n<li><code>subLabels</code> specifies the labels of the subwidgets. Defaults to an array of empty strings.</li>\n</ul>\n<h3 id=\"gui-draggerfloat4-labelstr-value-minmaxvalues-sublabels-\"><code>gui.draggerFloat4(labelStr, value, minMaxValues, subLabels)</code></h3>\n<p>Same as <code>draggerFloat3</code>, except it handles arrays of length 4.</p>\n<h3 id=\"gui-draggerfloat2-labelstr-value-minmaxvalues-sublabels-\"><code>gui.draggerFloat2(labelStr, value, minMaxValues, subLabels)</code></h3>\n<p>Same as <code>draggerFloat3</code>, except it handles arrays of length 2.</p>\n<h3 id=\"gui-draggerfloat1-labelstr-value-minmaxvalues-sublabels-\"><code>gui.draggerFloat1(labelStr, value, minMaxValues, subLabels)</code></h3>\n<p>Same as <code>draggerFloat3</code>, except it handles arrays of length 1.</p>\n<h3 id=\"gui-draggerrgb-labelstr-value-\"><code>gui.draggerRgb(labelStr, value)</code></h3>\n<p>Basically a specialized version of <code>draggerFloat3</code> that allows you to manipulate RGB-values(array of length 3), and <code>minMaxValues</code> is set to <code>[0,1]</code>.</p>\n<h3 id=\"gui-radiobutton-labelstr-value-id-\"><code>gui.radioButton(labelStr, value, id)</code></h3>\n<p>Places out a single radio button. For more detailed usage, see the <a href=\"https://github.com/Erkaman/pnp-gui#tutorial\">tutorial</a></p>\n<ul>\n<li><code>labelStr</code> The right label of the radio button.</li>\n<li><code>value</code>. The value manipulated by this widget. Should be on the form <code>{val: v}</code>.</li>\n<li><code>id</code> the id of this button. If <code>value.val == id</code>, then this radio button is the chosen radio button, in a group of radio buttons.</li>\n</ul>\n<h3 id=\"gui-checkbox-labelstr-value-\"><code>gui.checkBox(labelStr, value)</code></h3>\n<p>Places out a checkbox.</p>\n<ul>\n<li><code>labelStr</code> The right label of the checkbox.</li>\n<li><code>value</code>. The value manipulated by this widget. Should be on the form <code>{val: v}</code>. If <code>value.val</code> is true, then the checkbox is checked, otherwise it is not.</li>\n</ul>\n<h3 id=\"gui-separator-\"><code>gui.separator()</code></h3>\n<p>Places out a separator, that can be used to create logical groupings in a GUI.</p>\n<h3 id=\"gui-textline-str-\"><code>gui.textLine(str)</code></h3>\n<p>Places out a single line of text.</p>\n<ul>\n<li><code>str</code> the string this widget renders.</li>\n</ul>\n"}