{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Erkaman/gl-catmull-clark\">gl-catmull-clark</a><div class=\"contrib\"></div></h1>\n<p>This module implements the <a href=\"https://en.wikipedia.org/wiki/Catmull%E2%80%93Clark_subdivision_surface\">Catmull-Clark subdivision surface algorithm</a>\nfor WebGL usage. If you feed a low-poly, ugly mesh to this\nalgorithm, the result will be a smooth, beautiful mesh. A\n<a href=\"http://erkaman.github.io/gl-catmull-clark/\">demo</a> is provided.</p>\n<p>Below you can see what it looks like if you run the algorithm\non a low-poly mesh:</p>\n<p><iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://erkaman.github.io/gl-catmull-clark/\"></iframe></p>\n<p><a href=\"https://www.npmjs.com/package/gl-catmull-clark\"></a></p>\n<h2 id=\"api\">API</h2>\n<h3 id=\"function-catmullclark-positions-cells-numsubdivisions-converttotriangles-\">function catmullClark(positions, cells, numSubdivisions[, convertToTriangles])</h3>\n<p>Run the Catmull-Clark algorithm <code>numSubdivisions</code> times on the\nmesh specified by <code>positions</code> and <code>cells</code>. <strong>Returns</strong> a subdivided mesh\nin an object on the form  <code>{positions: subdividedPositions, cells: subdividedCells}</code></p>\n<ul>\n<li><p><code>positions</code> The vertex positions of input mesh on the form\n<code>[  [1.0,2.0,3.0], [3.4,1.3,4.2],...]</code></p>\n</li>\n<li><p><code>cells</code> The indices of the input mesh. This is either a list of\nquad indices or a list of triangle indices. If quads, it is on the\nform <code>[  [1,2,3,4], [8,9,10,11],...]</code>. If triangles, it is on the\nform <code>[  [1,2,3], [8,9,10],...]</code>. And note that clockwise ordering of the\nindices is assumed! Finally, <strong>do note that Catmull-Clark is mostly meant to be used on meshes made with quads</strong>\nIf used on triangular meshes, the quality of the subdivision is generally not as good.</p>\n</li>\n<li><p><code>numSubdivisions</code> How many times the Catmull-Clark algorithm will be\nrun on the input mesh. The more times you run the algorithm, the smoother\nthe output mesh will be.</p>\n</li>\n<li><p><code>convertToTriangles</code> The Catmull-Clark algorithm will result in a list\nof quads. If this parameter is true, then those quads will be converted to\ntriangles, and returned. Else, the returned mesh is a list of quads. <strong>Defaults</strong> to <code>true</code>.</p>\n</li>\n</ul>\n<hr>\n<p>Below we can see what happens as we increase the value of the parameter <code>numSubdivisions</code></p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/gl-catmull-clark/master/images/a.gif\" alt=\"Animated\"></p>\n"}