{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Erkaman/glsl-gradient-palette\">glsl-gradient-palette</a><div class=\"contrib\"></div></h1>\n<p><a href=\"https://www.npmjs.com/package/glsl-gradient-palette\"></a></p>\n<p>This module can be used to create gradient color palettes. These can be used to colorize noise functions and procedurally\ngenerate textures in shaders. Below is an example of such a procedural texture.</p>\n<p><iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://erkaman.github.io/glsl-gradient-palette/\"></iframe></p>\n<p>More examples can be found in the provided <a href=\"http://erkaman.github.io/glsl-gradient-palette/\">demo</a></p>\n<h2 id=\"usage\">Usage</h2>\n<p>To create a gradient palette, you basically give the API a sequential list of colors. The API will then create a\npalette, by linearly interpolating between these colors. It is very easy to create a palette:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;simple&#xA0;=&#xA0;&#xA0;[</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[0.0,&#xA0;[1.0,0.0,0.0]],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[0.5,&#xA0;[0.0,0.0,0.0]],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[1.0,&#xA0;[0.0,0.0,1.0]],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;];</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;simplePaletteTexture&#xA0;=&#xA0;createGradientPalette(gl,simple);</span></span></div>\n</code></pre>\n<p>above, we create a palette where we first interpolate from red to black, and then from black to red. To be more specific,\nFrom <code>0.0</code> to <code>0.5</code> we interpolate between the RGB colors <code>[1.0,0.0,0.0]</code> and <code>[0.0,0.0,0.0]</code>, and from\n<code>0.5</code> to <code>1.0</code> we interpolate from  <code>[0.0,0.0,0.0]</code> to <code>[0.0,0.0,1.0]</code>. The palette we just have created will\nlook like this:</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/glsl-gradient-palette/master/images/simple.png\" width=\"356\" height=\"366\"></p>\n<p>in the upper parts of the image, we can see the palette, and below, we see what happens if we use the palette to\ncolorize a noise function.</p>\n<p>It is easy to use the created palette in a shader. <code>createGradientPalette</code> will return the created palette as a\ntexture(as a <code>gl-texture2d</code>), and this texture can be sent to a shader by doing</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;sphereShader.uniforms.uPalette&#xA0;=&#xA0;simplePaletteTexture.bind()</span></span></div>\n</code></pre>\n<p>now we can use it to colorize a noise function by sampling from it, based on the noise value:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;t&#xA0;=&#xA0;noise(vPosition);</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;tex&#xA0;=&#xA0;&#xA0;&#xA0;</span><span class=\"support function glsl\"><span>texture2D</span></span><span>(uPalette,&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>(t,&#xA0;</span><span class=\"constant numeric c\"><span>0.0</span></span><span>)&#xA0;)</span><span class=\"keyword operator glsl\"><span>.xyz</span></span><span>;</span></span></div>\n</code></pre>\n<p>and that results in the textured sphere seen above.</p>\n<p>By specifying more colors, we can create more advanced textures. For instance, the palette</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;fireball&#xA0;=&#xA0;&#xA0;[</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[0.0,&#xA0;[0.4,0.4,0.4]],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[0.55,&#xA0;[0.0,0.0,0.0]],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[0.60,&#xA0;[1.0,0.0,&#xA0;0.0]],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[0.70,&#xA0;[1.0,1.0,&#xA0;0.0]],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[1.0,&#xA0;[0.4,0.4,&#xA0;0.0]]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;];</span></span></div>\n</code></pre>\n<p>results in</p>\n<p><img src=\"https://raw.githubusercontent.com/Erkaman/glsl-gradient-palette/master/images/lava.png\" width=\"356\" height=\"366\"></p>\n<h2 id=\"api\">API</h2>\n<h3 id=\"function-creategradientpalette-gl-gradientlist-opts-\"><code>function createGradientPalette(gl, gradientList[, opts])</code></h3>\n<p>Creates a gradient palette, and returns the created palette stored as a <code>gl-texture2d</code>, with a default size of\n<code>1024x1</code>.</p>\n<ul>\n<li><code>gl</code> your WebGL context.</li>\n<li><code>gradientList</code> the list of colors to use when creating the palette. See the previous section for more details.</li>\n<li><code>opts</code> optional arguments objects. Can currently only contain the property <code>opts.size</code>, which specifies the width\nof the created palette texture. Defaults to <code>1024</code>.</li>\n</ul>\n<h3 id=\"palettedrawer-new-palettedrawer-gl-position-size-\"><code>paletteDrawer = new PaletteDrawer(gl, position, size)</code></h3>\n<p>Creates a palette drawer, that can be used for drawing a palette texture on the screen. Useful for visualising a palette.</p>\n<ul>\n<li><code>gl</code> your WebGL context.</li>\n<li><code>position</code> the pixel position where your palette drawer will be drawn. Stored as an array <code>[x,y]</code>.</li>\n<li><code>size</code> the pixel size of your palette drawer. Stored as an array<code>[x_size,y_size]</code>.</li>\n</ul>\n<h3 id=\"palettedrawer-draw-palettetexture-canvaswidth-canvasheight-\"><code>paletteDrawer.draw(paletteTexture, canvasWidth, canvasHeight)</code></h3>\n<p>Draws a palette texture as a simple quad.</p>\n<ul>\n<li><code>paletteTexture</code> the palette texture to draw.</li>\n<li><code>canvasWidth</code> the width of the canvas.</li>\n<li><code>canvasHeight</code> the height of the canvas.</li>\n</ul>\n"}