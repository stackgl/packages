{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/Erkaman/gl-skydome-sun\">gl-skydome-sun</a><div class=\"contrib\"></div></h1>\n<p>Draws a skydome with a sun into a 3D scene. This project is a fork of the\nmodule gl-skybox. Demo:\n<a href=\"http://erkaman.github.io/gl-skydome-sun/\">http://erkaman.github.io/gl-skydome-sun/</a></p>\n<p><iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://erkaman.github.io/gl-skydome-sun/\"></iframe></p>\n<p><a href=\"https://www.npmjs.com/package/gl-skydome-sun\"></a></p>\n<h2 id=\"install\">Install</h2>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;gl-skydome-sun</span></span></div>\n</code></pre>\n<h2 id=\"api\">API</h2>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createSkydome&#xA0;=&#xA0;require(&apos;gl-skydome-sun&apos;)</span></span></div>\n</code></pre>\n<h3 id=\"constructor\">Constructor</h3>\n<h4 id=\"var-skydome-createskydome-gl-\"><code>var skydome = createSkydome(gl)</code></h4>\n<p>Takes a WebGL context <code>gl</code>. Returns an object <code>skybox</code> ready for rendering into your\nscene.</p>\n<h3 id=\"methods\">Methods</h3>\n<h4 id=\"skydome-draw-camera-opts-\"><code>skydome.draw(camera[, opts])</code></h4>\n<p>Draws the skydome and sun into your scene.</p>\n<p>Takes a <code>camera</code> object that defines the view and projection matrices:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;view:&#xA0;gl-mat4&#xA0;matrix,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;projection:&#xA0;gl-mat4&#xA0;matrix</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<p>This function will take care of centering the skydome and projection near/far\nvalues for you, so there is no need to make a view/projection matrix specifically\nfor rendering the skydome. It will also disable depth buffer read/writes and\nthen restore them to whatever you had them set to before returning, so there&apos;s\nno need to handle that yourself.</p>\n<p>The optional arguments are</p>\n<ul>\n<li><code>opts.lowerColor</code> the color of the lower hemisphere of the skydome.</li>\n<li><code>opts.upperColor</code> the color of the upper hemisphere of the skydome.</li>\n<li><code>opts.sunDirection</code> A unit vector that describes the position of the sun on the\nskydome. Note that it is assumed that this is a unit vector!</li>\n<li><code>opts.sunColor</code> The color of the sun.</li>\n<li><code>opts.sunSize</code> The size of the sun. Should be in the range <code>[0,500]</code>.</li>\n<li><code>opts.renderSun</code> Whether or not to render the sun. Default value is <code>true</code></li>\n<li><code>opts.doDithering</code> Enables dithering. Dithering can be used to reduce banding artifacts in\nthe rendered sky(the artifacts are mostly visible when the color of the sky is rather dark). Default value is <code>true</code>.</li>\n<li><code>opts.ditheringAmmount</code> The ammount of dithering to apply to every fragment\nof the rendered sky. Default value is <code>0.005</code>.</li>\n</ul>\n<h4 id=\"skydome-constructviewprojection-camera-\"><code>skydome.constructViewProjection(camera)</code></h4>\n<p>Given a <code>camera</code> object, returns the view/projection matrices that is used\nto render the skydome(see the documentation of <code>skydome.draw</code> for more details).\nThis function returns an object on the form</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;view:&#xA0;gl-mat4&#xA0;matrix,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;projection:&#xA0;gl-mat4&#xA0;matrix</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n"}