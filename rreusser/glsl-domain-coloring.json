{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/rreusser/glsl-domain-coloring\">glsl-domain-coloring</a><div class=\"contrib\"></div></h1>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Domain_coloring\">Domain coloring</a> as a shader, via <a href=\"http://github.com/chrisdickinson/glslify\">glslify</a>.</p>\n</blockquote>\n<p><a href=\"https://nodei.co/npm/glsl-domain-coloring\"></a></p>\n<h2 id=\"introduction\">Introduction</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Domain_coloring\">Domain coloring</a> is an improvement over simple coloring by the complex argument and lightness by the magnitude. It makes the function easier to understand by applying the following logic:</p>\n<ul>\n<li>the complex argument determines the hue. (Red is positive real and cyan is negative real, while green-yellow is positive imaginary and blue-magenta is negative imaginary.)</li>\n<li>contours of the complex magnitude are lightened. The contours occur near integer values of <code>log2(|z|)</code>.</li>\n<li>real and imaginary grid lines are darkened. With grid spacing (1, 1), this means that the dark lines are simply the unit grid.</li>\n</ul>\n<p>The result of these choices is that the behavior of the function is easier to discern than by a simple colormap. For example, the function <code>f(z) = z</code> plotted from -2 to 2 on the real and imaginary axes results in the colormap:</p>\n<p align=\"center\">\n  <a href=\"http://rreusser.github.io/glsl-domain-coloring/z.html\"><img src=\"https://raw.githubusercontent.com/rreusser/glsl-domain-coloring/master/docs/images/z.jpg\" width=\"300\" height=\"300\" alt=\"f(z) = z\"></a>\n</p>\n\n<p>The function <code>f(z) = 1 / z</code> in the same range results in the map:</p>\n<p align=\"center\">\n  <a href=\"http://rreusser.github.io/glsl-domain-coloring/recip.html\"><img src=\"https://raw.githubusercontent.com/rreusser/glsl-domain-coloring/master/docs/images/recip.jpg\" width=\"300\" height=\"300\" alt=\"f(z) = 1 / z\"></a>\n</p>\n\n<p>In the second example, the pole of the function is indicated by the bunching up of the grid lines as the white magnitude contours get closer and closer to the pole. In the first example though, the bunching up of the white magnitude contours without bunching up of the black grid lines indicates that it&apos;s a zero rather than a pole.</p>\n<h2 id=\"examples\">Examples</h2>\n<p>Live demos:</p>\n<ul>\n<li><a href=\"http://rreusser.github.io/glsl-domain-coloring/z.html\"><code>f(z) = z</code></a></li>\n<li><a href=\"http://rreusser.github.io/glsl-domain-coloring/recip.html\"><code>f(z) = 1 / z</code></a></li>\n<li><a href=\"http://rreusser.github.io/glsl-domain-coloring/eqn.html\"><code>f(z) = cos(z) / sin(z^4 - 1)</code></a></li>\n</ul>\n<p>To use with glslify:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;domainColoring&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>glsl-domain-coloring</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>attribute</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;position;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;z;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span>&#xA0;</span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_FragColor</span></span><span>&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>domainColoring</span></span><span>(</span></span><span>z,</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec2</span></span><span>(</span></span><span class=\"constant numeric c\"><span>1.0</span></span><span>),&#xA0;</span><span class=\"constant numeric c\"><span>0.9</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>0.5</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>0.7</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<h2 id=\"api\">API</h2>\n<h4 id=\"vec3-domaincoloring-vec2-f-vec2-gridspacing-float-saturation-float-gridstrength-float-magstrength-\"><code>vec3 domainColoring(vec2 f, vec2 gridSpacing, float saturation, float gridStrength, float magStrength)</code></h4>\n<p>Returns the rgb value given the real and imaginary components of f.</p>\n<p>Arguments: </p>\n<ul>\n<li><code>f</code>: A <code>vec2</code> containing the real and imaginary components of the function</li>\n<li><code>gridSpacing</code>: a <code>vec2</code> containing the spacing of the grid in the x and y directions</li>\n<li><code>saturation</code>: the saturation of the coloring, from zero to one</li>\n<li><code>gridStrength</code>: the strength of the rectangular grid, from zero to one</li>\n<li><code>magStrength</code>: the strength of the magnitude contours, from zero to one</li>\n<li><code>linePower</code>: the strength of the lines, as a positive floating point number. Larger numbers result in sharper contours.</li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>&#xA9; 2016 Ricky Reusser. MIT License.</p>\n"}