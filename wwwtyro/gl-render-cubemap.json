{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/wwwtyro/gl-render-cubemap\">gl-render-cubemap</a><div class=\"contrib\"></div></h1>\n<p>Renders a scene into a cubemap.</p>\n<h2 id=\"install\">Install</h2>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;gl-render-cubemap</span></span></div>\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mat4&#xA0;=&#xA0;require(&apos;gl-mat4&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;Geometry&#xA0;=&#xA0;require(&apos;gl-geometry&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glShader&#xA0;=&#xA0;require(&apos;gl-shader&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glslify&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createTextureCube&#xA0;=&#xA0;require(&apos;gl-texture-cube&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;CubemapRenderer&#xA0;=&#xA0;require(&apos;gl-render-cubemap&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;cmr&#xA0;=&#xA0;new&#xA0;CubemapRenderer(1024)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;program&#xA0;=&#xA0;glShader(cmr.gl,&#xA0;glslify(&apos;./noise.vert&apos;),&#xA0;glslify(&apos;./noise.frag&apos;))</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;canvases&#xA0;=&#xA0;cmr.render(function&#xA0;renderFace(params)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;geometry&#xA0;=&#xA0;Geometry(cmr.gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;.attr(&apos;aPosition&apos;,&#xA0;params.quad)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;view&#xA0;=&#xA0;mat4.create()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;mat4.lookAt(view,&#xA0;[0,&#xA0;0,&#xA0;0],&#xA0;params.forward,&#xA0;params.up)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;projection&#xA0;=&#xA0;mat4.create()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;mat4.perspective(projection,&#xA0;params.fov,&#xA0;params.aspect,&#xA0;0.01,&#xA0;10.0)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;program.bind()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;geometry.bind(program)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;program.uniforms.uView&#xA0;=&#xA0;view</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;program.uniforms.uProjection&#xA0;=&#xA0;projection</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;geometry.draw()</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;cubemap&#xA0;=&#xA0;createTextureCube(gl,&#xA0;canvases)</span></span></div>\n</code></pre>\n<p>The general workflow is to:</p>\n<ol>\n<li>Create a CubemapRenderer object.</li>\n<li>Use the CubemapRenderer object&apos;s WebGL context to perform any needed\npreparations for rendering.</li>\n<li>Call the CubemapRenderer object&apos;s <code>render</code> function with a function\nthat will render your scene.</li>\n</ol>\n<h2 id=\"api\">API</h2>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;CubemapRenderer&#xA0;=&#xA0;require(&apos;gl-render-cubemap&apos;)</span></span></div>\n</code></pre>\n<h4 id=\"var-cmr-new-cubemaprenderer-resolution-\"><code>var cmr = new CubemapRenderer(resolution)</code></h4>\n<p>Returns a CubemapRenderer object. This object has an attached <code>gl</code> field\nwhich should be used (independent of any non-cubemap rendering) to set up\nand render your cubemap.</p>\n<p>Takes an integer <code>resolution</code> which defines the resolution of each face\nof the cubemap.</p>\n<h4 id=\"var-canvases-cmr-render-function-renderscene-\"><code>var canvases = cmr.render(function renderScene() {...})</code></h4>\n<p>Returns a set of canvas objects:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;pos:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;x:&#xA0;canvas,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;y:&#xA0;canvas,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;z:&#xA0;canvas</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;},</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;neg:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;x:&#xA0;canvas,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;y:&#xA0;canvas,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;z:&#xA0;canvas</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<p>...which can be immediately consumed by\n<a href=\"https://github.com/wwwtyro/gl-texture-cube\">gl-texture-cube</a>.</p>\n<p>Takes a <code>renderScene</code> function that is used to render your scene into the cubemap.\nIt is called six times (once for each cubemap face) and is provided with a <code>params</code>\nobject.</p>\n<p>The <code>params</code> object contains the following fields:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;fov:&#xA0;float,&#xA0;radians&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;field&#xA0;of&#xA0;view&#xA0;you&#xA0;should&#xA0;use&#xA0;in&#xA0;your&#xA0;projection&#xA0;matrix</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;resolution:&#xA0;integer&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;resolution&#xA0;you&#xA0;provided&#xA0;to&#xA0;renderCubemap</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;aspect:&#xA0;float&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;aspect&#xA0;ratio&#xA0;you&#xA0;should&#xA0;use&#xA0;in&#xA0;your&#xA0;projection&#xA0;matrix</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;forward:&#xA0;vec3&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;direction&#xA0;you&#xA0;should&#xA0;set&#xA0;your&#xA0;view&#xA0;matrix&#xA0;to&#xA0;face</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;up:&#xA0;vec3&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//&#xA0;up&#xA0;direction&#xA0;for&#xA0;your&#xA0;view&#xA0;matrix</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;quad:&#xA0;flat&#xA0;position&#xA0;array&#xA0;//&#xA0;convenience&#xA0;geometry&#xA0;for&#xA0;rendering&#xA0;with&#xA0;raycasting&#xA0;techniques</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<p>With the exception of <code>quad</code>, most of the above should be pretty clear.\nThe <code>quad</code> object is a flat array of positions that represent the face\nof the cubemap being rendered. You can use this to create a\n<a href=\"https://github.com/hughsk/gl-geometry\">gl-geometry</a> for use in your\n<code>glsl</code> program to easily calculate a ray from the origin into your\nscene.</p>\n<p>This pattern is used in the included starfield example:</p>\n<h4 id=\"javascript\">Javascript</h4>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;canvases&#xA0;=&#xA0;cmr.render(function&#xA0;(params)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;geometry&#xA0;=&#xA0;Geometry(params.gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;.attr(&apos;aPosition&apos;,&#xA0;params.quad)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;program.bind()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;geometry.bind(program)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;program.uniforms.uView&#xA0;=&#xA0;view</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;program.uniforms.uProjection&#xA0;=&#xA0;projection</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;geometry.draw()</span></span></div><div class=\"line\"><span class=\"source js\"><span>});</span></span></div>\n</code></pre>\n<h4 id=\"vertex-shader\">Vertex Shader</h4>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>attribute</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;aPosition;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>mat4</span></span><span>&#xA0;uView;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>mat4</span></span><span>&#xA0;uProjection;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;vPosition;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_Position</span></span><span>&#xA0;=&#xA0;uProjection&#xA0;*&#xA0;uView&#xA0;*</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec4</span></span><span>(</span></span><span>aPosition,&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vPosition&#xA0;=&#xA0;aPosition;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<h4 id=\"fragment-shader\">Fragment Shader</h4>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;vPosition;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;p&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>normalize</span></span><span>(</span></span><span>vPosition);&#xA0;</span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;&lt;--&#xA0;This&#xA0;is&#xA0;the&#xA0;ray&#xA0;direction</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;derived&#xA0;from&#xA0;the&#xA0;quad&#xA0;geometry.</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;n&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>0.5</span></span><span>&#xA0;*</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>snoise3</span></span><span>(</span></span><span>p&#xA0;*&#xA0;</span><span class=\"constant numeric c\"><span>128.0</span></span><span>)&#xA0;+&#xA0;</span><span class=\"constant numeric c\"><span>0.5</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;n&#xA0;=</span><span class=\"punctuation whitespace support function leading c\"><span>&#xA0;</span></span><span class=\"support function C99 c\"><span>pow</span></span><span>(n,&#xA0;</span><span class=\"constant numeric c\"><span>24.0</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_FragColor</span></span><span>&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec4</span></span><span>(</span></span><span>n*</span><span class=\"constant numeric c\"><span>0.5</span></span><span>,n*</span><span class=\"constant numeric c\"><span>0.75</span></span><span>,n,&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n"}