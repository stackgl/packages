{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mattdesl/ray-sphere-intersection\">ray-sphere-intersection</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>Test whether a ray intersects with a sphere.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;intersect&#xA0;=&#xA0;require(&apos;ray-sphere-intersection&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;origin&#xA0;=&#xA0;[0,&#xA0;0,&#xA0;4],&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;direction&#xA0;=&#xA0;[0,&#xA0;0,&#xA0;-1],&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;center&#xA0;=&#xA0;[0,&#xA0;0,&#xA0;0],&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;radius&#xA0;=&#xA0;1</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;hit&#xA0;=&#xA0;intersect([],&#xA0;origin,&#xA0;direction,&#xA0;center,&#xA0;radius)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>if&#xA0;(hit)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;console.log(hit)&#xA0;//&#xA0;[0,&#xA0;0,&#xA0;1]</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<p>Adapted from <a href=\"https://github.com/libgdx/libgdx/blob/9eba80c6694160c743e43d4c3a5d60a5bad06f30/gdx/src/com/badlogic/gdx/math/Intersector.java\">LibGDX</a>. PRs for optimizations/etc welcome.</p>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://www.npmjs.com/package/ray-sphere-intersection\"></a></p>\n<h4 id=\"out-intersect-out-origin-direction-center-radius-\"><code>out = intersect(out, origin, direction, center, radius)</code></h4>\n<p>Determines if the 3D ray <code>(origin, direction)</code> intersects with the 3D sphere <code>(center, radius)</code>. </p>\n<p><strong>Note:</strong> <code>direction</code> must be normalized before calling this method</p>\n<p>If no intersection occurs, returns <code>null</code>. Otherwise, the intersection point is stored in <code>out</code> and then returned.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/mattdesl/ray-sphere-intersection/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}