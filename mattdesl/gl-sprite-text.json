{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mattdesl/gl-sprite-text\">gl-sprite-text</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p><img src=\"http://i.imgur.com/P5zUbNo.png\" alt=\"text\"></p>\n<p>A solution for bitmap and <a href=\"http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf\">SDF</a> text rendering in stack.gl. This uses <a href=\"https://nodei.co/npm/gl-sprite-batch/\">gl-sprite-batch</a> and <a href=\"https://www.npmjs.org/package/fontpath-simple-renderer\">fontpath</a> under the hood. </p>\n<p>The <a href=\"https://www.npmjs.org/package/bmfont2json\">BMFont spec</a> is used for glyph and font data. You also need to pass an array of <a href=\"https://www.npmjs.org/package/gl-texture2d\">gl-texture2d</a> items matching the <code>paths</code> specified by the font file. (Multi-page fonts are supported.)</p>\n<p>The <code>font</code> object can also include an <code>images</code> array (ndarray/HTMLImage), which will get piped into <code>gl-texture2d</code>.  You can use <a href=\"https://www.npmjs.org/package/bmfont-lato\">bmfont-lato</a> for testing; it includes Lato Regular in a few sizes and the base64-inlined <code>images</code> ndarray.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createText&#xA0;=&#xA0;require(&apos;gl-sprite-text&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;Lato&#xA0;=&#xA0;require(&apos;bmfont-lato&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//build&#xA0;the&#xA0;text</span></span></div><div class=\"line\"><span class=\"source js\"><span>text&#xA0;=&#xA0;createText(gl,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;font:&#xA0;Lato,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;text:&#xA0;&apos;Hello,&#xA0;World!&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//optionally&#xA0;word-wrap&#xA0;it&#xA0;to&#xA0;a&#xA0;specific&#xA0;width</span></span></div><div class=\"line\"><span class=\"source js\"><span>text.layout(500)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;render()&#xA0;{&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;//draws&#xA0;the&#xA0;text&#xA0;with&#xA0;lower-left&#xA0;origin</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;text.draw(shader)</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<p>See <a href=\"http://github.com/mattdesl/gl-sprite-text/blob/master/demo/simple.js\">demo/simple.js</a> for an example. After <code>npm install</code>, you can run it with:</p>\n<p><code>npm run demo-simple</code></p>\n<h2 id=\"tools\">Tools</h2>\n<p>After you&apos;ve exported the BMFont with <a href=\"https://github.com/libgdx/libgdx/wiki/Hiero\">your favourite tool</a>, you can run it through <a href=\"https://www.npmjs.org/package/bmfont2json\">bmfont2json</a> to produce valid output:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>#&#xA0;if&#xA0;you&#xA0;haven&apos;t&#xA0;already,&#xA0;install&#xA0;the&#xA0;tool&#xA0;globally</span></span></div><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;bmfont2json&#xA0;-g</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source shell\"><span>#&#xA0;then&#xA0;you&#xA0;can&#xA0;use&#xA0;it&#xA0;like&#xA0;so..</span></span></div><div class=\"line\"><span class=\"source shell\"><span>bmfont2json&#xA0;Lato32.fnt&#xA0;&gt;&#xA0;Lato32.json</span></span></div>\n</code></pre>\n<h2 id=\"signed-distance-fields\">Signed Distance Fields</h2>\n<p>Bitmap fonts are great for fixed-size text, but if you need large fonts, or fonts that scale smoothly (i.e. if it&apos;s being 3D transformed), it&apos;s better to use alpha testing to avoid aliasing artifacts. To generate SDF font atlases, you can use <a href=\"https://github.com/libgdx/libgdx/wiki/Distance-field-fonts\">Hiero and LibGDX</a>. Then, you need to render it with a signed distance field shader. See the <a href=\"http://github.com/mattdesl/gl-sprite-text/blob/master/demo/sdf.js\">demo/sdf.js</a> example:</p>\n<p><code>npm run demo-sdf</code></p>\n<p>As you can see from the demo, you can also achieve drop shadows, outlines, glows and other effects with independent colors. </p>\n<h2 id=\"static-text\">Static Text</h2>\n<p>By default, the text is pushed to dynamic buffers every frame. This allows it to animate (e.g. changing position, start/end indices, text content), and also ensures that underlines and multi-page textures will work. </p>\n<p>Basic static text is supported with the <code>cache()</code> method. Static text only supports a single texture page, and no underlines. </p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;text&#xA0;=&#xA0;createText(gl,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;font:&#xA0;myFont,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;textures:&#xA0;textures,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;text:&#xA0;str,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;//hint&#xA0;to&#xA0;buffers&#xA0;that&#xA0;they&#xA0;will&#xA0;be&#xA0;static</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;dynamic:&#xA0;false</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//cache&#xA0;the&#xA0;current&#xA0;text&#xA0;state</span></span></div><div class=\"line\"><span class=\"source js\"><span>text.cache(x,&#xA0;y,&#xA0;start,&#xA0;end)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;render()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;text.draw(shader)</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/gl-sprite-text/\"></a></p>\n<p>Inherits from <code>fontpath-simple-renderer</code> so the API should work, but this module may diverge from it in the future. Here is the current public API:</p>\n<h4 id=\"text-createtext-opts-\"><code>text = createText(opts)</code></h4>\n<p>The following options can be provided:</p>\n<ul>\n<li><code>font</code> the bitmap font object, required</li>\n<li><code>textures</code> an array of gl textures to match <code>font.paths</code>. If this is not specified, it will look for an <code>images</code> array in the <code>font</code> object, which can be ndarrays, HTMLImage objects, or anything that gets piped to <code>createTexture</code>.</li>\n<li><code>text</code> the string of text we will be rendering, default to empty string</li>\n<li><code>align</code> a string &apos;left&apos;, &apos;center&apos;, &apos;right&apos;, default left</li>\n<li><code>underline</code> boolean, whether to underline the text, default false</li>\n<li><code>underlinePosition</code> the position of underline in pixels, defaults to a fraction of font size</li>\n<li><code>underlineThickness</code> the underline thickness in pixels, defaults to a fraction of font size</li>\n<li><code>lineHeight</code> a line height in pixels, otherwise defaults to an automatic gap</li>\n<li><code>letterSpacing</code> the letter spacing in pixels, default 0</li>\n<li><code>wrapMode</code> can be <code>normal</code>, <code>pre</code>, or <code>nowrap</code>, default <code>normal</code></li>\n<li><code>wrapWidth</code> an initial number in pixels which is passed to <code>layout()</code> after the other options have been set. Otherwise, defaults to no layout (a single line, no breaks)</li>\n<li><code>capacity</code> an initial capacity to use for gl-sprite-batch</li>\n<li><code>dynamic</code> whether the WebGL buffers should use <code>DYNAMIC_DRAW</code>, default true</li>\n</ul>\n<p>All options except for <code>font</code>, <code>wrapMode</code> and <code>wrapWidth</code> are fields which be changed at runtime, before calling <code>draw()</code>.</p>\n<p><em>Note:</em> Changing the <code>text</code> currently calls <code>clearLayout()</code>. You will need to call <code>layout()</code> again. </p>\n<h4 id=\"text-draw-shader-x-y-start-end-\"><code>text.draw(shader[, x, y, start, end])</code></h4>\n<p>Draws the text with the given shader, at the specified pixel position (lower-left origin). </p>\n<p>The <code>start</code> (inclusive) and <code>end</code> (exclusive) indices will draw the laid out glyphs within those bounds. This can be used to style and colour different pieces of text. If not specified, they will default to 0 and the text length, respectively.</p>\n<p>If text is cached, the <code>x, y, start, end</code> parameters are ignored.</p>\n<h4 id=\"text-layout-wrapwidth-\"><code>text.layout([wrapWidth])</code></h4>\n<p>Word-wraps the text with the current wrap mode to the optional given width. You can change the wrap mode like so:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>text.wordwrap.mode&#xA0;=&#xA0;&apos;pre&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>text.layout(250)</span></span></div>\n</code></pre>\n<p>If no width is specified, it will only break on explicit newline characters <code>\\n</code>.</p>\n<p>This creates some new objects in memory, so you may not want to do it every frame. </p>\n<h4 id=\"text-clearlayout-\"><code>text.clearLayout()</code></h4>\n<p>Clears the current word-wrapping. This leads to a single line of text, no line-breaks. </p>\n<h4 id=\"text-getbounds-\"><code>text.getBounds()</code></h4>\n<p>Returns an object with the computed bounds of the text box:</p>\n<p><code>{ x, y, width height }</code></p>\n<p>This can be used to draw the text at an upper-left origin instead.</p>\n<h4 id=\"text-cache-x-y-start-end-\"><code>text.cache([x, y, start, end])</code></h4>\n<p>Caches the current text parameters into a static buffer. Underlines are not supported; and this only works with one texture page (e.g. all glyphs in a single sprite sheet).</p>\n<p>The parameters replace those in <code>draw()</code>. When cached, <code>draw()</code> will ignore the <code>x, y, start, end</code> parameters.</p>\n<h4 id=\"text-uncache-\"><code>text.uncache()</code></h4>\n<p>Disables caching, allowing it to be animated dynamically again. </p>\n<h4 id=\"text-dispose-textures-\"><code>text.dispose([textures])</code></h4>\n<p>If no <code>batch</code> was provided during the constructor, this will dispose of the default (internally created) batch. </p>\n<p>Specifying true for <code>textures</code> (default false) will also dispose of the texture array associated with this text object.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/mattdesl/gl-sprite-text/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}