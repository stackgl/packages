{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mattdesl/glsl-lut\">glsl-lut </a><div class=\"contrib\"></div></h1>\n<p><iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://mattdesl.github.io/glsl-lut/\"></iframe></p>\n<p><a href=\"http://mattdesl.github.io/glsl-lut/example/demo.html\">Demo here</a></p>\n<p>Use a texture as a lookup table to apply color transforms in a shader. Original implementation from GPUImage, see <a href=\"http://liovch.blogspot.ca/2012/07/add-instagram-like-effects-to-your-ios.html\">here</a>. For more details on the concept, see <a href=\"https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter24.html\">here</a>.</p>\n<p>This is geared towards OpenGL ES, so no 3D textures are used, and the lookup table is 512x512 (using every 4th color).</p>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/glsl-lut/\"></a></p>\n<p>First, grab the original (un-altered) lookup table from the <a href=\"http://github.com/mattdesl/glsl-lut/blob/master/image\">image</a> folder, or with the <a href=\"#cli\">CLI</a>. </p>\n<p>Then you can apply any filters with Photoshop or at runtime to the lookup table image. These can be things like curves, levels, grayscale, etc. Each transform must be independent of surrounding pixels (no blurs, median, etc).</p>\n<p>In your shader, sample the lookup texture (<code>uLookup</code> below) and pass the original <code>vec4</code> color to the transform method.</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>sampler2D</span></span><span>&#xA0;uLookup;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;transform&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;glsl-lut&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>...</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;original&#xA0;=&#xA0;</span><span class=\"support function glsl\"><span>texture2D</span></span><span>(uTexture,&#xA0;vUv);</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_FragColor</span></span><span>&#xA0;=&#xA0;transform(original,&#xA0;uLookup);</span></span></div>\n</code></pre>\n<blockquote>\n<p>&#x2757;<strong>Important</strong>: Make sure to set <code>TEXTURE_MIN_FILTER</code> and <code>TEXTURE_MAG_FILTER</code> to <code>NEAREST</code> on the lookup table texture.</p>\n</blockquote>\n<h2 id=\"flipped-y-lookup\">Flipped Y Lookup</h2>\n<p>Depending on your environment, the Y texture coordinate may need to be inverted during the lookup to get the correct color output. If your colours look messed up, this is most likely the case. Require the inverted function like so:</p>\n<pre><code>#pragma glslify: transform = require(glsl-lut/flipY)\n</code></pre><h2 id=\"defines\">Defines</h2>\n<p>Requiring <code>glsl-lut/flipY</code> is the same as making a define for <code>LUT_FLIP_Y</code>. You can also define <code>LUT_NO_CLAMP</code> before requiring the function and the incoming texture color will not have a <code>clamp(c, 0.0, 1.0)</code> operation applied. This may be useful if you plan to take advantage of hardware texture wrapping. </p>\n<h2 id=\"cli\">CLI</h2>\n<p>You can also use this tool as a command-line application to create a new (default) lookup table PNG image.</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;-g&#xA0;glsl-lut</span></span></div>\n</code></pre>\n<p>Then: </p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>glsl-lut&#xA0;&gt;&#xA0;images/lut.png</span></span></div>\n</code></pre>\n<p><sup>See <a href=\"https://github.com/BradLarson/GPUImage/blob/master/framework/Source/GPUImageLookupFilter.h\">this file</a> for further details on generating a lookup table programmatically.</sup></p>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/mattdesl/glsl-lut/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}