{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mattdesl/three-glslify\">three-glslify</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<h4 id=\"deprecated-\">DEPRECATED !</h4>\n<p>This bridge is no longer necessary in <a href=\"http://github.com/mattdesl/three-glslify/blob/master/mailto:`glslify@2.x\">`glslify@2.x</a>` and above. See <a href=\"https://github.com/mattdesl/three-glslify-example\">three-glslify-example</a> for a full example of using ThreeJS + glslify.</p>\n<hr>\n<p>A helper to turn <a href=\"https://github.com/stackgl/glslify\">glslify</a> shader into a ThreeJS shader object. </p>\n<p>Typical example:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;THREE&#xA0;=&#xA0;require(&apos;three&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//inline&#xA0;our&#xA0;shader&#xA0;code</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glslify&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;source&#xA0;=&#xA0;glslify({</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vertex:&#xA0;&apos;./foo.vert&apos;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;fragment:&#xA0;&apos;./foo.frag&apos;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;sourceOnly:&#xA0;true</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//create&#xA0;a&#xA0;shader&#xA0;that&#xA0;ThreeJS&#xA0;will&#xA0;recognize</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createShader&#xA0;=&#xA0;require(&apos;three-glslify&apos;)(THREE)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;myShader&#xA0;=&#xA0;createShader(source)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//we&#xA0;can&#xA0;now&#xA0;use&#xA0;it&#xA0;in&#xA0;ShaderMaterial&#xA0;or&#xA0;EffectComposer</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;pass&#xA0;=&#xA0;new&#xA0;THREE.ShaderPass(&#xA0;myShader&#xA0;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>effectComposer.addPass(pass)</span></span></div>\n</code></pre>\n<p>The returned <code>myShader</code> object looks like this, with new instances of Texture, Vector2, etc. based on the uniform type. Attributes start with empty arrays. </p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vertexShader:&#xA0;&apos;...&#xA0;source&#xA0;...&apos;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;fragmentShader:&#xA0;&apos;...&#xA0;source&#xA0;...&apos;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;uniforms:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;u_tex0:&#xA0;{&#xA0;type:&#xA0;&apos;t&apos;,&#xA0;value:&#xA0;new&#xA0;THREE.Texture()&#xA0;},</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;...&#xA0;etc</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;},</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;attributes:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;displacement:&#xA0;{&#xA0;type:&#xA0;&apos;f&apos;,&#xA0;value:&#xA0;[]&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/three-glslify/\"></a></p>\n<h3 id=\"createshader-source-options-\"><code>createShader(source, options)</code></h3>\n<p>Creates a shader with the given source (from glslify, using <code>sourceOnly</code>) and options.</p>\n<p>Options:</p>\n<ul>\n<li><code>colors</code> an array of uniform names that should be mapped to THREE.Color typed, <code>&apos;c&apos;</code>. Otherwise these will just be plain THREE.Vector3 types, <code>v3</code></li>\n</ul>\n<h2 id=\"gotchas\">Gotchas</h2>\n<p>Since ThreeJS release cycles are unpredictable and don&apos;t use semantic versioning, this module may break with newer versions of ThreeJS. It currently works with three 0.68.0 (r68). Send issues or PRs if you find versioning problems.</p>\n<p>ThreeJS distinguishes between an array of THREE.Vector3 objects, and a flattened <code>vec3</code> type represented by floats (<code>v3v</code> vs <code>fv</code>). This module only sees the <code>vec3</code> array type, and assumes they are to be represented by an array of THREE.Vector3 elements. Same with <code>ivec3</code>, <code>vec4</code>, etc. </p>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/mattdesl/three-glslify/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}