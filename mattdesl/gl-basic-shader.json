{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mattdesl/gl-basic-shader\">gl-basic-shader</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>Generates and compiles a basic shader with some common attributes and uniforms and a Model, View, Projection vertex transform. Also includes a <a href=\"#cli\">command-line interface</a></p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createShader&#xA0;=&#xA0;require(&apos;gl-basic-shader&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;shader&#xA0;=&#xA0;createShader(gl,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;texcoord:&#xA0;true,&#xA0;&#xA0;&#xA0;&#xA0;//vertex&#xA0;texcoords</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;normal:&#xA0;false,&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//vertex&#xA0;normals</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;color:&#xA0;true,&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//vertex&#xA0;colors</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;tint:&#xA0;[1,&#xA0;0,&#xA0;0,&#xA0;1]&#xA0;//uniform&#xA0;color&#xA0;tint</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//do&#xA0;some&#xA0;stuff&#xA0;with&#xA0;it</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.bind()</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.uniforms.texture0&#xA0;=&#xA0;0</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.attribuets.texcoord0.pointer()&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shader.attributes.color.pointer()</span></span></div>\n</code></pre>\n<p>The resulting shader will be compiled with the generated source:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;vertex&#xA0;shader</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>attribute</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;position;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>attribute</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;color;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>attribute</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;texcoord0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>mat4</span></span><span>&#xA0;projection;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>mat4</span></span><span>&#xA0;view;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>mat4</span></span><span>&#xA0;model;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;v_col;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;v_tex0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_Position</span></span><span>&#xA0;=&#xA0;projection&#xA0;*&#xA0;view&#xA0;*&#xA0;model&#xA0;*&#xA0;position;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;v_col&#xA0;=&#xA0;color;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;v_tex0&#xA0;=&#xA0;texcoord0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_PointSize</span></span><span>&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>fragment&#xA0;shader&#xA0;</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta preprocessor c\"><span>#</span><span class=\"keyword control import c\"><span>ifdef</span></span><span>&#xA0;GL_ES</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>precision&#xA0;mediump&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta preprocessor c\"><span>#</span><span class=\"keyword control import c\"><span>endif</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;v_col;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;v_tex0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>sampler2D</span></span><span>&#xA0;texture0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;tint;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_FragColor</span></span><span>&#xA0;=&#xA0;v_col&#xA0;*</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;&#xA0;</span></span><span class=\"support function any-method c\"><span>texture2D</span></span><span>(</span></span><span>texture0,&#xA0;&#xA0;v_tex0)&#xA0;*&#xA0;tint;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/gl-basic-shader/\"></a></p>\n<h3 id=\"shader-createshader-gl-options-\"><code>shader = createShader(gl[, options])</code></h3>\n<p>Creates a basic shader with the given options:</p>\n<ul>\n<li><code>texcoord</code> whether to generate <code>texcoord0</code> attribute vec2 and <code>texture0</code> sampler2D. If this is a number, then N texcoords and samplers will be used: <code>texture0</code>, <code>texture1</code>, etc.</li>\n<li><code>normal</code> wherther to generate a <code>normal</code> attribute vec3</li>\n<li><code>color</code> whether to generate a <code>color</code> attribute vec4</li>\n<li><code>tint</code> the default value bound to the <code>tint</code> uniform vec4, if not specified then white is used</li>\n<li><code>pointSize</code> the <code>gl_PointSize</code> for the vertex shader, defualt 1.0</li>\n</ul>\n<p>If the <code>texcoord</code>, <code>normal</code> or <code>color</code> options are false (or <code>texcoord</code> is 0) then that attribute will not be included in the shader.</p>\n<p>The <code>projection</code>, <code>model</code>, and <code>view</code> matrices are set to an identity matrix initially. </p>\n<h3 id=\"createshader-generate-options-\"><code>createShader.generate([options])</code></h3>\n<p>This function is exposed to provide the generated shader source, useful for testing and other purposes where GL shader compilation may not be desirable. The options are the same as the constructor.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;source&#xA0;=&#xA0;require(&apos;gl-basic-shader&apos;).generate(options)</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(source.vertex,&#xA0;source.fragment,&#xA0;source.attributes,&#xA0;source.uniforms)</span></span></div>\n</code></pre>\n<h2 id=\"attributes\">attributes</h2>\n<p>The attributes. Some may not be present if not specified at construction. They use a fixed location for easier VAO bindings.</p>\n<ul>\n<li><code>vec4 position</code> (location=0)</li>\n<li><code>vec3 normal</code> (location=1)</li>\n<li><code>vec4 color</code> (location=2)</li>\n<li><code>vec2 texcoord0</code>, <code>texcoord1</code>, etc.. (location=3..N)</li>\n</ul>\n<h2 id=\"uniforms\">uniforms</h2>\n<p>The uniforms. </p>\n<ul>\n<li><code>mat4 model</code></li>\n<li><code>mat4 view</code></li>\n<li><code>mat4 projection</code></li>\n<li><code>vec4 tint</code></li>\n<li><code>sampler2D texture0</code>, <code>texture1</code>, etc</li>\n</ul>\n<h2 id=\"cli\">cli</h2>\n<p>You can also use the command line tool to print a generic shader.</p>\n<p>Examples:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>#&#xA0;print&#xA0;the&#xA0;vertex&#xA0;and&#xA0;fragment&#xA0;shader&#xA0;with&#xA0;the&#xA0;given&#xA0;options</span></span></div><div class=\"line\"><span class=\"source shell\"><span>gl-basic-shader&#xA0;--color&#xA0;--normal&#xA0;--texcoord=2</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source shell\"><span>#&#xA0;print&#xA0;a&#xA0;new&#xA0;vertex&#xA0;shader&#xA0;to&#xA0;a&#xA0;file</span></span></div><div class=\"line\"><span class=\"source shell\"><span>gl-basic-shader&#xA0;--vert&#xA0;&gt;&#xA0;vert.glsl</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source shell\"><span>#&#xA0;pretty-print&#xA0;the&#xA0;JSON&#xA0;with&#xA0;extracted&#xA0;uniform/attribute&#xA0;info</span></span></div><div class=\"line\"><span class=\"source shell\"><span>#&#xA0;could&#xA0;then&#xA0;be&#xA0;fed&#xA0;easily&#xA0;into&#xA0;gl-shader-core</span></span></div><div class=\"line\"><span class=\"source shell\"><span>gl-basic-shader&#xA0;-jpe&#xA0;&gt;&#xA0;shader.json</span></span></div>\n</code></pre>\n<p>Full options:</p>\n<pre><code>Generate a basic shader.\nUsage: gl-basic-shader [opts]\n\nOptions:\n  --help, -h      show help message                   \n  --color, -c     insert color vertex attribute       \n  --texcoord, -t  insert texcoord vertex attribute(s) \n  --normal, -n    insert normal vertex attribute      \n  --json, -j      json output                         \n  --pretty, -p    pretty print json                   \n  --extract, -e   extract attribs/uniforms (json only)\n  --frag, -f      only show fragment shader           \n  --vert, -v      only show vertex shader  \n</code></pre><h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/mattdesl/gl-basic-shader/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}