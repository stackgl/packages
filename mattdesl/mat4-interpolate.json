{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mattdesl/mat4-interpolate\">mat4-interpolate</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>Interpolates between two 4x4 matrices, using algorithms from W3C Spec to produce consistent results with CSS animations. Like <a href=\"https://www.npmjs.org/package/mat4-interpolator\">mat4-interpolator</a> but does the decomposition in place. </p>\n<p>Translation, scale, skew and perspective are interpolated linearly, and rotation is interpolated with spherical interpolation.</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mat4&#xA0;=&#xA0;require(&apos;gl-mat4&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;start&#xA0;=&#xA0;mat4.create()</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;end&#xA0;=&#xA0;mat4.fromRotationTranslation([],&#xA0;[0,1,0,0],&#xA0;[20,&#xA0;50,&#xA0;-10])</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;out&#xA0;=&#xA0;mat4.create()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//the&#xA0;matrix&#xA0;interpolator</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;interpolate&#xA0;=&#xA0;require(&apos;mat4-interpolate&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//..&#xA0;in&#xA0;your&#xA0;render&#xA0;loop</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;render()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;//interpolate&#xA0;based&#xA0;on&#xA0;alpha,&#xA0;storing&#xA0;results&#xA0;in&#xA0;&apos;out&apos;&#xA0;matrix</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;vlid&#xA0;=&#xA0;interpolate(out,&#xA0;start,&#xA0;end,&#xA0;alpha)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(!valid)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//could&#xA0;not&#xA0;interpolate,&#xA0;you&#xA0;need&#xA0;to&#xA0;animate&#xA0;yourself&#xA0;somehow&#xA0;&#xA0;&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/mat4-interpolate/\"></a></p>\n<h4 id=\"valid-interpolate-out-start-end-alpha-\"><code>valid = interpolate(out, start, end, alpha)</code></h4>\n<p>Interpolates between <code>start</code> and <code>end</code> matrices (16 floats in an array) and stores the result in <code>out</code>, using <code>alpha</code> for interpolation. This will decompose the two matrices into components, lerp/slerp, and then recompose.</p>\n<p>Returns <code>true</code> is the interpolation succeeded, or <code>false</code> if either matrix is non-invertible (i.e. scale or perspective W of zero). W3C suggests falling back to discrete animations in this case.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/mattdesl/mat4-interpolate/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}