{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/freeman-lab/extrude\">extrude</a><div class=\"contrib\"></div></h1>\n<p>Use extrusion to turn a 2d shape into a 3d mesh. Extrusion is the process of &quot;pulling&quot; a 2d shape through space to make it 3d. This module contains a single function that accepts a collection of 2d points, and returns a 3d mesh in the form of a <a href=\"https://github.com/mikolalysenko/simplicial-complex\"><code>simplicial complex</code></a>, a data structure that works well with the <a href=\"http://stack.gl/\"><code>stack.gl</code></a> ecosystem. The implementation uses seidel&apos;s algorithm to triangulate the top and bottom faces, and  simple triangulated rectangles for the sides.</p>\n<p>View a <a href=\"http://freeman-lab.github.io/extrude\">demo</a>.</p>\n<p><iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://freeman-lab.github.io/extrude/\"></iframe><img src=\"https://raw.githubusercontent.com/freeman-lab/extrude/master/gif/square.gif\" alt=\"hex\"><img src=\"https://raw.githubusercontent.com/freeman-lab/extrude/master/gif/hexagon.gif\" alt=\"hex\"></p>\n<p><a href=\"https://github.com/feross/standard\"><img src=\"https://cdn.rawgit.com/feross/standard/master/badge.svg\" alt=\"js-standard-style\"></a></p>\n<h2 id=\"install\">install</h2>\n<p>To use in your project</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>npm&#xA0;install&#xA0;extrude</span></span></div>\n</code></pre>\n<p>To see an example, clone this repo, then call</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>npm&#xA0;install</span></span></div><div class=\"line\"><span class=\"source js\"><span>npm&#xA0;start</span></span></div>\n</code></pre>\n<p>and it should open a browser with a floating square. You can also try</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>npm&#xA0;run&#xA0;demo</span></span></div>\n</code></pre>\n<p>for a demo with several shapes.</p>\n<h2 id=\"example\">example</h2>\n<p>Assuming you already have a stack.gl context <code>gl</code>, make a cube like this!</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;extrude&#xA0;=&#xA0;require(&apos;extrude&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;points&#xA0;=&#xA0;[[-1,&#xA0;-1],&#xA0;[1,&#xA0;-1],&#xA0;[1,&#xA0;1],&#xA0;[-1,&#xA0;1]]</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;cube&#xA0;=&#xA0;extrude(points,&#xA0;{bottom:&#xA0;-1,&#xA0;top:&#xA0;1})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;geometry&#xA0;=&#xA0;require(&apos;gl-geometry&apos;)(gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>geometry.attr(&apos;position&apos;,&#xA0;cube.positions)</span></span></div><div class=\"line\"><span class=\"source js\"><span>geometry.faces(cube.cells)</span></span></div>\n</code></pre>\n<p>See <a href=\"http://github.com/freeman-lab/extrude/blob/master/example.js\"><code>example.js</code></a> for a complete end-to-end example.</p>\n<h2 id=\"usage\">usage</h2>\n<h4 id=\"complex-extrude-points-opts-\"><code>complex = extrude(points, opts)</code></h4>\n<p>Create a simplicial complex from a set of points.</p>\n<p><code>points</code> should be a list in the form <code>[[x, y], [x, y], ...]</code></p>\n<p><code>complex</code> has two attributes:</p>\n<ul>\n<li><code>complex.position</code> : array of 3d vertices <code>[[x, y, z], [x, y, z], ...]</code></li>\n<li><code>complex.cells</code> : array of tuples that index into the vertices <code>[[i, j, k], [i, j, k], ...]</code></li>\n</ul>\n<p><code>opts</code> can include the following options:</p>\n<ul>\n<li><code>opts.bottom</code> : bottom of the extruded object <code>default: 0</code></li>\n<li><code>opts.top</code> : top of the extruded object <code>default: 1</code></li>\n<li><code>opts.closed</code> : whether to close the top and bottom of the mesh <code>default: true</code></li>\n</ul>\n<p>If <code>top</code> and <code>bottom</code> are equal it will result in a single-sided 3d surface.</p>\n"}