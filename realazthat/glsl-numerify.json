{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/realazthat/glsl-numerify\">glsl-numerify</a><div class=\"contrib\"></div></h1>\n<p>####Description</p>\n<p>glsl-numerify is a debugging shader generator for WebGL: given a texture, blows it up in size,\ndisplays the pixel values as numbers.</p>\n<p>See <code>glsl-numerify-demo.js</code> for usage.</p>\n<p>####Example results</p>\n<h5 id=\"source-texture-4x4-then-scaled-up-\"><strong>Source texture, 4x4 (then scaled up)</strong>:</h5>\n<p><img src=\"https://raw.githubusercontent.com/realazthat/glsl-numerify/master/docs/numerify-4x4-exemplar-scaled-up.png\" alt=\"Example source texture\"></p>\n<h5 id=\"result-256x256-then-scaled-up-\"><strong>Result, 256x256 (then scaled up)</strong>:</h5>\n<p><img src=\"https://raw.githubusercontent.com/realazthat/glsl-numerify/master/docs/numerify-4x4-result.png\" alt=\"Result texture\"></p>\n<p>####How it works</p>\n<p>Basically, it makes a cell for each input pixel.</p>\n<ol>\n<li>For each output pixel, it figures out which cell it lies within.</li>\n<li>For each output pixel, it figures out the offset within the cell it lies within.</li>\n<li>Using the in-cell offset, it determines how far off the right of the cell the current\noutput pixel is.</li>\n<li>Using (3), it determines which digit place this output pixel lies within.</li>\n<li>Using the cell &lt;=&gt; source pixel relationship, it determines the value of the source pixel.</li>\n<li>Using (5), it determines what the digit value for that digit place is.</li>\n<li>Using (6,2), it picks a pixel from the digits texture, which stores all the digits (<code>./assets/digits.bmp</code>).</li>\n</ol>\n<p>####Dependencies</p>\n<ul>\n<li>nodejs</li>\n<li>browserify</li>\n<li>regl (for demo)</li>\n<li>resl (for demo)</li>\n<li>budo (for quick demo as an alternative to running browserify) </li>\n</ul>\n<p>####Demo</p>\n<p>To run the demo, run:</p>\n<pre><code>    cd ./glsl-numerify\n\n    #install npm dependencies\n    npm install\n\n    #browser should open with the demo\n    budo glsl-numerify-demo.js --open\n\n    #note that if your resolution is small, it will render everything too small.\n    #you can change the source texture size to see more satisfactory results.\n</code></pre><p>Results:</p>\n<table>\n<thead>\n<tr>\n<th>branch</th>\n<th>demo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>master</td>\n<td><a href=\"https://realazthat.github.io/glsl-numerify/master/www/glsl-numerify-demo/index.html\">glsl-numerify-demo</a></td>\n</tr>\n<tr>\n<td>develop</td>\n<td><a href=\"https://realazthat.github.io/glsl-numerify/develop/www/glsl-numerify-demo/index.html\">glsl-numerify-demo</a></td>\n</tr>\n</tbody>\n</table>\n<p>####Usage</p>\n<pre><code>const numerify = require(&apos;./glsl-numerify.js&apos;);\n</code></pre><h5 id=\"numerify-makefrag-multiplier-sourcesize-destinationcellsize-destinationsize-component-r-\"><code>numerify.makeFrag ({multiplier, sourceSize, destinationCellSize, destinationSize, component = &apos;r&apos;})</code></h5>\n<ul>\n<li>returns the webgl 1.0 fragment shader to use.</li>\n<li><code>multiplier</code><ol>\n<li>the source texture is typically treated as a normalized floating point value between [0,1] in the shader.</li>\n<li>therefore, to get at the &quot;real&quot; value, you can supply a multiplier. So for example having a multiplier of\n256 will result values in the range [0,255]. The output values will always be integer only, so this\ntypically needs to be used.</li>\n</ol>\n</li>\n<li><code>sourceSize</code> - a string in the form of a glsl vec2 with the source texture&apos;s size in pixels.</li>\n<li><code>destinationCellSize</code> - a string in the form of a glsl vec2 with the size of each cell within the destination texture.</li>\n<li><code>destinationSize</code> - the actual size of the destination texture; it might be exactly the same as<pre><code>                `sourceSize X destinationCellSize`.\n</code></pre></li>\n<li><code>component</code> - Which component of the input texture you are interested in rendering as digits.</li>\n</ul>\n<h5 id=\"numerify-makevert-\"><code>numerify.makeVert ()</code></h5>\n<ul>\n<li>returns the webgl 1.0 vertex shader to use.</li>\n</ul>\n"}