{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/realazthat/glsl-quad\">glsl-quad</a><div class=\"contrib\"></div></h1>\n<p>####Description</p>\n<p>glsl-quad provides simple utilities (simple quad mesh, shaders, etc.) for image processing with webgl.</p>\n<p>See <code>glsl-quad-demo.js</code> for usage.</p>\n<p>####Dependencies</p>\n<ul>\n<li>nodejs</li>\n<li>browserify</li>\n<li><a href=\"https://github.com/mikolalysenko/regl\">regl</a> (for demo)</li>\n<li><a href=\"https://github.com/mikolalysenko/resl\">resl</a> (for demo)</li>\n<li>budo (for quick demo as an alternative to running browserify) </li>\n</ul>\n<p>####Demo</p>\n<p>To run the demo, run:</p>\n<pre><code>    cd ./glsl-quad\n\n    #install npm dependencies\n    npm install\n\n    #browser should open with the demo\n    budo glsl-quad-demo.js --open\n</code></pre><p>Results:</p>\n<table>\n<thead>\n<tr>\n<th>branch</th>\n<th>demo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>master</td>\n<td><a href=\"https://realazthat.github.io/glsl-quad/master/www/glsl-quad-demo/index.html\">glsl-quad-demo</a></td>\n</tr>\n<tr>\n<td><a href=\"https://realazthat.github.io/glsl-quad/master/www/glsl-quad-uv-demo/index.html\">glsl-quad-uv-demo</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://realazthat.github.io/glsl-quad/master/www/glsl-quad-pos-demo/index.html\">glsl-quad-pos-demo</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://realazthat.github.io/glsl-quad/master/www/glsl-quad-vertical-flip-tests/index.html\">glsl-quad-vertical-flip-tests</a></td>\n<td></td>\n</tr>\n<tr>\n<td>develop</td>\n<td><a href=\"https://realazthat.github.io/glsl-quad/develop/www/glsl-quad-demo/index.html\">glsl-quad-demo</a></td>\n</tr>\n<tr>\n<td><a href=\"https://realazthat.github.io/glsl-quad/develop/www/glsl-quad-uv-demo/index.html\">glsl-quad-uv-demo</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://realazthat.github.io/glsl-quad/develop/www/glsl-quad-pos-demo/index.html\">glsl-quad-pos-demo</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://realazthat.github.io/glsl-quad/develop/www/glsl-quad-vertical-flip-tests/index.html\">glsl-quad-vertical-flip-tests</a></td>\n</tr>\n</tbody>\n</table>\n<p>####Docs</p>\n<pre><code>const quad = require(&apos;./glsl-quad.js&apos;);\n</code></pre><h5 id=\"quad-verts\"><code>quad.verts</code></h5>\n<ul>\n<li>A list of vertices that can be used for webgl positions, that make up a quad (two triangles).</li>\n</ul>\n<h5 id=\"quad-indices\"><code>quad.indices</code></h5>\n<ul>\n<li>A list of indices that can be used for webgl triangles, that make up a quad (two triangles).</li>\n</ul>\n<h5 id=\"quad-uvs\"><code>quad.uvs</code></h5>\n<ul>\n<li>A list of uv attributes for the vertices.</li>\n</ul>\n<h5 id=\"quad-shader-frag\"><code>quad.shader.frag</code></h5>\n<ul>\n<li>Returns the webgl 1.0 fragment shader to use.</li>\n<li>The fragment shader expects a uniform shader (sampler2D) named <code>u_tex</code>.</li>\n</ul>\n<h5 id=\"quad-shader-vert\"><code>quad.shader.vert</code></h5>\n<ul>\n<li>Returns the webgl 1.0 vertex shader to use.</li>\n<li>The vertex shader expects:<ul>\n<li>A uniform float named <code>u_clip_y</code>, representing whether to flip the y-axis; values of 1 or -1.</li>\n<li>An attribute list of vec2 positions of the vertices named <code>a_position</code>.</li>\n<li>An attribute list of vec2 uvs of the vertices named <code>a_uv</code>.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"quad-bitmaps-directions-uri\"><code>quad.bitmaps.directions.uri</code></h5>\n<ul>\n<li>Returns a data uri for an image that can be used to test proper display directions.</li>\n<li>Can see the images in the <code>glsl-quad/assets/</code> directory.</li>\n</ul>\n<p>####Usage</p>\n<p>See <code>glsl-quad-demo.js</code> for a full demo using <a href=\"https://github.com/mikolalysenko/regl\">regl</a>\nand <a href=\"https://github.com/mikolalysenko/resl\">resl</a>.</p>\n<p>An excerpt:</p>\n<pre><code>    const drawTexture = regl({\n      frag: quad.shader.frag,\n      vert: quad.shader.vert,\n      attributes: {\n        a_position: quad.verts,\n        a_uv: quad.uvs\n      },\n      elements: quad.indices,\n      uniforms: {\n        u_tex: regl.prop(&apos;texture&apos;),\n        u_clip_y: 1\n      }\n    });\n\n    drawTexture({texture});\n</code></pre>"}