{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mikolalysenko/surface-nets\">surface-nets</a><div class=\"contrib\"></div></h1>\n<p>Extract a simplicial level set from an <a href=\"https://github.com/mikolalysenko/ndarray\">ndarray</a> in any dimension using naive surface nets.  This module works in both node.js and with <a href=\"http://browserify.org/\">browserify</a>!</p>\n<p>If you are doing experiments with greedy meshing or working with rectangular data, then you might want <a href=\"https://github.com/mikolalysenko/contour2d\">contour2d</a> instead.</p>\n<h2 id=\"example\">Example</h2>\n<p>Here is a 2D example:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>//Load&#xA0;modules</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;surfaceNets&#xA0;=&#xA0;require(&quot;surface-nets&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;ndarray&#xA0;=&#xA0;require(&quot;ndarray&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;fill&#xA0;=&#xA0;require(&quot;ndarray-fill&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Initialize&#xA0;array&#xA0;to&#xA0;a&#xA0;circle</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;array&#xA0;=&#xA0;ndarray(new&#xA0;Float32Array(32*32),&#xA0;[32,32])</span></span></div><div class=\"line\"><span class=\"source js\"><span>fill(array,&#xA0;function(i,j)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;return&#xA0;Math.pow(i-16,2)&#xA0;+&#xA0;Math.pow(j-16,2)</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Extract&#xA0;2D&#xA0;contour&#xA0;(this&#xA0;is&#xA0;all&#xA0;there&#xA0;is&#xA0;to&#xA0;it!)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;complex&#xA0;=&#xA0;surfaceNets(array,&#xA0;15*15)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Write&#xA0;SVG&#xA0;image&#xA0;to&#xA0;stdout</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;svgFile&#xA0;=&#xA0;[&apos;&lt;svg&#xA0;xmlns=&quot;http://www.w3.org/2000/svg&quot;&#xA0;width=&quot;320&quot;&#xA0;height=&quot;320&quot;&gt;&apos;]</span></span></div><div class=\"line\"><span class=\"source js\"><span>complex.cells.forEach(function(cell)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;p0&#xA0;=&#xA0;complex.positions[cell[0]]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;p1&#xA0;=&#xA0;complex.positions[cell[1]]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;svgFile.push(&apos;&lt;line&#xA0;x1=&quot;&apos;,&#xA0;10*p0[0],&#xA0;&apos;&quot;&#xA0;y1=&quot;&apos;,&#xA0;10*p0[1],&#xA0;&apos;&quot;&#xA0;x2=&quot;&apos;,&#xA0;10*p1[0],&#xA0;&apos;&quot;&#xA0;y2=&quot;&apos;,&#xA0;10*p1[1],&#xA0;&apos;&quot;&#xA0;stroke=&quot;red&quot;&#xA0;stroke-width=&quot;1&quot;&#xA0;/&gt;&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>complex.positions.forEach(function(p)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;svgFile.push(&apos;&lt;circle&#xA0;cx=&quot;&apos;,&#xA0;10*p[0],&#xA0;&apos;&quot;&#xA0;cy=&quot;&apos;,&#xA0;10*p[1],&#xA0;&apos;&quot;&#xA0;r=&quot;1&quot;&#xA0;stroke=&quot;black&quot;&#xA0;stroke-width=&quot;0.1&quot;&#xA0;fill=&quot;black&quot;&#xA0;/&gt;&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>svgFile.push(&apos;&lt;/svg&gt;&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(svgFile.join(&quot;&quot;))</span></span></div>\n</code></pre>\n<p>And here is the output SVG:</p>\n<p><img src=\"https://mikolalysenko.github.io/surface-nets/example/2d.svg\"></p>\n<p>This module also works in 3D.  Here is an example:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>//Load&#xA0;modules</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;surfaceNets&#xA0;=&#xA0;require(&quot;surface-nets&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;ndarray&#xA0;=&#xA0;require(&quot;ndarray&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;fill&#xA0;=&#xA0;require(&quot;ndarray-fill&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mat4&#xA0;=&#xA0;require(&quot;gl-matrix&quot;).mat4</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Initialize&#xA0;array</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;array&#xA0;=&#xA0;ndarray(new&#xA0;Float32Array(32*32*32),&#xA0;[32,32,32])</span></span></div><div class=\"line\"><span class=\"source js\"><span>fill(array,&#xA0;function(i,j,k)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;return&#xA0;Math.pow(i-16,2)&#xA0;+&#xA0;Math.pow(j-16,2)&#xA0;+&#xA0;Math.pow(k-16,2)</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Generate&#xA0;surface!&#xA0;(again,&#xA0;just&#xA0;one&#xA0;line)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;complex&#xA0;=&#xA0;surfaceNets(array,&#xA0;100)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Render&#xA0;the&#xA0;implicit&#xA0;surface&#xA0;to&#xA0;stdout</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(&apos;&lt;svg&#xA0;xmlns=&quot;http://www.w3.org/2000/svg&quot;&#xA0;width=&quot;512&quot;&#xA0;height=&quot;512&quot;&#xA0;version=&quot;1.1&quot;&gt;&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(require(&quot;svg-3d-simplicial-complex&quot;)(</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;complex.cells,&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;complex.positions,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;view:&#xA0;mat4.lookAt(</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mat4.create(),&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[32,&#xA0;32,&#xA0;32],&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[16,&#xA0;16,&#xA0;16],&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[0,1,0]),</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;projection:&#xA0;mat4.perspective(mat4.create(),</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Math.PI/4.0,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1.0,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;0.1,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1000.0),</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;viewport:&#xA0;[[0,0],&#xA0;[512,512]]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}))</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(&quot;&lt;/svg&gt;&quot;)</span></span></div>\n</code></pre>\n<p>And here is the result:</p>\n<p><img src=\"https://mikolalysenko.github.io/surface-nets/example/3d.svg\"></p>\n<p>And while it is a bit trivial, you can also generate surfaces in 1D:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;surfaceNets&#xA0;=&#xA0;require(&quot;surface-nets&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;ndarray&#xA0;=&#xA0;require(&quot;ndarray&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(surfaceNets(ndarray([1,&#xA0;-1,&#xA0;0,&#xA0;5,&#xA0;-10])))</span></span></div>\n</code></pre>\n<p>Output:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>{&#xA0;positions:&#xA0;[&#xA0;[&#xA0;0.5&#xA0;],&#xA0;[&#xA0;2&#xA0;],&#xA0;[&#xA0;3.3333333333333335&#xA0;]&#xA0;],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;cells:&#xA0;[&#xA0;[&#xA0;0&#xA0;],&#xA0;[&#xA0;1&#xA0;],&#xA0;[&#xA0;2&#xA0;]&#xA0;]&#xA0;}</span></span></div>\n</code></pre>\n<p>The code <em>should</em> work in 4D and higher dimensions, but this is not well tested and it is harder to visualize.  (Also, why would you want to bother!?!)</p>\n<h2 id=\"install\">Install</h2>\n<pre><code>npm install surface-nets\n</code></pre><h2 id=\"api\">API</h2>\n<h4 id=\"require-surface-nets-array-level-\"><code>require(&quot;surface-nets&quot;)(array[,level])</code></h4>\n<p>Extracts the level set at <code>level</code> from <code>array</code> as a simplicial complex.</p>\n<ul>\n<li><code>array</code> is an <a href=\"https://github.com/mikolalysenko/ndarray\">ndarray</a></li>\n<li><code>level</code> is an optional number which determines the level at which the levelset is evaluated (default <code>0</code>)</li>\n</ul>\n<p><strong>Returns</strong> An object with a pair of properties representing a simplicial complex:</p>\n<ul>\n<li><code>positions</code> is an array encoding the positions of the vertices.  The coordinates of the positions are with respect to the indices in <code>array</code>.</li>\n<li><code>cells</code> is an array encoding the cells of the simplicial complex as tuples of indices into the <code>position</code> array.</li>\n</ul>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2014 Mikola Lysenko. MIT License</p>\n"}