{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mikolalysenko/vectorize-text\">vectorize-text</a><div class=\"contrib\"></div></h1>\n<p>Convert a string of text into a vectorized geometric representation. Works in both node.js and <a href=\"http://browserify.org/\">browserify</a>.</p>\n<h2 id=\"example\">Example</h2>\n<p>This module is capable of outputting geometry in several formats.</p>\n<h3 id=\"planar-graphs\">Planar graphs</h3>\n<p>The default (and fastest) output from the module is a planar graph:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;vectorizeText&#xA0;=&#xA0;require(&quot;vectorize-text&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;graph&#xA0;=&#xA0;vectorizeText(&quot;Hello&#xA0;world!&#xA0;&#x4F60;&#x597D;&quot;,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;width:&#xA0;500,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;textBaseline:&#xA0;&quot;hanging&quot;</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;svg&#xA0;=&#xA0;[&apos;&lt;svg&#xA0;xmlns=&quot;http://www.w3.org/2000/svg&quot;&#xA0;xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&#xA0;&#xA0;width=&quot;500&quot;&#xA0;&#xA0;height=&quot;80&quot;&#xA0;&gt;&apos;]</span></span></div><div class=\"line\"><span class=\"source js\"><span>graph.edges.forEach(function(e)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;p0&#xA0;=&#xA0;graph.positions[e[0]]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;p1&#xA0;=&#xA0;graph.positions[e[1]]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;svg.push(&apos;&lt;line&#xA0;x1=&quot;&apos;&#xA0;+&#xA0;p0[0]&#xA0;+&#xA0;&apos;&quot;&#xA0;y1=&quot;&apos;&#xA0;+&#xA0;p0[1]&#xA0;+</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&apos;&quot;&#xA0;x2=&quot;&apos;&#xA0;+&#xA0;p1[0]&#xA0;+&#xA0;&apos;&quot;&#xA0;y2=&quot;&apos;&#xA0;+&#xA0;p1[1]&#xA0;+</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&apos;&quot;&#xA0;stroke-width=&quot;1&quot;&#xA0;stroke=&quot;black&quot;&#xA0;/&gt;&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>svg.push(&quot;&lt;/svg&gt;&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(svg.join(&quot;&quot;))</span></span></div>\n</code></pre>\n<p>Output:</p>\n<p><img src=\"https://mikolalysenko.github.io/vectorize-text/example/hello-graph.svg\"></p>\n<h3 id=\"polygons\">Polygons</h3>\n<p>You can also configure the module to emit polygons instead:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;vectorizeText&#xA0;=&#xA0;require(&quot;vectorize-text&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;polygons&#xA0;=&#xA0;vectorizeText(&quot;Hello&#xA0;world!&#xA0;&#x4F60;&#x597D;&quot;,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;polygons:&#xA0;true,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;width:&#xA0;500,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;textBaseline:&#xA0;&quot;hanging&quot;</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;svg&#xA0;=&#xA0;[]</span></span></div><div class=\"line\"><span class=\"source js\"><span>svg.push(&apos;&lt;svg&#xA0;xmlns=&quot;http://www.w3.org/2000/svg&quot;&#xA0;xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&#xA0;&#xA0;width=&quot;500&quot;&#xA0;&#xA0;height=&quot;80&quot;&#xA0;&gt;&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>polygons.forEach(function(loops)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;svg.push(&apos;&lt;path&#xA0;d=&quot;&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;loops.forEach(function(loop)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;start&#xA0;=&#xA0;loop[0]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;svg.push(&apos;M&#xA0;&apos;&#xA0;+&#xA0;start[0]&#xA0;+&#xA0;&apos;&#xA0;&apos;&#xA0;+&#xA0;start[1])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;for(var&#xA0;i=1;&#xA0;i&lt;loop.length;&#xA0;++i)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;p&#xA0;=&#xA0;loop[i]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;svg.push(&apos;L&#xA0;&apos;&#xA0;+&#xA0;p[0]&#xA0;+&#xA0;&apos;&#xA0;&apos;&#xA0;+&#xA0;p[1])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;svg.push(&apos;L&#xA0;&apos;&#xA0;+&#xA0;start[0]&#xA0;+&#xA0;&apos;&#xA0;&apos;&#xA0;+&#xA0;start[1])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;svg.push(&apos;&quot;&#xA0;fill-rule=&quot;even-odd&quot;&#xA0;stroke-width=&quot;1&quot;&#xA0;fill=&quot;red&quot;&gt;&lt;/path&gt;&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>svg.push(&apos;&lt;/svg&gt;&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(svg)</span></span></div>\n</code></pre>\n<p>Output:</p>\n<p><img src=\"https://mikolalysenko.github.io/vectorize-text/example/hello-polygon.svg\"></p>\n<h3 id=\"triangulations\">Triangulations</h3>\n<p>Finally, the module can output a triangulation (which is compatible with WebGL for example):</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;vectorizeText&#xA0;=&#xA0;require(&quot;vectorize-text&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;complex&#xA0;=&#xA0;vectorizeText(&quot;Hello&#xA0;world!&#xA0;&#x4F60;&#x597D;&quot;,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;triangles:&#xA0;true,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;width:&#xA0;500,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;textBaseline:&#xA0;&quot;hanging&quot;</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;svg&#xA0;=&#xA0;[&apos;&lt;svg&#xA0;xmlns=&quot;http://www.w3.org/2000/svg&quot;&#xA0;xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&#xA0;&#xA0;width=&quot;500&quot;&#xA0;&#xA0;height=&quot;80&quot;&#xA0;&gt;&apos;]</span></span></div><div class=\"line\"><span class=\"source js\"><span>complex.cells.forEach(function(c)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;for(var&#xA0;j=0;&#xA0;j&lt;3;&#xA0;++j)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;p0&#xA0;=&#xA0;complex.positions[c[j]]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;var&#xA0;p1&#xA0;=&#xA0;complex.positions[c[(j+1)%3]]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;svg.push(&apos;&lt;line&#xA0;x1=&quot;&apos;&#xA0;+&#xA0;p0[0]&#xA0;+&#xA0;&apos;&quot;&#xA0;y1=&quot;&apos;&#xA0;+&#xA0;p0[1]&#xA0;+</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&apos;&quot;&#xA0;x2=&quot;&apos;&#xA0;+&#xA0;p1[0]&#xA0;+&#xA0;&apos;&quot;&#xA0;y2=&quot;&apos;&#xA0;+&#xA0;p1[1]&#xA0;+</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&apos;&quot;&#xA0;stroke-width=&quot;1&quot;&#xA0;stroke=&quot;black&quot;&#xA0;/&gt;&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>svg.push(&quot;&lt;/svg&gt;&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(svg)</span></span></div>\n</code></pre>\n<p>Output:</p>\n<p><img src=\"https://mikolalysenko.github.io/vectorize-text/example/hello-triangles.svg\"></p>\n<h2 id=\"install\">Install</h2>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;vectorize-text</span></span></div>\n</code></pre>\n<h2 id=\"api\">API</h2>\n<h4 id=\"require-vectorize-text-string-options-\"><code>require(&quot;vectorize-text&quot;)(string[,options])</code></h4>\n<p>Renders a string to a 2D cell complex</p>\n<ul>\n<li><code>string</code> is a string of text (single line)</li>\n<li><p><code>options</code> is an optional object of parameters</p>\n<ul>\n<li><code>options.font</code> is the font family to use (default: <code>&quot;normal&quot;</code>)</li>\n<li><code>options.fontStyle</code> if set, determines the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-style\">font-style</a></li>\n<li><code>options.fontVariant</code> if set, determines the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant\">font-variant</a></li>\n<li><code>options.fontWeight</code> if set, determines the <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/font-weight\">font-weight</a></li>\n<li><code>options.size</code> is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-size\">font-size</a> used for the rasterization step (determines level of detail of the mesh)</li>\n<li><code>options.textBaseline</code> determines the baseline, same semantics as the canvas <a href=\"https://developer.mozilla.org/en-US/docs/Drawing_text_using_a_canvas#Attributes\">textBaseline</a> property.  Default: <code>&quot;alphabetic&quot;</code></li>\n<li><code>options.textAlign</code> determines the alignment for the text, same semantics as canvas <a href=\"https://developer.mozilla.org/en-US/docs/Drawing_text_using_a_canvas#Attributes\">textAlign</a>.  Default: <code>&quot;start&quot;</code></li>\n<li><code>options.lineHeight</code> determines the height of a line.  Default: <code>1.0</code></li>\n<li><code>options.width</code> determines the width of the text, overrides <code>lineHeight</code> if specified</li>\n<li><code>options.height</code> determines the height of the text, overrides <code>lineHeight</code> if specified</li>\n<li><code>options.triangles</code> if set, then output a triangulation</li>\n<li><code>options.polygons</code> if set, output a list of polygons</li>\n<li><code>options.orientation</code> determines the orientation of any output triangles/polygon curves.  Must be either <code>&quot;cw&quot;</code> for clockwise or <code>&quot;ccw&quot;</code> for counter clockwise.  Default is <code>&quot;cw&quot;</code>.</li>\n<li><code>options.canvas</code> an optional canvas element</li>\n<li><code>options.context</code> an optional canvas 2D context</li>\n<li><code>options.styletags.breaklines</code> if set, break-line tags i.e. &lt; br &gt; could be used in the input to enter new lines.</li>\n<li><code>options.styletags.bolds</code> if set, parts of the input i.e. between &lt; b &gt; and &lt; /b &gt; would be presented <b>bold</b>.</li>\n<li><code>options.styletags.italics</code> if set, parts of the input i.e. between &lt; i &gt; and &lt; /i &gt; would be presented <i>italic</i>.</li>\n<li><code>options.styletags.superscripts</code> if set, parts of the input i.e. between &lt; sup &gt; and &lt; /sup &gt; would be presented in as superscript. Multiple superscipts are also allowded. For example Line 0<sup>Line 1<sup>Line 2</sup></sup>.</li>\n<li><code>options.styletags.subscripts</code> if set, parts of the input i.e. between &lt; sub &gt; and &lt; /sub &gt; would be presented in as subscript. Multiple subscipts are also allowded. For example: Line 0<sub>Line 1<sub>Line 2</sub></sub>. Note: it is also possible to combine sub and superscripts: A<sub>B<sup>C</sup></sub>.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Returns</strong> The returned value depends on the type of geometry</p>\n<ul>\n<li><p><em>Planar graph</em>: This is the fastest output format. A JSON object encoding the embedding of an oriented planar graph, with the following properties:</p>\n<ul>\n<li><code>edges</code> are the edges of the graph</li>\n<li><code>positions</code> are the positions</li>\n</ul>\n</li>\n<li><p><em>Polygon list</em>: A list of complex polygons encoded as arrays of positions.  This format is most suitable for SVG and GeoJSON output</p>\n</li>\n<li><p><em>Triangulation</em>: This format may be most suitable for WebGL/rendering applications. A 2D oriented simplicial complex encoded as a list of cells and positions, represented by a JSON object with two properties</p>\n<ul>\n<li><code>cells</code> are the faces of the triangulation, encoded as triples of indices into the vertex array</li>\n<li><code>positions</code> are the positions of the vertices in the triangulation</li>\n</ul>\n</li>\n</ul>\n<p><strong>Note</strong> In node.js, this library requires Cairo. For more information on how to set this up, look at the documentation for the <a href=\"https://www.npmjs.org/package/canvas\">canvas module</a>.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2014 Mikola Lysenko. MIT License</p>\n"}