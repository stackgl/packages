{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mikolalysenko/glsl-read-float\">glsl-read-float</a><div class=\"contrib\"></div></h1>\n<p>Workaround for reading floating point values back from the GPU using GLSL.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;triangle&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;a-big-triangle&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;fit&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;canvas-fit&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;getContext&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;gl-context&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glslify&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;unpackFloat&#xA0;&#xA0;=&#xA0;require(&quot;glsl-read-float&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;canvas&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;document.body.appendChild(document.createElement(&apos;canvas&apos;))</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;gl&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;getContext(canvas,&#xA0;render)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>window.addEventListener(&apos;resize&apos;,&#xA0;fit(canvas),&#xA0;false)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;shader&#xA0;=&#xA0;glslify({</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;vert:&#xA0;&quot;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>attribute&#xA0;vec2&#xA0;position;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>void&#xA0;main()&#xA0;{\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;gl_Position&#xA0;=&#xA0;vec4(position,&#xA0;0,&#xA0;1);\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>}&quot;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;frag:&#xA0;&quot;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>#pragma&#xA0;glslify:&#xA0;packFloat&#xA0;=&#xA0;require(glsl-read-float)\\n\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>uniform&#xA0;highp&#xA0;float&#xA0;f;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>void&#xA0;main()&#xA0;{\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;gl_FragColor&#xA0;=&#xA0;packFloat(f);\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>}&quot;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;inline:&#xA0;true</span></span></div><div class=\"line\"><span class=\"source js\"><span>})(gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;render()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;num&#xA0;=&#xA0;Math.random()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//Draw&#xA0;shader</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader.bind()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader.uniforms.f&#xA0;=&#xA0;num</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;triangle(gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//Read&#xA0;back&#xA0;the&#xA0;float</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;buffer&#xA0;=&#xA0;new&#xA0;Uint8Array(4)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;gl.readPixels(0,&#xA0;0,&#xA0;1,&#xA0;1,&#xA0;gl.RGBA,&#xA0;gl.UNSIGNED_BYTE,&#xA0;buffer)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;unpacked&#xA0;=&#xA0;unpackFloat(buffer[0],&#xA0;buffer[1],&#xA0;buffer[2],&#xA0;buffer[3])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//Log&#xA0;output&#xA0;to&#xA0;console</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;console.log(&quot;expected:&quot;,&#xA0;num,&#xA0;&quot;got:&quot;,&#xA0;unpacked)</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<h2 id=\"install\">Install</h2>\n<pre><code>npm install glsl-read-float\n</code></pre><h2 id=\"api\">API</h2>\n<h3 id=\"glsl\">GLSL</h3>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;packFloat&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>glsl-read-float</span></span><span>)</span><span>&#xA0;</span></span></div>\n</code></pre>\n<h4 id=\"vec4-packed-packfloat-float-f-\"><code>vec4 packed = packFloat(float f)</code></h4>\n<p>Packs a floating point number into an 8bit RGBA color vector, which can be written to the display using <code>gl_FragColor</code>, for example.</p>\n<ul>\n<li><code>f</code> is a <code>float</code> number</li>\n</ul>\n<p><strong>Returns</strong> A packed <code>vec4</code> encoding the value of <code>f</code></p>\n<h3 id=\"javascript\">JavaScript</h3>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;unpackFloat&#xA0;=&#xA0;require(&quot;glsl-read-float&quot;)</span></span></div>\n</code></pre>\n<h4 id=\"var-f-unpackfloat-x-y-z-w-\"><code>var f = unpackFloat(x, y, z, w)</code></h4>\n<p>Unpacks a packed <code>vec4</code> into a single floating point value.</p>\n<ul>\n<li><code>x</code> is the first component of the packed float</li>\n<li><code>y</code> is the second component of the packed float</li>\n<li><code>z</code> is the third component of the packed float</li>\n<li><code>w</code> is the fourth component of the packed float</li>\n</ul>\n<p><strong>Returns</strong> A number which is the unpacked value of the floating point input.</p>\n<p><strong>Note</strong> This module doesn&apos;t handle denormals or floats larger than <code>Math.pow(2, 127)</code></p>\n<h2 id=\"credits\">Credits</h2>\n<p>Originally based on a routine by @ultraist. You can find his blog here: <a href=\"http://ultraist.hatenablog.com/\">http://ultraist.hatenablog.com/</a></p>\n<p>Newer version rewritten by Mikola Lysenko.  MIT License (c) 2014</p>\n"}