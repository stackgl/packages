{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mikolalysenko/orbit-camera\">orbit-camera</a><div class=\"contrib\"></div></h1>\n<p>Simple arcball camera built on top of gl-matrix</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;shell&#xA0;=&#xA0;require(&quot;gl-now&quot;)()</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createMesh&#xA0;=&#xA0;require(&quot;gl-mesh&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glm&#xA0;=&#xA0;require(&quot;gl-matrix&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mat4&#xA0;=&#xA0;glm.mat4</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;simple3DShader&#xA0;=&#xA0;require(&quot;simple-3d-shader&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createOrbitCamera&#xA0;=&#xA0;require(&quot;orbit-camera&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;camera&#xA0;=&#xA0;createOrbitCamera([0,&#xA0;10,&#xA0;20],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[0,&#xA0;3,&#xA0;0],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[0,&#xA0;1,&#xA0;0])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;shader,&#xA0;mesh</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shell.on(&quot;gl-init&quot;,&#xA0;function()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader&#xA0;=&#xA0;simple3DShader(shell.gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;mesh&#xA0;=&#xA0;createMesh(shell.gl,&#xA0;require(&quot;bunny&quot;))</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shell.on(&quot;gl-render&quot;,&#xA0;function(t)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader.bind()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;scratch&#xA0;=&#xA0;mat4.create()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader.uniforms.model&#xA0;=&#xA0;scratch</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader.uniforms.projection&#xA0;=&#xA0;mat4.perspective(scratch,&#xA0;Math.PI/4.0,&#xA0;shell.width/shell.height,&#xA0;0.1,&#xA0;1000.0)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader.uniforms.view&#xA0;=&#xA0;camera.view(scratch)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;mesh.bind(shader)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;mesh.draw()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;mesh.unbind()</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shell.on(&quot;tick&quot;,&#xA0;function()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;if(shell.wasDown(&quot;mouse-left&quot;))&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;camera.rotate([shell.mouseX/shell.width-0.5,&#xA0;shell.mouseY/shell.height-0.5],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[shell.prevMouseX/shell.width-0.5,&#xA0;shell.prevMouseY/shell.height-0.5])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;if(shell.wasDown(&quot;mouse-right&quot;))&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;camera.pan([10*(shell.mouseX-shell.prevMouseX)/shell.width,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;10*(shell.mouseY&#xA0;-&#xA0;shell.prevMouseY)/shell.height])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;if(shell.scroll[1])&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;camera.zoom(shell.scroll[1]&#xA0;*&#xA0;0.1)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div>\n</code></pre>\n<h2 id=\"install\">Install</h2>\n<pre><code>npm install orbit-camera\n</code></pre><h2 id=\"api\">API</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createOrbitCamera&#xA0;=&#xA0;require(&quot;orbit-camera&quot;)</span></span></div>\n</code></pre>\n<h3 id=\"var-camera-createorbitcamera-eye-center-up-\"><code>var camera = createOrbitCamera(eye, center, up)</code></h3>\n<p>Creates an orbit camera looking at <code>center</code>.  This has the same semantics as <code>gluLookAt</code></p>\n<ul>\n<li><code>eye</code> is the eye vector of the camera</li>\n<li><code>center</code> is the target the camera is looking at</li>\n<li><code>up</code> is the up direction for the camera</li>\n</ul>\n<p><strong>Returns</strong> A new orbit camera object</p>\n<h3 id=\"camera-lookat-eye-center-up-\"><code>camera.lookAt(eye, center, up)</code></h3>\n<p>Move the camera to look at the new position.</p>\n<h3 id=\"camera-pan-translation-\"><code>camera.pan(translation)</code></h3>\n<p>Moves the center of the camera by <code>translation</code>.  Note that translation must be an array of length either 2 or 3</p>\n<h3 id=\"camera-rotate-cur-prev-\"><code>camera.rotate(cur, prev)</code></h3>\n<p>Applies a rotation to the camera.  <code>cur</code> and <code>prev</code> are the state of the previous locations.  These can be pairs of 2D arrays representing the mouse coordinates in distance relative to the center of the sceen.</p>\n<h3 id=\"camera-zoom-delta-\"><code>camera.zoom(delta)</code></h3>\n<p>Zooms in or out by some amount</p>\n<h3 id=\"camera-view-out-\"><code>camera.view([out])</code></h3>\n<p>Returns the current view matrix associated to the camera</p>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2013 Mikola Lysenko. MIT License</p>\n"}