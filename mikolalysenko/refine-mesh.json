{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mikolalysenko/refine-mesh\">refine-mesh</a><div class=\"contrib\"></div></h1>\n<p>Iterative mesh refinement based on the technique in</p>\n<ul>\n<li>M. Botsch, L. Kobbelt. 2004 &quot;<a href=\"http://www.researchgate.net/publication/221316497_A_Remeshing_Approach_to_Multiresolution_Modeling\">A Remeshing Approach to Multiresolution Modeling</a>&quot; EUROGRAPHICS 2004</li>\n</ul>\n<p>Give this some garbage mesh as input and it will automagically give you a nice uniformly subdivided mesh.</p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;refine&#xA0;=&#xA0;require(&apos;refine-mesh&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;bunny&#xA0;=&#xA0;require(&apos;bunny&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;normals&#xA0;=&#xA0;require(&apos;normals&apos;).vertexNormals(bunny.cells,&#xA0;bunny.positions)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Refine&#xA0;the&#xA0;bunny&#xA0;from&#xA0;a&#xA0;base&#xA0;mesh&#xA0;to&#xA0;one&#xA0;with&#xA0;a&#xA0;uniform&#xA0;edge&#xA0;length&#xA0;of&#xA0;0.1</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;refined&#xA0;=&#xA0;refine(</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;bunny.cells,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;bunny.positions,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;normals,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;edgeLength:&#xA0;0.1</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;})</span></span></div>\n</code></pre>\n<p>So, a coarse bunny mesh like this:</p>\n<p><img src=\"https://raw.githubusercontent.com/mikolalysenko/refine-mesh/master/img/bunny-coarse.png\" width=\"512\"></p>\n<p>Becomes a fine mesh like this:</p>\n<p><img src=\"https://raw.githubusercontent.com/mikolalysenko/refine-mesh/master/img/bunny-fine.png\" width=\"512\"></p>\n<h2 id=\"install\">Install</h2>\n<pre><code>npm i refine-mesh\n</code></pre><h2 id=\"api\">API</h2>\n<h4 id=\"var-mesh-require-refine-mesh-cells-positions-normals-options-\"><code>var mesh = require(&apos;refine-mesh&apos;)(cells, positions, normals[,options])</code></h4>\n<p>Applies iterative mesh refinement to a cell complex</p>\n<ul>\n<li><code>cells</code> is an array of triples representing the faces of the mesh</li>\n<li><code>positions</code> is an array of <code>[x,y,z]</code> triples representing the vertices</li>\n<li><code>normals</code> is an array of <code>[nx,ny,nz]</code> triples representing the normals</li>\n<li><code>options</code> is an object with the following properties:<ul>\n<li><code>edgeLength</code> is the desired edge length (default is median edge length)</li>\n<li><code>maxIters</code> is the maximum number of iterations (default <code>5</code>)</li>\n<li><code>splitIters</code> maximum number of edge split iterations (default <code>10</code>)</li>\n<li><code>collapseIters</code> maximum number of edge collapse iterations (default <code>10</code>)</li>\n<li><code>flipIters</code> maximum number of edge flip iterations (default <code>10</code>)</li>\n<li><code>smoothIters</code> maximum number of smoothing iterations (default <code>20</code>)</li>\n<li><code>smoothRate</code> constant controlling rate of smoothing (default <code>0.95</code>)</li>\n<li><code>minSplit</code> minimum number of splits per iteration (default <code>0</code>)</li>\n<li><code>minCollapse</code> minimum number of collapse operations (default <code>0</code>)</li>\n<li><code>minFlip</code> minimum number of flip operations (default <code>0</code>)</li>\n<li><code>minSmooth</code> minimum smoothing improvement (default <code>0.01*edgeLength</code>)</li>\n</ul>\n</li>\n</ul>\n<p><strong>Returns</strong> An object with the following properties</p>\n<ul>\n<li><code>cells</code> the faces of the resulting mesh</li>\n<li><code>positions</code> vertex positions of result</li>\n<li><code>normals</code> vertex normals of result</li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>(c) 2015 Mikola Lysenko. MIT License</p>\n"}