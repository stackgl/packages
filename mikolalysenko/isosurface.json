{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mikolalysenko/isosurface\">isosurface</a><div class=\"contrib\"></div></h1>\n<p>Isosurface polygonizer algorithms in JavaScript.  For more details, see the following blog posts:</p>\n<ul>\n<li><a href=\"http://0fps.wordpress.com/2012/08/29/what-is-a-solid/\">What is a solid?</a></li>\n<li>Smooth voxel terrain <a href=\"http://0fps.wordpress.com/2012/07/10/smooth-voxel-terrain-part-1/\">Part 1</a> <a href=\"http://0fps.wordpress.com/2012/07/12/smooth-voxel-terrain-part-2/\">Part 2</a></li>\n</ul>\n<p><a href=\"http://mikolalysenko.github.com/Isosurface/\">Or try out a live demo</a></p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;isosurface&#xA0;=&#xA0;require(&quot;isosurface&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mesh&#xA0;=&#xA0;isosurface.surfaceNets([64,64,64],&#xA0;function(x,y,z)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;return&#xA0;x*x&#xA0;+&#xA0;y*y&#xA0;+&#xA0;z*z&#xA0;-&#xA0;100</span></span></div><div class=\"line\"><span class=\"source js\"><span>},&#xA0;[[-11,-11,-11],&#xA0;[11,11,11]])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(mesh)</span></span></div>\n</code></pre>\n<h2 id=\"install\">Install</h2>\n<pre><code>npm install isosurface\n</code></pre><h2 id=\"api\">API</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;isosurface&#xA0;=&#xA0;require(&quot;isosurface&quot;)</span></span></div>\n</code></pre>\n<h4 id=\"isosurface-surfacenets-dims-potential-bounds-\"><code>isosurface.surfaceNets(dims, potential[, bounds])</code></h4>\n<p>Extracts an isosurface from <code>potential</code> using surface nets with resolution given by <code>dims</code>.</p>\n<p>Params:</p>\n<ul>\n<li><code>dims</code>: A 3D vector of integers representing the resolution of the isosurface</li>\n<li><code>potential(x,y,z)</code>: A scalar valued potential function taking 3 coordinates as arguments returning a scalar.</li>\n<li><code>bounds</code>: A pair of 3D vectors <code>[lo, hi]</code> giving bounds on the potential to sample.  If not specified, default is <code>[[0,0,0], dims]</code>.</li>\n</ul>\n<p>Returns: A mesh object with the following members:</p>\n<ul>\n<li><code>positions</code>: The coordinates of the vertices of the mesh</li>\n<li><code>cells</code>: The faces of the mesh.</li>\n</ul>\n<h4 id=\"isosurface-marchingcubes-dims-potential-bounds-\"><code>isosurface..marchingCubes(dims, potential[, bounds])</code></h4>\n<p>Same as above, except uses marching cubes instead of surface nets to extract the isosurface.</p>\n<h4 id=\"isosurface-marchingtetrahedra-dims-potential-bounds-\"><code>isosurface.marchingTetrahedra(dims, potential[, bounds])</code></h4>\n<p>Same as above, except uses marching tetrahedra instead of surface nets to extract the isosurface.</p>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2012-2014 Mikola Lysenko.  MIT License</p>\n"}