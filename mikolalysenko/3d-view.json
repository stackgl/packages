{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/mikolalysenko/3d-view\">3d-view</a><div class=\"contrib\"></div></h1>\n<p>This module is a generic interface which synchronizes several existing view interactions</p>\n<ul>\n<li><a href=\"https://github.com/mikolalysenko/turntable-camera-controller\">turntable-camera-controller</a></li>\n<li><a href=\"https://github.com/mikolalysenko/orbit-camera-controller\">orbit-camera-controller</a></li>\n<li><a href=\"https://github.com/mikolalysenko/orbit-camera-controller\">matrix-camera-controller</a></li>\n</ul>\n<p>Each camera controller proceeds by appending events onto a log.  The current camera state is obtained by interpolating between these events.</p>\n<iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://mikolalysenko.github.io/3d-view/\"></iframe><h2 id=\"api\">API</h2>\n<p><a href=\"https://mikolalysenko.github.io/3d-view\">Try a more complete demo here</a></p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;now&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;right-now&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;bunny&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;bunny&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;perspective&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;gl-mat4/perspective&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;fit&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;canvas-fit&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createContext&#xA0;&#xA0;=&#xA0;require(&apos;gl-context&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createAxes&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;gl-axes&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createMesh&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;gl-simplicial-complex&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createCamera&#xA0;&#xA0;&#xA0;=&#xA0;require(&apos;3d-view&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Set&#xA0;up&#xA0;WebGL</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;canvas&#xA0;=&#xA0;document.createElement(&apos;canvas&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>document.body.appendChild(canvas)</span></span></div><div class=\"line\"><span class=\"source js\"><span>window.addEventListener(&apos;resize&apos;,&#xA0;fit(canvas),&#xA0;false)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;gl&#xA0;=&#xA0;createContext(canvas,&#xA0;{},&#xA0;render)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Create&#xA0;objects&#xA0;for&#xA0;rendering</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;bounds&#xA0;=&#xA0;[[-10,-10,-10],&#xA0;[10,10,10]]</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;mesh&#xA0;=&#xA0;createMesh(gl,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;cells:&#xA0;bunny.cells,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;positions:&#xA0;bunny.positions,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;colormap:&#xA0;&apos;jet&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;})</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;axes&#xA0;=&#xA0;createAxes(gl,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;bounds:&#xA0;bounds,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;tickSpacing:&#xA0;[1,1,1],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;textSize:&#xA0;0.05</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Set&#xA0;up&#xA0;camera</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;projectionMatrix&#xA0;=&#xA0;new&#xA0;Array(16)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;camera&#xA0;=&#xA0;createCamera({</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;center:&#xA0;&#xA0;[</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;0.5*(bounds[0][0]+bounds[1][0]),</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;0.5*(bounds[0][1]+bounds[1][1]),</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;0.5*(bounds[0][2]+bounds[1][2])&#xA0;],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;eye:&#xA0;[0,&#xA0;0,&#xA0;bounds[1][2]],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;distanceLimits:&#xA0;[1,&#xA0;1000]</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Create&#xA0;mode&#xA0;drop&#xA0;down</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;modeSelect&#xA0;=&#xA0;document.createElement(&apos;select&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>camera.modes.forEach(function(mode)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;modeSelect.add(new&#xA0;Option(mode,&#xA0;mode))</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>modeSelect.style.position&#xA0;=&#xA0;&apos;absolute&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>modeSelect.style.left&#xA0;=&#xA0;&apos;10px&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>modeSelect.style.top&#xA0;=&#xA0;&apos;10px&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>modeSelect.style[&apos;z-index&apos;]&#xA0;=&#xA0;10</span></span></div><div class=\"line\"><span class=\"source js\"><span>document.body.appendChild(modeSelect)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Hook&#xA0;event&#xA0;listeners</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;lastX&#xA0;=&#xA0;0,&#xA0;lastY&#xA0;=&#xA0;0</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>document.oncontextmenu&#xA0;=&#xA0;function(e)&#xA0;{&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;e.preventDefault()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;e.stopPropagation()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;return&#xA0;false&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>modeSelect.addEventListener(&apos;change&apos;,&#xA0;function(ev)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;camera.setMode(modeSelect.value)</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>canvas.addEventListener(&apos;mousemove&apos;,&#xA0;function(ev)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;dx&#xA0;=&#xA0;&#xA0;(ev.clientX&#xA0;-&#xA0;lastX)&#xA0;/&#xA0;gl.drawingBufferWidth</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;dy&#xA0;=&#xA0;-(ev.clientY&#xA0;-&#xA0;lastY)&#xA0;/&#xA0;gl.drawingBufferHeight</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;if(ev.which&#xA0;===&#xA0;1)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;if(ev.shiftKey)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//zoom</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;camera.rotate(now(),&#xA0;0,&#xA0;0,&#xA0;dx)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;else&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;//rotate</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;camera.rotate(now(),&#xA0;dx,&#xA0;dy)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}&#xA0;else&#xA0;if(ev.which&#xA0;===&#xA0;3)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;//pan</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;camera.pan(now(),&#xA0;dx,&#xA0;dy)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;lastX&#xA0;=&#xA0;ev.clientX</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;lastY&#xA0;=&#xA0;ev.clientY</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>canvas.addEventListener(&apos;wheel&apos;,&#xA0;function(e)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;camera.pan(now(),&#xA0;0,&#xA0;0,&#xA0;e.deltaY)</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//Redraw&#xA0;frame</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;render()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//Update&#xA0;camera&#xA0;parameters</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;t&#xA0;=&#xA0;now()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;camera.idle(t&#xA0;-&#xA0;20)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;camera.flush(t&#xA0;-&#xA0;100)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;camera.recalcMatrix(t-25)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//Compute&#xA0;parameters</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;cameraParams&#xA0;=&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;view:&#xA0;camera.computedMatrix,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;projection:&#xA0;perspective(</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Math.PI/4.0,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gl.drawingBufferWidth/gl.drawingBufferHeight,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;0.1,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;1000.0)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//Draw&#xA0;everything</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;gl.viewport(0,&#xA0;0,&#xA0;gl.drawingBufferWidth,&#xA0;gl.drawingBufferHeight)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;gl.enable(gl.DEPTH_TEST)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;axes.draw(cameraParams)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;mesh.draw(cameraParams)</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<h2 id=\"constructor\">Constructor</h2>\n<h4 id=\"var-camera-require-3d-view-options-\"><code>var camera = require(&apos;3d-view&apos;)([options])</code></h4>\n<h2 id=\"methods\">Methods</h2>\n<h4 id=\"camera-idle-t-\"><code>camera.idle(t)</code></h4>\n<p>Idles the camera at time <code>t</code></p>\n<ul>\n<li><code>t</code> is the time to idle at</li>\n</ul>\n<h4 id=\"camera-flush-t-\"><code>camera.flush(t)</code></h4>\n<p>Flush all events in camera state before time <code>t</code></p>\n<ul>\n<li><code>t</code> is the cut off time for the flush</li>\n</ul>\n<h4 id=\"camera-modes\"><code>camera.modes</code></h4>\n<p>An array of modes supported by the camera</p>\n<h4 id=\"camera-setmode-mode-\"><code>camera.setMode(mode)</code></h4>\n<p>Sets the camera mode</p>\n<ul>\n<li><code>mode</code> is the new mode.  Must be either <code>turntable</code>, <code>orbit</code> or <code>matrix</code></li>\n</ul>\n<h4 id=\"camera-getmode-\"><code>camera.getMode()</code></h4>\n<p>Retrieves the current camera mode</p>\n<h4 id=\"camera-lookat-t-eye-center-up-\"><code>camera.lookAt(t, eye, center, up)</code></h4>\n<p>Reset camera position to focus on a specified target</p>\n<ul>\n<li><code>t</code> is the time of the event</li>\n<li><code>eye</code> is the position of the camera</li>\n<li><code>center</code> is the target of the camera</li>\n<li><code>up</code> is a vector pointing up</li>\n</ul>\n<h4 id=\"camera-rotate-t-yaw-pitch-roll-\"><code>camera.rotate(t, yaw, pitch, roll)</code></h4>\n<p>Rotates the camera incrementally by some amount</p>\n<ul>\n<li><code>t</code> is the time of the input event</li>\n<li><code>yaw</code> is the amount to rotate by along y-axis in radians</li>\n<li><code>pitch</code> is the amount to rotate by along x-axis in radians</li>\n<li><code>roll</code> is the amount to rotate by along z-axis in radians</li>\n</ul>\n<h4 id=\"camera-pan-t-dx-dy-dz-\"><code>camera.pan(t, dx, dy, dz)</code></h4>\n<p>Pans the camera in local (view relative) coordinates</p>\n<ul>\n<li><code>t</code> is the time of the event</li>\n<li><code>dx,dy,dz</code> is the amount to move</li>\n</ul>\n<h4 id=\"camera-translate-t-dx-dy-dz-\"><code>camera.translate(t, dx, dy, dz)</code></h4>\n<p>Translates the camera in world (absolute global) coordinates</p>\n<ul>\n<li><code>t</code> is the time of the event</li>\n<li><code>dx,dy,dz</code> is the amount to move</li>\n</ul>\n<h4 id=\"camera-setmatrix-t-matrix-\"><code>camera.setMatrix(t, matrix)</code></h4>\n<p>Sets the camera matrix to some fixed 4x4 matrix</p>\n<ul>\n<li><code>t</code> is the time of the event</li>\n<li><code>matrix</code> is the new camera matrix</li>\n</ul>\n<h4 id=\"camera-setdistance-t-r-\"><code>camera.setDistance(t, r)</code></h4>\n<p>Sets camera distance at time <code>t</code></p>\n<ul>\n<li><code>t</code> is the time of the event</li>\n<li><code>r</code> is the new camera distance</li>\n</ul>\n<h4 id=\"camera-setdistancelimits-lo-hi-\"><code>camera.setDistanceLimits(lo, hi)</code></h4>\n<p>Sets bounds on the camera distance</p>\n<h4 id=\"camera-getdistancelimits-out-\"><code>camera.getDistanceLimits([out])</code></h4>\n<p>Retrieves the camera limits</p>\n<h4 id=\"camera-recalcmatrix-t-\"><code>camera.recalcMatrix(t)</code></h4>\n<p>Recomputes all matrix properties at time <code>t</code></p>\n<h4 id=\"camera-computedmatrix\"><code>camera.computedMatrix</code></h4>\n<p>The computed 4x4 matrix of the camera</p>\n<h4 id=\"camera-computedeye\"><code>camera.computedEye</code></h4>\n<p>The computed 3d eye vector for the camera</p>\n<h4 id=\"camera-computedup\"><code>camera.computedUp</code></h4>\n<p>Computed up vector (initialized when calling recalcMatrix)</p>\n<h4 id=\"camera-computedcenter\"><code>camera.computedCenter</code></h4>\n<p>Computed camera center point</p>\n<h4 id=\"camera-computedradius\"><code>camera.computedRadius</code></h4>\n<p>Computed log(radius)</p>\n<h2 id=\"license\">License</h2>\n<p>(c) 2015 Mikola Lysenko. MIT License</p>\n"}