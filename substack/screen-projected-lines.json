{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/substack/screen-projected-lines\">screen-projected-lines</a><div class=\"contrib\"></div></h1>\n<p>draw wireframes using triangles in <a href=\"https://mattdesl.svbtle.com/drawing-lines-is-hard#screenspace-projected-lines_2\">screen-projected coordinates</a></p>\n<p>This module triangulates edges from a <a href=\"https://npmjs.com/package/simplicial-complex\">simplicial complex</a> and returns\narrays you can use as attributes in a vertex shader.</p>\n<p>This module does not currently support miter joins, but that would be nice to\nhave.</p>\n<h2 id=\"example\">example</h2>\n<p>In this demo, we will draw a wireframe sphere with an exaggerated sense of\ndepth by dividing the offset vector by <code>p.z</code>.</p>\n<p><a href=\"https://substack.neocities.org/wireframe_sphere.html\">view this demo</a></p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;regl&#xA0;=&#xA0;require(&apos;regl&apos;)()</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;camera&#xA0;=&#xA0;require(&apos;regl-camera&apos;)(regl,&#xA0;{&#xA0;distance:&#xA0;1.7&#xA0;})</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;icosphere&#xA0;=&#xA0;require(&apos;icosphere&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glsl&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;wireframe&#xA0;=&#xA0;require(&apos;screen-projected-lines&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;draw&#xA0;=&#xA0;sphere(regl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>regl.frame(function&#xA0;()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;regl.clear({&#xA0;color:&#xA0;[0,0,0,1],&#xA0;depth:&#xA0;true&#xA0;})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;camera(function&#xA0;()&#xA0;{&#xA0;draw()&#xA0;})</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;sphere&#xA0;(regl)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;mesh&#xA0;=&#xA0;wireframe(icosphere(2))</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;return&#xA0;regl({</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;frag:&#xA0;`</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;precision&#xA0;mediump&#xA0;float;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;main&#xA0;()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gl_FragColor&#xA0;=&#xA0;vec4(0,1,1,1);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;`,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vert:&#xA0;glsl`</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;#pragma&#xA0;glslify:&#xA0;linevoffset&#xA0;=&#xA0;require(&apos;screen-projected-lines&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;precision&#xA0;mediump&#xA0;float;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;uniform&#xA0;mat4&#xA0;projection,&#xA0;view;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;uniform&#xA0;float&#xA0;aspect;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;attribute&#xA0;vec3&#xA0;position,&#xA0;nextpos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;attribute&#xA0;float&#xA0;direction;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;main&#xA0;()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mat4&#xA0;proj&#xA0;=&#xA0;projection&#xA0;*&#xA0;view;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vec4&#xA0;p&#xA0;=&#xA0;proj*vec4(position,1);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vec4&#xA0;n&#xA0;=&#xA0;proj*vec4(nextpos,1);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;vec4&#xA0;offset&#xA0;=&#xA0;linevoffset(p,&#xA0;n,&#xA0;direction,&#xA0;aspect);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gl_Position&#xA0;=&#xA0;p&#xA0;+&#xA0;offset*0.02/p.z;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;`,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;attributes:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;position:&#xA0;mesh.positions,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;nextpos:&#xA0;mesh.nextPositions,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;direction:&#xA0;mesh.directions</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;},</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;elements:&#xA0;mesh.cells,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;uniforms:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;aspect:&#xA0;function&#xA0;(context)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;context.viewportWidth&#xA0;/&#xA0;context.viewportHeight</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;})</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<p>To compile this code, use browserify with the glslify transform:</p>\n<pre><code>browserify sphere.js -t glslify &gt; bundle.js\n</code></pre><h2 id=\"api\">api</h2>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;wireframe&#xA0;=&#xA0;require(&apos;screen-projected-lines&apos;)</span></span></div>\n</code></pre>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;linevoffset&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;screen-projected-lines&apos;</span></span><span>)</span><span>&#xA0;</span></span></div>\n</code></pre>\n<h2 id=\"var-wmesh-wireframe-mesh-opts-\">var wmesh = wireframe(mesh, opts={})</h2>\n<p>Create a wireframe mesh given an existing triangular mesh.</p>\n<p>The wireframe mesh has these properties:</p>\n<ul>\n<li><code>wmesh.positions</code> - array of vertex <code>[x,y,z]</code> arrays</li>\n<li><code>wmesh.cells</code> - array of triangle indices</li>\n<li><code>wmesh.nextPositions</code> - array of the next vertex coordinates</li>\n<li><code>wmesh.directions</code> - array of values to use for which side of each vertex</li>\n<li><code>wmesh.attributes</code> - extra attributes declared alongside vertices</li>\n<li><code>wmesh.angles</code> - array of angles betwen the triangles that share an edge</li>\n</ul>\n<p>The normals are not computed on the CPU here so that you can apply additional\ndisplacements in your vertex shader.</p>\n<p>Optionally provide <code>opts.attributes</code> to declare attributes alongside the\noriginal vertices. For example, if you want to use computed surface normals to\ndisplace your wireframe mesh, you could do:</p>\n<pre><code>var anormals = require(&apos;angle-normals&apos;)\nvar wmesh = wireframe(mesh, {\n  attributes: {\n    normals: anormals(mesh.cells, mesh.positions)\n  }\n})\n</code></pre><p>and then you can use <code>wmesh.attributes.normals</code> alongside <code>wmesh.positions</code> as\nan attribute.</p>\n<h2 id=\"vec4-offset-linevoffset-vec4-pos-vec4-nextpos-float-direction-float-aspect-\">vec4 offset = linevoffset(vec4 pos, vec4 nextpos, float direction, float aspect)</h2>\n<p>Return the screen offset to apply to <code>pos</code> given the current vertex screen\nposition <code>pos</code>, the screen position of the next vertex in the edge <code>nextpos</code>,\nthe direction of the vertex (<code>-1.0</code> or <code>1.0</code>), and the aspect ratio.</p>\n<p>The offset vector is normalized, so multiply by a constant to adjust thickness.</p>\n<p>To have the thinkness vary with depth like everything else:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;offset&#xA0;=&#xA0;linevoffset(p,&#xA0;n,&#xA0;direction,&#xA0;aspect);</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"support variable glsl\"><span>gl_Position</span></span><span>&#xA0;=&#xA0;p&#xA0;+&#xA0;offset*</span><span class=\"constant numeric c\"><span>0.02</span></span><span>;</span></span></div>\n</code></pre>\n<p>To have the thinkness have an exaggerated sense of depth:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;offset&#xA0;=&#xA0;linevoffset(p,&#xA0;n,&#xA0;direction,&#xA0;aspect);</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"support variable glsl\"><span>gl_Position</span></span><span>&#xA0;=&#xA0;p&#xA0;+&#xA0;offset*</span><span class=\"constant numeric c\"><span>0.02</span></span><span>/p</span><span class=\"keyword operator glsl\"><span>.z</span></span><span>;</span></span></div>\n</code></pre>\n<p>To have the thinkness not vary with depth:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;offset&#xA0;=&#xA0;linevoffset(p,&#xA0;n,&#xA0;direction,&#xA0;aspect);</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"support variable glsl\"><span>gl_Position</span></span><span>&#xA0;=&#xA0;p&#xA0;+&#xA0;offset*</span><span class=\"constant numeric c\"><span>0.02</span></span><span>*p</span><span class=\"keyword operator glsl\"><span>.z</span></span><span>;</span></span></div>\n</code></pre>\n<h2 id=\"install\">install</h2>\n<pre><code>npm install screen-projected-lines\n</code></pre><h2 id=\"license\">license</h2>\n<p>BSD</p>\n"}