{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/gl-particles\">gl-particles</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>Convenience module for FBO-driven particle simulations.</p>\n<p><strong><a href=\"http://stack.gl/gl-particles/\">view demo</a></strong></p>\n<iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://stack.gl/gl-particles/\"></iframe><h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/gl-particles/\"></a></p>\n<p>See <a href=\"http://github.com/stackgl/gl-particles/blob/master/demo.js\">demo.js</a> for a full example.</p>\n<h3 id=\"particles-particles-gl-options-\"><code>particles = Particles(gl, options)</code></h3>\n<p>Creates a new particle simulation given a WebGLContext <code>gl</code> and set\nof <code>options</code>:</p>\n<ul>\n<li><code>logic</code>: the logic shader for simulating the particles, as a string. Required.</li>\n<li><code>vert</code>: the vertex shader responsible for determining the rendered particles&apos;\nposition and size. Required.</li>\n<li><code>frag</code>: the fragment shader responsible for determining the color/texture of\neach particle. Required.</li>\n<li><code>shape</code>: a <code>[width, height]</code> array for the dimensions of the particle texture.\nThis determines the total amount of particles, which should be <code>width * height</code>.\nDefaults to <code>[64, 64]</code>.</li>\n</ul>\n<p>Your logic shader will automatically be assigned the following uniforms:</p>\n<ul>\n<li><code>sampler2D data</code>: the particle data texture.</li>\n<li><code>vec2 resolution</code>: the width/height of the data texture.</li>\n</ul>\n<p>And your fragment/vertex shaders will be assigned the following:</p>\n<ul>\n<li><code>sampler2D data</code>: the particle data texture.</li>\n</ul>\n<h3 id=\"particles-populate-u-v-vec4-\"><code>particles.populate((u, v, vec4) =&gt;)</code></h3>\n<p>Populates the data for each particle in your FBO textures individually.</p>\n<ul>\n<li><code>u</code> is the horizontal index of the particle in pixels.</li>\n<li><code>v</code> is the vertical index of the particle in pixels.</li>\n<li><code>vec4</code> is a 4-element array which you should modify in-place to update\nthe current particle&apos;s values.</li>\n</ul>\n<p>For example, if you have 2D positions for your particles you would set them\nrandomly like so:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>particles.populate(function(u,&#xA0;v,&#xA0;vec4)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;vec4[0]&#xA0;=&#xA0;Math.random()&#xA0;*&#xA0;2&#xA0;-&#xA0;1</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;vec4[1]&#xA0;=&#xA0;Math.random()&#xA0;*&#xA0;2&#xA0;-&#xA0;1</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div>\n</code></pre>\n<h3 id=\"particles-step-uniforms-\"><code>particles.step((uniforms) =&gt;)</code></h3>\n<p>Runs one step of the <code>logic</code> shader &#x2013; should generally be done once per\nframe.</p>\n<p>You may optionally pass in a function to update the shader&apos;s uniforms, e.g.:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;start&#xA0;=&#xA0;Date.now()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>particles.step(function(uniforms)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;uniforms.time&#xA0;=&#xA0;(Date.now()&#xA0;-&#xA0;start)&#xA0;/&#xA0;1000</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div>\n</code></pre>\n<p><em>Note that this will modify your WebGL state. Specifically, it will reset\nyour current framebuffer, viewport and shader.</em></p>\n<h3 id=\"particles-draw-uniforms-\"><code>particles.draw((uniforms) =&gt;)</code></h3>\n<p>Draws your particles to the screen using the <code>vert</code> and <code>frag</code> shaders.</p>\n<p>As with <code>particles.step</code>, you may pass in an optional function for updating\nthe shader&apos;s uniforms.</p>\n<h3 id=\"particles-setlogicshader-logicshadersource-\"><code>particles.setLogicShader(logicShaderSource)</code></h3>\n<p>Change the logic shader to <code>logicShaderSource</code>.</p>\n<h2 id=\"contributing\">Contributing</h2>\n<p>See <a href=\"https://github.com/stackgl/contributing\">stackgl/contributing</a> for details.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT. See <a href=\"http://github.com/stackgl/gl-particles/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}