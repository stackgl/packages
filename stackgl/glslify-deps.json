{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/glslify-deps\">glslify-deps</a><div class=\"contrib\"></div></h1>\n<p>Walk the dependency graph of a <a href=\"http://github.com/stackgl/glslify\">glslify</a>\nshader.</p>\n<p><code>glslify-deps</code> is responsible for resolving your shader&apos;s dependencies and\napplying their transforms before the actual source modification occurs. You may\nnotice some parallels here with <a href=\"http://browserify.org\">browserify</a>&apos;s\n<a href=\"http://github.com/substack/module-deps\">module-deps</a> package.</p>\n<p>While <code>glslify-deps</code> is an &quot;internal&quot; package for <code>glslify</code>, it may be useful\nto use this package directly in specific cases, e.g. building a file tree\nserver-side but bundling the final shader on the client.</p>\n<h2 id=\"module-api\">Module API</h2>\n<p>There is an asynchronous and a synchronous API:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glslifyDeps&#xA0;=&#xA0;require(&apos;glslify-deps&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glslifyDepsSync&#xA0;=&#xA0;require(&apos;glslify-deps/sync&apos;)</span></span></div>\n</code></pre>\n<p>The asynchronous API is documented below. For every method in the asychronous\nAPI, instead of a <code>callback(err, result)</code>, the result is available as the return\nvalue of the method.</p>\n<h3 id=\"depper-glslifydeps-options-\"><code>depper = glslifyDeps([options])</code></h3>\n<p>Creates a fresh <code>glslify-deps</code> instance. Accepts the following options:</p>\n<ul>\n<li><code>cwd</code>: the current working directory to resolve relative file paths from.</li>\n<li><code>readFile</code>: pass in a custom function reading files.</li>\n<li><code>resolve</code>: pass in a custom function for resolving require calls. It has\nthe same signature as <a href=\"http://github.com/hughsk/glsl-resolve\">glsl-resolve</a>.</li>\n<li><code>files</code>: a filename/source object mapping of files to prepopulate\nthe file cache with. Useful for overriding particular file paths manually,\nmost notably the &quot;entry&quot; file.</li>\n</ul>\n<h3 id=\"depper-transform-transform-options-\"><code>depper.transform(transform, [options])</code></h3>\n<p>Adds a new transform &#x2013; should be used before calling <code>depper.add</code>.</p>\n<p><code>transform</code> may either be a string (which is resolved like a <code>require</code> call),\nor a function. More information on transforms can be found below.</p>\n<h3 id=\"depper-add-filename-callback-\"><code>depper.add(filename, [callback])</code></h3>\n<p>Adds a new file to the dependency graph.</p>\n<h3 id=\"depper-inline-source-basedir-callback-\"><code>depper.inline(source, basedir, [callback])</code></h3>\n<p>Adds a new inline file to the dependency graph, where <code>source</code> is the GLSL\nsource to include and <code>basedir</code> is the directory to pretend it&apos;s being\ncreated in. A <code>basedir</code> is required to properly resolve requires and transforms,\nand defaults to <code>process.cwd()</code>.</p>\n<h3 id=\"depper-on-file-cb-filename-\"><code>depper.on(&apos;file&apos;, cb(filename))</code></h3>\n<p>Emitted whenever a new file has been included in the dependency graph.</p>\n<h2 id=\"example-output\">Example Output</h2>\n<pre><code class=\"lang-json\"><div class=\"line\"><span class=\"source json\"><span>[</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;id&quot;:&#xA0;0,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;deps&quot;:&#xA0;{&#xA0;&quot;glsl-random&quot;:&#xA0;1&#xA0;},</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;file&quot;:&#xA0;&quot;index.glsl&quot;,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;source&quot;:&#xA0;&quot;precision&#xA0;mediump&#xA0;float;\\n#pragma&#xA0;glslify:&#xA0;random&#xA0;=&#xA0;require(glsl-random)\\n&quot;,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;entry&quot;:&#xA0;true</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;},</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;id&quot;:&#xA0;1,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;deps&quot;:&#xA0;{},</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;file&quot;:&#xA0;&quot;node_modules/glsl-random/index.glsl&quot;,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;source&quot;:&#xA0;&quot;highp&#xA0;float&#xA0;random(vec2&#xA0;co)\\n{\\n&#xA0;&#xA0;&#xA0;&#xA0;highp&#xA0;float&#xA0;a&#xA0;=&#xA0;12.9898;\\n&#xA0;&#xA0;&#xA0;&#xA0;highp&#xA0;float&#xA0;b&#xA0;=&#xA0;78.233;\\n&#xA0;&#xA0;&#xA0;&#xA0;highp&#xA0;float&#xA0;c&#xA0;=&#xA0;43758.5453;\\n&#xA0;&#xA0;&#xA0;&#xA0;highp&#xA0;float&#xA0;dt=&#xA0;dot(co.xy&#xA0;,vec2(a,b));\\n&#xA0;&#xA0;&#xA0;&#xA0;highp&#xA0;float&#xA0;sn=&#xA0;mod(dt,3.14);\\n&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;fract(sin(sn)&#xA0;*&#xA0;c);\\n}\\n\\n#pragma&#xA0;glslify:&#xA0;export(random)&quot;,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;entry&quot;:&#xA0;false</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source json\"><span>]</span></span></div>\n</code></pre>\n<h2 id=\"transform-api\">Transform API</h2>\n<p>The transform API has changed since glslify 1.0 to make it more &quot;vanilla&quot;.</p>\n<p>With the asynchronous API, transforms have this signature:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>module.exports&#xA0;=&#xA0;function(file,&#xA0;source,&#xA0;options,&#xA0;done)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;done(null,&#xA0;source.toUpperCase())</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<p>and using the synchronous API, transforms have this signature:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>module.exports.sync&#xA0;=&#xA0;function(file,&#xA0;source,&#xA0;options)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;return&#xA0;source.toUpperCase()</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<p>For an example that is compatible with both the async and sync APIs, here&apos;s\n<a href=\"http://github.com/hughsk/glslify-hex\">glslify-hex</a>\nrewritten using the new API:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;through&#xA0;=&#xA0;require(&apos;through&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;regexLong&#xA0;&#xA0;=&#xA0;/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?/gi</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;regexShort&#xA0;=&#xA0;/#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?/gi</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>module.exports&#xA0;=&#xA0;transform</span></span></div><div class=\"line\"><span class=\"source js\"><span>module.exports.sync&#xA0;=&#xA0;transform</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;transform(filename,&#xA0;src,&#xA0;opts,&#xA0;done)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;src&#xA0;=&#xA0;src.replace(regexShort,&#xA0;function(whole,&#xA0;r,&#xA0;g,&#xA0;b,&#xA0;a)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;!a</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;?&#xA0;&apos;#&apos;&#xA0;+&#xA0;r&#xA0;+&#xA0;r&#xA0;+&#xA0;g&#xA0;+&#xA0;g&#xA0;+&#xA0;b&#xA0;+&#xA0;b</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;:&#xA0;&apos;#&apos;&#xA0;+&#xA0;r&#xA0;+&#xA0;r&#xA0;+&#xA0;g&#xA0;+&#xA0;g&#xA0;+&#xA0;b&#xA0;+&#xA0;b&#xA0;+&#xA0;a&#xA0;+&#xA0;a</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}).replace(regexLong,&#xA0;function(whole,&#xA0;r,&#xA0;g,&#xA0;b,&#xA0;a)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;r&#xA0;=&#xA0;makeFloat(parseInt(r,&#xA0;16)&#xA0;/&#xA0;255)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;g&#xA0;=&#xA0;makeFloat(parseInt(g,&#xA0;16)&#xA0;/&#xA0;255)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;b&#xA0;=&#xA0;makeFloat(parseInt(b,&#xA0;16)&#xA0;/&#xA0;255)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;a&#xA0;=&#xA0;makeFloat(parseInt(a,&#xA0;16)&#xA0;/&#xA0;255)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;isNaN(a)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;?&#xA0;&apos;vec3(&apos;+[r,g,b].join(&apos;,&apos;)+&apos;)&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;:&#xA0;&apos;vec4(&apos;+[r,g,b,a].join(&apos;,&apos;)+&apos;)&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;if&#xA0;(typeof&#xA0;done&#xA0;===&#xA0;&apos;function&apos;)&#xA0;done(null,&#xA0;src)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;return&#xA0;src</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;makeFloat(n)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;return&#xA0;String(n).indexOf(&apos;.&apos;)&#xA0;===&#xA0;-1</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;?&#xA0;n&#xA0;+&#xA0;&apos;.&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;:&#xA0;n</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<h2 id=\"transforms-in-package-json\">Transforms in <code>package.json</code></h2>\n<p>Transforms now support options specified in <code>package.json</code>:</p>\n<pre><code class=\"lang-json\"><div class=\"line\"><span class=\"source json\"><span>{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&quot;glslify&quot;:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;transform&quot;:&#xA0;[</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;glslify-hex&quot;,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[&quot;glslify-optimize&quot;,&#xA0;{&#xA0;&quot;mangle&quot;:&#xA0;true&#xA0;}]</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;]</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source json\"><span>}</span></span></div>\n</code></pre>\n"}