{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/gl-quat\">gl-quat</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>Part of a fork of <a href=\"http://github.com/toji\">@toji</a>&apos;s\n<a href=\"http://github.com/toji/gl-matrix\">gl-matrix</a> split into smaller pieces: this\npackage contains <code>glMatrix.quat</code>.</p>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/gl-quat/\"></a></p>\n<h3 id=\"quat-require-gl-quat-\"><code>quat = require(&apos;gl-quat&apos;)</code></h3>\n<p>Will load all of the module&apos;s functionality and expose it on a single\nobject. Note that any of the methods may also be required directly\nfrom their files.</p>\n<p>For example, the following are equivalent:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;slerp&#xA0;=&#xA0;require(&apos;gl-quat&apos;).slerp</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;slerp&#xA0;=&#xA0;require(&apos;gl-quat/slerp&apos;)</span></span></div>\n</code></pre>\n<h2 id=\"api\">API</h2>\n<ul>\n<li><a href=\"#addoutquat-aquat-bquat\">add()</a></li>\n<li><a href=\"#calculatewoutquat-aquat\">calculateW()</a></li>\n<li><a href=\"#copyoutquat-aquat\">copy()</a></li>\n<li><a href=\"#conjugateoutquat-aquat\">conjugate()</a></li>\n<li><a href=\"#copyoutquat-aquat\">copy()</a></li>\n<li><a href=\"#create\">create()</a></li>\n<li><a href=\"#dotaquat-bquat\">dot()</a></li>\n<li><a href=\"#frommat3outquat-mmat3\">fromMat3()</a></li>\n<li><a href=\"#fromvaluesxnumber-ynumber-znumber-wnumber\">fromValues()</a></li>\n<li><a href=\"#identityoutquat\">identity()</a></li>\n<li><a href=\"#invertoutquat-aquat\">invert()</a></li>\n<li><a href=\"#lengthaquat\">length()</a></li>\n<li><a href=\"#lerpoutquat-aquat-bquat-tnumber\">lerp()</a></li>\n<li><a href=\"#multiplyoutquat-aquat-bquat\">multiply()</a></li>\n<li><a href=\"#normalizeoutquat-aquat\">normalize()</a></li>\n<li><a href=\"#rotatexoutquat-aquat-radnumber\">rotateX()</a></li>\n<li><a href=\"#rotateyoutquat-aquat-radnumber\">rotateY()</a></li>\n<li><a href=\"#rotatezoutquat-aquat-radnumber\">rotateZ()</a></li>\n<li><a href=\"#rotationtooutquat-avec3-bvec3\">rotationTo()</a></li>\n<li><a href=\"#scaleoutquat-aquat-bnumber\">scale()</a></li>\n<li><a href=\"#setoutquat-xnumber-ynumber-znumber-wnumber\">set()</a></li>\n<li><a href=\"#setaxesviewvec3-rightvec3-upvec3\">setAxes()</a></li>\n<li><a href=\"#setaxisangleoutquat-axisvec3-radnumber\">setAxisAngle()</a></li>\n<li><a href=\"#slerpoutquat-aquat-bquat-tnumber\">slerp()</a></li>\n<li><a href=\"#sqlerpoutquat-aquat-bquat-cquat-dquat-tnumber\">sqlerp()</a></li>\n<li><a href=\"#squaredlengthaquat\">squaredLength()</a></li>\n</ul>\n<h2 id=\"calculatew-out-quat-a-quat-\">calculateW(out:quat, a:quat)</h2>\n<p>  Calculates the W component of a quat from the X, Y, and Z components.\n  Assumes that quaternion is 1 unit in length.\n  Any existing W component will be ignored.</p>\n<h2 id=\"add-out-quat-a-quat-b-quat-\">add(out:quat, a:quat, b:quat)</h2>\n<p>  Adds two quat&apos;s</p>\n<h2 id=\"conjugate-out-quat-a-quat-\">conjugate(out:quat, a:quat)</h2>\n<p>  Calculates the conjugate of a quat\n  If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.</p>\n<h2 id=\"copy-out-quat-a-quat-\">copy(out:quat, a:quat)</h2>\n<p>  Copy the values from one quat to another</p>\n<h2 id=\"create-\">create()</h2>\n<p>  Creates a new identity quat</p>\n<h2 id=\"dot-a-quat-b-quat-\">dot(a:quat, b:quat)</h2>\n<p>  Calculates the dot product of two quat&apos;s</p>\n<h2 id=\"frommat3-out-quat-m-mat3-\">fromMat3(out:quat, m:mat3)</h2>\n<p>  Creates a quaternion from the given 3x3 rotation matrix.</p>\n<p>  NOTE: The resultant quaternion is not normalized, so you should be sure\n  to renormalize the quaternion yourself where necessary.</p>\n<h2 id=\"fromvalues-x-number-y-number-z-number-w-number-\">fromValues(x:Number, y:Number, z:Number, w:Number)</h2>\n<h2 id=\"identity-out-quat-\">identity(out:quat)</h2>\n<p>  Set a quat to the identity quaternion</p>\n<h2 id=\"invert-out-quat-a-quat-\">invert(out:quat, a:quat)</h2>\n<p>  Calculates the inverse of a quat</p>\n<h2 id=\"length-a-quat-\">length(a:quat)</h2>\n<p>  Calculates the length of a quat</p>\n<h2 id=\"lerp-out-quat-a-quat-b-quat-t-number-\">lerp(out:quat, a:quat, b:quat, t:Number)</h2>\n<p>  Performs a linear interpolation between two quat&apos;s</p>\n<h2 id=\"multiply-out-quat-a-quat-b-quat-\">multiply(out:quat, a:quat, b:quat)</h2>\n<p>  Multiplies two quat&apos;s</p>\n<h2 id=\"normalize-out-quat-a-quat-\">normalize(out:quat, a:quat)</h2>\n<p>  Normalize a quat</p>\n<h2 id=\"rotatex-out-quat-a-quat-rad-number-\">rotateX(out:quat, a:quat, rad:number)</h2>\n<p>  Rotates a quaternion by the given angle about the X axis</p>\n<h2 id=\"rotatey-out-quat-a-quat-rad-number-\">rotateY(out:quat, a:quat, rad:number)</h2>\n<p>  Rotates a quaternion by the given angle about the Y axis</p>\n<h2 id=\"rotatez-out-quat-a-quat-rad-number-\">rotateZ(out:quat, a:quat, rad:number)</h2>\n<p>  Rotates a quaternion by the given angle about the Z axis</p>\n<h2 id=\"rotationto-out-quat-a-vec3-b-vec3-\">rotationTo(out:quat, a:vec3, b:vec3)</h2>\n<p>  Sets a quaternion to represent the shortest rotation from one\n  vector to another.</p>\n<p>  Both vectors are assumed to be unit length.</p>\n<h2 id=\"scale-out-quat-a-quat-b-number-\">scale(out:quat, a:quat, b:Number)</h2>\n<p>  Scales a quat by a scalar number</p>\n<h2 id=\"set-out-quat-x-number-y-number-z-number-w-number-\">set(out:quat, x:Number, y:Number, z:Number, w:Number)</h2>\n<p>  Set the components of a quat to the given values</p>\n<h2 id=\"setaxes-view-vec3-right-vec3-up-vec3-\">setAxes(view:vec3, right:vec3, up:vec3)</h2>\n<p>  Sets the specified quaternion with values corresponding to the given\n  axes. Each axis is a vec3 and is expected to be unit length and\n  perpendicular to all other specified axes.</p>\n<h2 id=\"setaxisangle-out-quat-axis-vec3-rad-number-\">setAxisAngle(out:quat, axis:vec3, rad:Number)</h2>\n<p>  Sets a quat from the given angle and rotation axis,\n  then returns it.</p>\n<h2 id=\"slerp-out-quat-a-quat-b-quat-t-number-\">slerp(out:quat, a:quat, b:quat, t:Number)</h2>\n<p>  Performs a spherical linear interpolation between two quat</p>\n<h2 id=\"sqlerp-out-quat-a-quat-b-quat-c-quat-d-quat-t-number-\">sqlerp(out:quat, a:quat, b:quat, c:quat, d:quat, t:Number)</h2>\n<p>  Performs a spherical linear interpolation with two control points</p>\n<h2 id=\"squaredlength-a-quat-\">squaredLength(a:quat)</h2>\n<p>  Calculates the squared length of a quat</p>\n<h2 id=\"license\">License</h2>\n<p>MIT. See <a href=\"http://github.com/stackgl/gl-quat/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}