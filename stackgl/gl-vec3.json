{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/gl-vec3\">gl-vec3</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>Part of a fork of <a href=\"http://github.com/toji\">@toji</a>&apos;s\n<a href=\"http://github.com/toji/gl-matrix\">gl-matrix</a> split into smaller pieces: this\npackage contains <code>glMatrix.vec3</code>.</p>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/gl-vec3/\"></a></p>\n<h3 id=\"vec3-require-gl-vec3-\"><code>vec3 = require(&apos;gl-vec3&apos;)</code></h3>\n<p>Will load all of the module&apos;s functionality and expose it on a single\nobject. Note that any of the methods may also be required directly\nfrom their files.</p>\n<p>For example, the following are equivalent:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;scale&#xA0;=&#xA0;require(&apos;gl-vec3&apos;).scale</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;scale&#xA0;=&#xA0;require(&apos;gl-vec3/scale&apos;)</span></span></div>\n</code></pre>\n<h2 id=\"api\">API</h2>\n<ul>\n<li><a href=\"#addoutvec3-avec3-bvec3\">add()</a></li>\n<li><a href=\"#angleavec3-bvec3\">angle()</a></li>\n<li><a href=\"#cloneavec3\">clone()</a></li>\n<li><a href=\"#ceiloutvec3-avec3\">ceil()</a></li>\n<li><a href=\"#copyoutvec3-avec3\">copy()</a></li>\n<li><a href=\"#create\">create()</a></li>\n<li><a href=\"#crossoutvec3-avec3-bvec3\">cross()</a></li>\n<li><a href=\"#distanceavec3-bvec3\">distance()</a></li>\n<li><a href=\"#distanceavec3-bvec3\">dist()</a></li>\n<li><a href=\"#divideoutvec3-avec3-bvec3\">divide()</a></li>\n<li><a href=\"#divideoutvec3-avec3-bvec3\">div()</a></li>\n<li><a href=\"#dotavec3-bvec3\">dot()</a></li>\n<li><a href=\"#equalsavec3-bvec3\">equals()</a></li>\n<li><a href=\"#exactequalsavec3-bvec3\">exactEquals()</a></li>\n<li><a href=\"#flooroutvec3-avec3\">floor()</a></li>\n<li><a href=\"#foreachaarray-stridenumber-offsetnumber-countnumber-fnfunction-argobject\">forEach()</a></li>\n<li><a href=\"#fromvaluesxnumber-ynumber-znumber\">fromValues()</a></li>\n<li><a href=\"#inverseoutvec3-avec3\">inverse()</a></li>\n<li><a href=\"#lengthavec3\">length()</a></li>\n<li><a href=\"#lengthavec3\">len()</a></li>\n<li><a href=\"#lerpoutvec3-avec3-bvec3-tnumber\">lerp()</a></li>\n<li><a href=\"#maxoutvec3-avec3-bvec3\">max()</a></li>\n<li><a href=\"#minoutvec3-avec3-bvec3\">min()</a></li>\n<li><a href=\"#multiplyoutvec3-avec3-bvec3\">multiply()</a></li>\n<li><a href=\"#multiplyoutvec3-avec3-bvec3\">mul()</a></li>\n<li><a href=\"#negateoutvec3-avec3\">negate()</a></li>\n<li><a href=\"#normalizeoutvec3-avec3\">normalize()</a></li>\n<li><a href=\"#randomoutvec3-scalenumber\">random()</a></li>\n<li><a href=\"#rotatexoutvec3-avec3-bvec3-cnumber\">rotateX()</a></li>\n<li><a href=\"#rotateyoutvec3-avec3-bvec3-cnumber\">rotateY()</a></li>\n<li><a href=\"#rotatezoutvec3-avec3-bvec3-cnumber\">rotateZ()</a></li>\n<li><a href=\"#roundoutvec3-avec3\">round()</a></li>\n<li><a href=\"#scaleoutvec3-avec3-bnumber\">scale()</a></li>\n<li><a href=\"#scaleandaddoutvec3-avec3-bvec3-scalenumber\">scaleAndAdd()</a></li>\n<li><a href=\"#setoutvec3-xnumber-ynumber-znumber\">set()</a></li>\n<li><a href=\"#squareddistanceavec3-bvec3\">squaredDistance()</a></li>\n<li><a href=\"#squareddistanceavec3-bvec3\">sqrDist()</a></li>\n<li><a href=\"#squaredlengthavec3\">squaredLength()</a></li>\n<li><a href=\"#squaredlengthavec3\">sqrLen()</a></li>\n<li><a href=\"#subtractoutvec3-avec3-bvec3\">subtract()</a></li>\n<li><a href=\"#subtractoutvec3-avec3-bvec3\">sub()</a></li>\n<li><a href=\"#transformmat3outvec3-avec3-mmat3\">transformMat3()</a></li>\n<li><a href=\"#transformmat4outvec3-avec3-mmat4\">transformMat4()</a></li>\n<li><a href=\"#transformquatoutvec3-avec3-qquat\">transformQuat()</a></li>\n</ul>\n<h2 id=\"add-out-vec3-a-vec3-b-vec3-\">add(out:vec3, a:vec3, b:vec3)</h2>\n<p>  Adds two vec3&apos;s</p>\n<h2 id=\"angle-a-vec3-b-vec3-\">angle(a:vec3, b:vec3)</h2>\n<p>  Get the angle between two 3D vectors</p>\n<h2 id=\"ceil-out-vec3-a-vec3-\">ceil(out:vec3, a:vec3)</h2>\n<p>  <code>Math.ceil</code> the components of a vec3</p>\n<h2 id=\"clone-a-vec3-\">clone(a:vec3)</h2>\n<p>  Creates a new vec3 initialized with values from an existing vector</p>\n<h2 id=\"copy-out-vec3-a-vec3-\">copy(out:vec3, a:vec3)</h2>\n<p>  Copy the values from one vec3 to another</p>\n<h2 id=\"create-\">create()</h2>\n<p>  Creates a new, empty vec3</p>\n<h2 id=\"cross-out-vec3-a-vec3-b-vec3-\">cross(out:vec3, a:vec3, b:vec3)</h2>\n<p>  Computes the cross product of two vec3&apos;s</p>\n<h2 id=\"distance-a-vec3-b-vec3-\">distance(a:vec3, b:vec3)</h2>\n<p>  Calculates the euclidian distance between two vec3&apos;s. Aliased as <code>dist</code></p>\n<h2 id=\"divide-out-vec3-a-vec3-b-vec3-\">divide(out:vec3, a:vec3, b:vec3)</h2>\n<p>  Divides two vec3&apos;s. Aliased as <code>div</code></p>\n<h2 id=\"dot-a-vec3-b-vec3-\">dot(a:vec3, b:vec3)</h2>\n<p>  Calculates the dot product of two vec3&apos;s</p>\n<h2 id=\"equals-a-vec3-b-vec3-\">equals(a:vec3, b:vec3)</h2>\n<p>  Returns whether or not the vectors have approximately the same elements in the same position.</p>\n<h2 id=\"exactequals-a-vec3-b-vec3-\">exactEquals(a:vec3, b:vec3)</h2>\n<p>  Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)</p>\n<h2 id=\"floor-out-vec3-a-vec3-\">floor(out:vec3, a:vec3)</h2>\n<p>  <code>Math.floor</code> the components of a vec3</p>\n<h2 id=\"foreach-a-array-stride-number-offset-number-count-number-fn-function-arg-object-\">forEach(a:Array, stride:Number, offset:Number, count:Number, fn:Function, [arg]:Object)</h2>\n<p>  Perform some operation over an array of vec3s.</p>\n<h2 id=\"fromvalues-x-number-y-number-z-number-\">fromValues(x:Number, y:Number, z:Number)</h2>\n<p>  Creates a new vec3 initialized with the given values</p>\n<h2 id=\"inverse-out-vec3-a-vec3-\">inverse(out:vec3, a:vec3)</h2>\n<p>  Returns the inverse of the components of a vec3</p>\n<h2 id=\"length-a-vec3-\">length(a:vec3)</h2>\n<p>  Calculates the length of a vec3. Aliased as <code>len</code></p>\n<h2 id=\"lerp-out-vec3-a-vec3-b-vec3-t-number-\">lerp(out:vec3, a:vec3, b:vec3, t:Number)</h2>\n<p>  Performs a linear interpolation between two vec3&apos;s</p>\n<h2 id=\"max-out-vec3-a-vec3-b-vec3-\">max(out:vec3, a:vec3, b:vec3)</h2>\n<p>  Returns the maximum of two vec3&apos;s</p>\n<h2 id=\"min-out-vec3-a-vec3-b-vec3-\">min(out:vec3, a:vec3, b:vec3)</h2>\n<p>  Returns the minimum of two vec3&apos;s</p>\n<h2 id=\"multiply-out-vec3-a-vec3-b-vec3-\">multiply(out:vec3, a:vec3, b:vec3)</h2>\n<p>  Multiplies two vec3&apos;s. Aliased as <code>mul</code></p>\n<h2 id=\"negate-out-vec3-a-vec3-\">negate(out:vec3, a:vec3)</h2>\n<p>  Negates the components of a vec3</p>\n<h2 id=\"normalize-out-vec3-a-vec3-\">normalize(out:vec3, a:vec3)</h2>\n<p>  Normalize a vec3</p>\n<h2 id=\"random-out-vec3-scale-number-\">random(out:vec3, [scale]:Number)</h2>\n<p>  Generates a random vector with the given scale</p>\n<h2 id=\"rotatex-out-vec3-a-vec3-b-vec3-c-number-\">rotateX(out:vec3, a:vec3, b:vec3, c:Number)</h2>\n<p>  Rotate a 3D vector around the x-axis</p>\n<h2 id=\"rotatey-out-vec3-a-vec3-b-vec3-c-number-\">rotateY(out:vec3, a:vec3, b:vec3, c:Number)</h2>\n<p>  Rotate a 3D vector around the y-axis</p>\n<h2 id=\"rotatez-out-vec3-a-vec3-b-vec3-c-number-\">rotateZ(out:vec3, a:vec3, b:vec3, c:Number)</h2>\n<p>  Rotate a 3D vector around the z-axis</p>\n<h2 id=\"round-out-vec3-a-vec3-\">round(out:vec3, a:vec3)</h2>\n<p>  <code>Math.round</code> the components of a vec3</p>\n<h2 id=\"scale-out-vec3-a-vec3-b-number-\">scale(out:vec3, a:vec3, b:Number)</h2>\n<p>  Scales a vec3 by a scalar number</p>\n<h2 id=\"scaleandadd-out-vec3-a-vec3-b-vec3-scale-number-\">scaleAndAdd(out:vec3, a:vec3, b:vec3, scale:Number)</h2>\n<p>  Adds two vec3&apos;s after scaling the second operand by a scalar value</p>\n<h2 id=\"set-out-vec3-x-number-y-number-z-number-\">set(out:vec3, x:Number, y:Number, z:Number)</h2>\n<p>  Set the components of a vec3 to the given values</p>\n<h2 id=\"squareddistance-a-vec3-b-vec3-\">squaredDistance(a:vec3, b:vec3)</h2>\n<p>  Calculates the squared euclidian distance between two vec3&apos;s. Aliased as <code>sqrDist</code></p>\n<h2 id=\"squaredlength-a-vec3-\">squaredLength(a:vec3)</h2>\n<p>  Calculates the squared length of a vec3. Aliased as <code>sqrLen</code></p>\n<h2 id=\"subtract-out-vec3-a-vec3-b-vec3-\">subtract(out:vec3, a:vec3, b:vec3)</h2>\n<p>  Subtracts vector b from vector a. Aliased as <code>sub</code></p>\n<h2 id=\"transformmat3-out-vec3-a-vec3-m-mat3-\">transformMat3(out:vec3, a:vec3, m:mat3)</h2>\n<p>  Transforms the vec3 with a mat3.</p>\n<h2 id=\"transformmat4-out-vec3-a-vec3-m-mat4-\">transformMat4(out:vec3, a:vec3, m:mat4)</h2>\n<p>  Transforms the vec3 with a mat4.\n  4th vector component is implicitly &apos;1&apos;</p>\n<h2 id=\"transformquat-out-vec3-a-vec3-q-quat-\">transformQuat(out:vec3, a:vec3, q:quat)</h2>\n<p>  Transforms the vec3 with a quat</p>\n<h2 id=\"license\">License</h2>\n<p><a href=\"http://en.wikipedia.org/wiki/Zlib_License\">zlib</a>. See <a href=\"https://github.com/stackgl/gl-vec3/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}