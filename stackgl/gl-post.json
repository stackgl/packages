{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/gl-post\">gl-post</a><div class=\"contrib\"></div></h1>\n<p>\n\n\n</p>\n<p>Simple WebGL post-processing using some pieces from <a href=\"http://stack.gl/\">stackgl</a>.</p>\n<p><strong><a href=\"http://stack.gl/gl-post\">check out the demo</a></strong>.</p>\n<iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://stack.gl/gl-post/\"></iframe><h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/gl-post/\"></a></p>\n<p>See the <a href=\"http://github.com/stackgl/gl-post/blob/master/example\">example</a> code for a full usage example.</p>\n<h3 id=\"post-glpost-gl-shader-opts-\"><code>post = glPost(gl, shader, opts={})</code></h3>\n<p>Creates a new post-processing instance, where <code>gl</code> is a <code>WebGLContext</code> instance\nand <code>shader</code> is a shader instance from either\n<a href=\"http://github.com/mikolalysenko/gl-shader-core\">gl-shader-core</a> or\n<a href=\"http://github.com/stackgl/glslify\">glslify</a>.</p>\n<p>The vertex shader is supplied for you, and available at <code>gl-post/post.vert</code>.\nThe shader you pass in may also be a function that takes a <code>WebGLContext</code> and\nreturns a shader instance too, so the following is valid:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glslify&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glPost&#xA0;&#xA0;=&#xA0;require(&apos;gl-post&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>post&#xA0;=&#xA0;glPost(gl,&#xA0;glslify({</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vert:&#xA0;&apos;gl-post&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;,&#xA0;frag:&#xA0;&apos;./src/my-shader.frag&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>}))</span></span></div>\n</code></pre>\n<p>There are also a few options you can include too:</p>\n<ul>\n<li><code>minFilter</code>: the texture minification filter to use. Defaults to <code>gl.LINEAR</code>.</li>\n<li><code>magFilter</code>: the texture magnification filter to use. Defaults to <code>gl.LINEAR</code>.</li>\n<li><code>colorBufferName</code>: the name of your color buffer uniform to use in your\nshader. Defaults to <code>colorBuffer</code>.</li>\n</ul>\n<p>In simple cases, you&apos;ll want to do something like this:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glslify&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glPost&#xA0;&#xA0;=&#xA0;require(&apos;gl-post&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>post&#xA0;=&#xA0;glPost(gl,&#xA0;glslify({</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;vert:&#xA0;&apos;gl-post&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;,&#xA0;frag:&#xA0;&apos;./src/my-shader.frag&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>}))</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>function&#xA0;render()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;post.bind()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//&#xA0;Note&#xA0;that&#xA0;it&apos;s&#xA0;important&#xA0;you&#xA0;clear&#xA0;your</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//&#xA0;depth/color&#xA0;buffers&#xA0;for&#xA0;this&#xA0;to&#xA0;work&#xA0;properly&#xA0;:)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;gl.clear(gl.COLOR_BUFFER_BIT&#xA0;|&#xA0;gl.DEPTH_BUFFER_BIT)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;gl.viewport(0,&#xA0;0,&#xA0;canvas.width,&#xA0;canvas.height)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//&#xA0;...draw&#xA0;your&#xA0;scene&#xA0;to&#xA0;the&#xA0;framebuffer&#xA0;here...</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;post.draw()</span></span></div><div class=\"line\"><span class=\"source js\"><span>}</span></span></div>\n</code></pre>\n<h3 id=\"post-shader\"><code>post.shader</code></h3>\n<p>The shader you gave <code>gl-post</code> will also be exposed here, for quickly changing\nuniform variable values.</p>\n<h3 id=\"post-bind-\"><code>post.bind()</code></h3>\n<p>Starts drawing to the post-processing buffer. Anything you do now will not be\nimmediately drawn to the screen, but instead drawn to an off-screen\n<a href=\"http://github.com/stackgl/gl-fbo\">framebuffer</a> for you to draw later using\nthe post-processing shader.</p>\n<p>You should this when you&apos;re ready to start drawing your scene.</p>\n<h3 id=\"post-draw-\"><code>post.draw()</code></h3>\n<p>Draws the framebuffer to the screen using your shader, returning your drawing\npower to the screen in the process.</p>\n<h3 id=\"post-unbind-\"><code>post.unbind()</code></h3>\n<p>Call this if you want to explicitly disable rendering to the framebuffer before\ndrawing to the screen.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT. See <a href=\"http://github.com/stackgl/gl-post/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}