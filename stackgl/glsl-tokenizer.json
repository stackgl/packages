{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/glsl-tokenizer\">glsl-tokenizer </a><div class=\"contrib\"></div></h1>\n<p>Maps GLSL string data into GLSL tokens, either synchronously or using a\nstreaming API.</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;tokenString&#xA0;=&#xA0;require(&apos;glsl-tokenizer/string&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;tokenStream&#xA0;=&#xA0;require(&apos;glsl-tokenizer/stream&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;fs&#xA0;=&#xA0;require(&apos;fs&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//&#xA0;Synchronously:</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;tokens&#xA0;=&#xA0;tokenString(fs.readFileSync(&apos;some.glsl&apos;))</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>//&#xA0;Streaming&#xA0;API:</span></span></div><div class=\"line\"><span class=\"source js\"><span>fs.createReadStream(&apos;some.glsl&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;.pipe(tokenStream())</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;.on(&apos;data&apos;,&#xA0;function(token)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;console.log(token.data,&#xA0;token.position,&#xA0;token.type)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;})</span></span></div>\n</code></pre>\n<h2 id=\"api\">API</h2>\n<h2 id=\"tokens-require-glsl-tokenizer-string-src-opt-\">tokens = require(&apos;glsl-tokenizer/string&apos;)(src, [opt])</h2>\n<p>Returns an array of <code>tokens</code> given the GLSL source string <code>src</code></p>\n<p>You can specify <code>opt.version</code> string to use different keywords/builtins, such as <code>&apos;300 es&apos;</code> for WebGL2. Otherwise, will assume GLSL 100 (WebGL1).</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;tokens&#xA0;=&#xA0;tokenizer(src,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;version:&#xA0;&apos;300&#xA0;es&apos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div>\n</code></pre>\n<h2 id=\"stream-require-glsl-tokenizer-stream-opt-\">stream = require(&apos;glsl-tokenizer/stream&apos;)([opt])</h2>\n<p>Emits &apos;data&apos; events whenever a token is parsed with a token object as output.</p>\n<p>As above, you can specify <code>opt.version</code>.</p>\n<h2 id=\"tokens\">Tokens</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>{&#xA0;&apos;type&apos;:&#xA0;TOKEN_TYPE</span></span></div><div class=\"line\"><span class=\"source js\"><span>,&#xA0;&apos;data&apos;:&#xA0;&quot;string&#xA0;of&#xA0;constituent&#xA0;data&quot;</span></span></div><div class=\"line\"><span class=\"source js\"><span>,&#xA0;&apos;position&apos;:&#xA0;integer&#xA0;position&#xA0;within&#xA0;the&#xA0;GLSL&#xA0;source</span></span></div><div class=\"line\"><span class=\"source js\"><span>,&#xA0;&apos;line&apos;:&#xA0;line&#xA0;number&#xA0;within&#xA0;the&#xA0;GLSL&#xA0;source</span></span></div><div class=\"line\"><span class=\"source js\"><span>,&#xA0;&apos;column&apos;:&#xA0;column&#xA0;number&#xA0;within&#xA0;the&#xA0;GLSL&#xA0;source&#xA0;}</span></span></div>\n</code></pre>\n<p>The available token types are:</p>\n<ul>\n<li><code>block-comment</code>: <code>/* ... */</code></li>\n<li><code>line-comment</code>: <code>// ... \\n</code></li>\n<li><code>preprocessor</code>: <code># ... \\n</code></li>\n<li><code>operator</code>: Any operator. If it looks like punctuation, it&apos;s an operator.</li>\n<li><code>float</code>: Optionally suffixed with <code>f</code></li>\n<li><code>ident</code>: User defined identifier.</li>\n<li><code>builtin</code>: Builtin function.</li>\n<li><code>eof</code>: Emitted on <code>end</code>; data will === <code>&apos;(eof)&apos;</code>.</li>\n<li><code>integer</code></li>\n<li><code>whitespace</code></li>\n<li><code>keyword</code></li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>MIT, see <a href=\"http://github.com/stackgl/glsl-tokenizer/blob/master/LICENSE.md\">LICENSE.md</a> for further information.</p>\n"}