{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/glslify\">glslify </a><div class=\"contrib\"></div></h1>\n<p><a href=\"https://npmjs.org/package/glslify\"></a> <a href=\"https://npmjs.org/package/glslify\"></a> <a href=\"https://travis-ci.org/glslify/glslify\"></a></p>\n<p>A node.js-style module system for GLSL!</p>\n<p>This module contains:</p>\n<ul>\n<li>glslify&apos;s command-line interface (CLI)</li>\n<li>glslify node/electron interface</li>\n<li><a href=\"http://browserify.org/\">browserify</a> transform</li>\n</ul>\n<p>It forms one of the core components of the <a href=\"http://stack.gl/\">stack.gl</a>\necosystem, allowing you to install GLSL modules from <a href=\"http://npmjs.com\">npm</a> and\nuse them in your shaders. This makes it trivial to piece together different\neffects and techniques from the community, including but certainly not limited\nto\n<a href=\"https://github.com/hughsk/glsl-fog\">fog</a>,\n<a href=\"https://github.com/hughsk/glsl-noise\">noise</a>,\n<a href=\"https://github.com/mattdesl/glsl-film-grain\">film grain</a>,\n<a href=\"https://github.com/stackgl/glsl-smooth-min\">raymarching helpers</a>,\n<a href=\"https://github.com/stackgl/glsl-easings\">easing functions</a> and\n<a href=\"https://github.com/stackgl/glsl-specular-cook-torrance\">lighting models</a>.</p>\n<p>A full list can be found on the <a href=\"http://stack.gl/packages\">stack.gl packages list</a>\nunder the &quot;Shader Components&quot; category.</p>\n<p>Because glslify just outputs a single shader file as a string, it&apos;s easy to use\nit with any WebGL framework of your choosing,\nprovided they accept custom shaders. Integration is planned for\n<a href=\"http://threejs.org/\">three.js</a> and\n<a href=\"http://vorg.github.io/pex/\">pex</a>, with more on the way!\n<a href=\"https://github.com/stackgl/glslify/issues/new\">Open an issue</a> here if you&apos;d like to\ndiscuss integrating glslify with your platform of choice.</p>\n<p><em>If you&apos;re interested in playing around with glslify, you should check out\n<a href=\"http://glslb.in/\">glslb.in</a>: it&apos;s a fragment shader sandbox similar to\n<a href=\"http://shadertoy.com/\">Shadertoy</a> and\n<a href=\"http://glslsandbox.com/\">GLSL Sandbox</a>\nwith built in support for glslify.</em></p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glsl&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(glsl(`</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;#pragma&#xA0;glslify:&#xA0;noise&#xA0;=&#xA0;require(&apos;glsl-noise/simplex/3d&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;precision&#xA0;mediump&#xA0;float;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;varying&#xA0;vec3&#xA0;vpos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;void&#xA0;main&#xA0;()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gl_FragColor&#xA0;=&#xA0;vec4(noise(vpos*25.0),1);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>`))</span></span></div>\n</code></pre>\n<h2 id=\"module-api\">Module API</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glsl&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div>\n</code></pre>\n<h3 id=\"var-src-glsl-shader-source-\">var src = glsl`shader source...`</h3>\n<p>Compile a shader inline using <code>glsl</code> as a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\">tagged template string function</a>.</p>\n<h3 id=\"var-src-glsl-file-opts-\">var src = glsl(file, opts)</h3>\n<h3 id=\"var-src-glsl-shadersource-opts-\">var src = glsl(shaderSource, opts)</h3>\n<p>Compile a shader using an inline shader string or a file name.</p>\n<p>These are convencience methods provided that call <code>glsl.compile()</code> or\n<code>glsl.file()</code> accordingly. These methods are also provided for backwards\ncompatibility with the previous <code>&lt; 6</code> interface.</p>\n<p>Optionally provide:</p>\n<ul>\n<li><code>opts.basedir</code> - directory to resolve relative paths</li>\n<li><code>opts.transform</code> - an array of transform functions, transform module name</li>\n</ul>\n<h3 id=\"var-src-glsl-compile-src-opts-\">var src = glsl.compile(src, opts)</h3>\n<p>Compile a shader string from a string <code>src</code>.</p>\n<ul>\n<li><code>opts.basedir</code> - directory to resolve relative paths in <code>src</code></li>\n<li><code>opts.transform</code> - an array of transform functions, transform module name\nstrings, or <code>[trname,tropts]</code> pairs</li>\n</ul>\n<h3 id=\"var-src-glsl-file-filename-opts-\">var src = glsl.file(filename, opts)</h3>\n<p>Compile a shader from a <code>filename</code>.</p>\n<ul>\n<li><code>opts.basedir</code> - directory to resolve relative paths in <code>src</code></li>\n<li><code>opts.transform</code> - an array of transform functions, transform module name\nstrings, or <code>[trname,tropts]</code> pairs</li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<p><a href=\"https://nodei.co/npm/glslify/\"></a></p>\n<p>To install the command-line interface, install glslify globally like\nso:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;-g&#xA0;glslify</span></span></div>\n</code></pre>\n<p>To install glslify for use as a browserify transform, you should\ninstall it locally instead:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;glslify</span></span></div>\n</code></pre>\n<h2 id=\"getting-started\">Getting Started</h2>\n<h3 id=\"cli\">CLI</h3>\n<p>The CLI can take a file as its first argument, and output to a file\nusing the <code>-o</code> flag:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>glslify&#xA0;index.glsl&#xA0;-o&#xA0;output.glsl</span></span></div>\n</code></pre>\n<p>It can also read input from stdin and output to stdout:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>cat&#xA0;index.glsl&#xA0;|&#xA0;glslify&#xA0;&gt;&#xA0;output.glsl</span></span></div>\n</code></pre>\n<h3 id=\"browserify-transform\">Browserify Transform</h3>\n<p>If using browserify from the command-line, simply pass glslify\nin as a transform using the <code>-t</code>/<code>--transform</code> flag:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>browserify&#xA0;-t&#xA0;glslify&#xA0;index.js&#xA0;-o&#xA0;bundle.js</span></span></div>\n</code></pre>\n<p>Alternatively, you may include glslify as a <code>browserify.transform</code>\nin your <code>package.json</code> file:</p>\n<pre><code class=\"lang-json\"><div class=\"line\"><span class=\"source json\"><span>{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&quot;name&quot;:&#xA0;&quot;my-app&quot;,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&quot;dependencies&quot;:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;glslify&quot;:&#xA0;&quot;^2.0.0&quot;</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;},</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&quot;browserify&quot;:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;transform&quot;:&#xA0;[&quot;glslify&quot;]</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source json\"><span>}</span></span></div>\n</code></pre>\n<p>When writing your app, you should be able to require and call\nglslify the same as the node/electron interface, like so:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>//&#xA0;index.js</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glsl&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;src&#xA0;=&#xA0;glsl.file(&apos;./shader.glsl&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(src)</span></span></div>\n</code></pre>\n<p>or using tagged template strings:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glsl&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(glsl`</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;#pragma&#xA0;glslify:&#xA0;noise&#xA0;=&#xA0;require(&apos;glsl-noise/simplex/3d&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;precision&#xA0;mediump&#xA0;float;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;varying&#xA0;vec3&#xA0;vpos;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;void&#xA0;main&#xA0;()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;gl_FragColor&#xA0;=&#xA0;vec4(noise(vpos*25.0),1);</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source js\"><span>`)</span></span></div>\n</code></pre>\n<p>Your glslify calls will be replaced with bundled GLSL strings\nat build time automatically for you!</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>//&#xA0;index.js</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;src&#xA0;=&#xA0;&quot;#define&#xA0;GLSLIFY&#xA0;1\\n\\nprecision&#xA0;mediump&#xA0;float;&#xA0;...&quot;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>console.log(src)</span></span></div>\n</code></pre>\n<h3 id=\"webpack-loader\"><a href=\"http://webpack.github.io/\">Webpack</a> Loader</h3>\n<p>You can use the\n<a href=\"https://github.com/stackgl/glslify-loader\">glslify-loader</a>\nmodule to bundle shaders through glslify with Webpack. Check out\n<a href=\"https://github.com/stackgl/glslify-loader\">the repository</a>\nfor further information.</p>\n<h3 id=\"babel-plugin\"><a href=\"https://babeljs.io\">Babel</a> Plugin</h3>\n<p>You can use <a href=\"https://github.com/stackgl/glslify-babel\">glslify-babel</a> as a Babel plugin.  This allows you to use all ES6 features with glslify, including <code>import</code> statements and tagged template strings.  Check out <a href=\"https://github.com/stackgl/glslify-babel\">the repository</a> to learn more.</p>\n<h4 id=\"-bulb-a-note-on-babel-import-export\">:bulb: A Note on Babel Import/Export</h4>\n<p>If you are using Babel presets to transpile ES6 import/export to CommonJS <code>require()</code> statements, you may run into issues with glslify. This is because Babel mangles the output into source code that isn&apos;t easy to statically analyze. One solution is to directly map <code>glslify</code> to CommonJS statements, using <a href=\"https://github.com/mattdesl/babel-plugin-import-to-require\">babel-plugin-import-to-require</a> in your <code>.babelrc</code>.</p>\n<h2 id=\"usage\">Usage</h2>\n<h3 id=\"installing-a-glsl-module\">Installing a GLSL Module</h3>\n<p>Much like plain JavaScript modules, GLSL modules are stored on npm.\nThe main difference is that GLSL modules contain an <code>index.glsl</code> file\ninstead of an <code>index.js</code>. Generally, these modules start with <code>glsl-</code>\nin their name.</p>\n<p>To install <a href=\"https://github.com/hughsk/glsl-noise\">glsl-noise</a> in\nyour current directory:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;glsl-noise</span></span></div>\n</code></pre>\n<p>This will download glsl-noise and any of its dependencies, placing\nthem in a <code>node_modules</code> directory for glslify to use.</p>\n<h3 id=\"importing-a-glsl-module\">Importing a GLSL Module</h3>\n<p>You can import a module using the following <code>#pragma</code> syntax:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;noise&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>glsl-noise/simplex/2d</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;brightness&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>noise</span></span><span>(</span></span><span class=\"support variable glsl\"><span>gl_FragCoord</span></span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xy</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_FragColor</span></span><span>&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec4</span></span><span>(</span><span class=\"support function any-method c\"><span>vec3</span></span><span>(</span></span><span>brightness),&#xA0;</span><span class=\"constant numeric c\"><span>1</span></span><span>.);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<p>Shader dependencies are resolved using the same algorithm\nas node, so the above will load <code>./node_modules/simplex/2d.glsl</code>\nfrom the shader&apos;s directory.</p>\n<p>The above example would result in the following output:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"meta preprocessor macro c\"><span>#</span><span class=\"keyword control import define c\"><span>define</span></span><span>&#xA0;</span><span class=\"entity name function preprocessor c\"><span>GLSLIFY</span></span><span>&#xA0;</span><span class=\"constant numeric c\"><span>1</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;Description&#xA0;:&#xA0;Array&#xA0;and&#xA0;textureless&#xA0;GLSL&#xA0;2D&#xA0;simplex&#xA0;noise&#xA0;function.</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Author&#xA0;:&#xA0;Ian&#xA0;McEwan,&#xA0;Ashima&#xA0;Arts.</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;&#xA0;Maintainer&#xA0;:&#xA0;ijm</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Lastmod&#xA0;:&#xA0;20110822&#xA0;(ijm)</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;License&#xA0;:&#xA0;Copyright&#xA0;(C)&#xA0;2011&#xA0;Ashima&#xA0;Arts.&#xA0;All&#xA0;rights&#xA0;reserved.</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;Distributed&#xA0;under&#xA0;the&#xA0;MIT&#xA0;License.&#xA0;See&#xA0;LICENSE&#xA0;file.</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"markup underline link https hyperlink\"><span>https://github.com/ashima/webgl-noise</span></span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>vec3</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>mod289_1_0</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;x</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span>&#xA0;x&#xA0;-</span><span class=\"punctuation whitespace support function leading c\"><span>&#xA0;</span></span><span class=\"support function C99 c\"><span>floor</span></span><span>(x&#xA0;*&#xA0;(</span><span class=\"constant numeric c\"><span>1.0</span></span><span>&#xA0;/&#xA0;</span><span class=\"constant numeric c\"><span>289.0</span></span><span>))&#xA0;*&#xA0;</span><span class=\"constant numeric c\"><span>289.0</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>vec2</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>mod289_1_0</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;x</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span>&#xA0;x&#xA0;-</span><span class=\"punctuation whitespace support function leading c\"><span>&#xA0;</span></span><span class=\"support function C99 c\"><span>floor</span></span><span>(x&#xA0;*&#xA0;(</span><span class=\"constant numeric c\"><span>1.0</span></span><span>&#xA0;/&#xA0;</span><span class=\"constant numeric c\"><span>289.0</span></span><span>))&#xA0;*&#xA0;</span><span class=\"constant numeric c\"><span>289.0</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>vec3</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>permute_1_1</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;x</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>mod289_1_0</span></span><span>(</span></span><span>((x*</span><span class=\"constant numeric c\"><span>34.0</span></span><span>)+</span><span class=\"constant numeric c\"><span>1.0</span></span><span>)*x);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>float</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>snoise_1_2</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;v</span><span class=\"punctuation section parens end c\"><span>)</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span>&#xA0;&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage modifier glsl\"><span>const</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;C&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec4</span></span><span>(</span></span><span class=\"constant numeric c\"><span>0.211324865405187</span></span><span>,&#xA0;&#xA0;</span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;(3.0-sqrt(3.0))/6.0</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"constant numeric c\"><span>0.366025403784439</span></span><span>,&#xA0;&#xA0;</span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;0.5*(sqrt(3.0)-1.0)</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;-</span><span class=\"constant numeric c\"><span>0.577350269189626</span></span><span>,&#xA0;&#xA0;</span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;-1.0&#xA0;+&#xA0;2.0&#xA0;*&#xA0;C.x</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span><span class=\"constant numeric c\"><span>0.024390243902439</span></span><span>);&#xA0;</span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;1.0&#xA0;/&#xA0;41.0</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;First&#xA0;corner</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;i&#xA0;&#xA0;=</span><span class=\"punctuation whitespace support function leading c\"><span>&#xA0;</span></span><span class=\"support function C99 c\"><span>floor</span></span><span>(v&#xA0;+</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>dot</span></span><span>(</span></span><span>v,&#xA0;C</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>yy</span></span><span>)&#xA0;);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;x0&#xA0;=&#xA0;v&#xA0;-&#xA0;&#xA0;&#xA0;i&#xA0;+</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>dot</span></span><span>(</span></span><span>i,&#xA0;C</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xx</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;Other&#xA0;corners</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;i1;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>i1.x&#xA0;=&#xA0;step(&#xA0;x0.y,&#xA0;x0.x&#xA0;);&#xA0;//&#xA0;x0.x&#xA0;&gt;&#xA0;x0.y&#xA0;?&#xA0;1.0&#xA0;:&#xA0;0.0</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>i1.y&#xA0;=&#xA0;1.0&#xA0;-&#xA0;i1.x;</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;i1&#xA0;=&#xA0;(x0</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>x</span></span><span>&#xA0;&gt;&#xA0;x0</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>y</span></span><span>)&#xA0;?</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec2</span></span><span>(</span></span><span class=\"constant numeric c\"><span>1.0</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>0.0</span></span><span>)&#xA0;:</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec2</span></span><span>(</span></span><span class=\"constant numeric c\"><span>0.0</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;x0&#xA0;=&#xA0;x0&#xA0;-&#xA0;0.0&#xA0;+&#xA0;0.0&#xA0;*&#xA0;C.xx&#xA0;;</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;x1&#xA0;=&#xA0;x0&#xA0;-&#xA0;i1&#xA0;+&#xA0;1.0&#xA0;*&#xA0;C.xx&#xA0;;</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;x2&#xA0;=&#xA0;x0&#xA0;-&#xA0;1.0&#xA0;+&#xA0;2.0&#xA0;*&#xA0;C.xx&#xA0;;</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;x12&#xA0;=&#xA0;x0</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xyxy</span></span><span>&#xA0;+&#xA0;C</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xxzz</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;x12</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xy</span></span><span>&#xA0;-=&#xA0;i1;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;Permutations</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;i&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>mod289_1_0</span></span><span>(</span></span><span>i);&#xA0;</span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;Avoid&#xA0;truncation&#xA0;effects&#xA0;in&#xA0;permutation</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;p&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>permute_1_1</span></span><span>(</span><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>permute_1_1</span></span><span>(</span></span><span>&#xA0;i</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>y</span></span><span>&#xA0;+</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec3</span></span><span>(</span></span><span class=\"constant numeric c\"><span>0.0</span></span><span>,&#xA0;i1</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>y</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>&#xA0;))</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;+&#xA0;i</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>x</span></span><span>&#xA0;+</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec3</span></span><span>(</span></span><span class=\"constant numeric c\"><span>0.0</span></span><span>,&#xA0;i1</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>x</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>&#xA0;));</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;m&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>max</span></span><span>(</span></span><span class=\"constant numeric c\"><span>0.5</span></span><span>&#xA0;-</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec3</span></span><span>(</span><span class=\"support function any-method c\"><span>dot</span></span><span>(</span></span><span>x0,x0),</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>dot</span></span><span>(</span></span><span>x12</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xy</span></span><span>,x12</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xy</span></span><span>),</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>dot</span></span><span>(</span></span><span>x12</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>zw</span></span><span>,x12</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>zw</span></span><span>)),&#xA0;</span><span class=\"constant numeric c\"><span>0.0</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;m&#xA0;=&#xA0;m*m&#xA0;;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;m&#xA0;=&#xA0;m*m&#xA0;;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;Gradients:&#xA0;41&#xA0;points&#xA0;uniformly&#xA0;over&#xA0;a&#xA0;line,&#xA0;mapped&#xA0;onto&#xA0;a&#xA0;diamond.</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;The&#xA0;ring&#xA0;size&#xA0;17*17&#xA0;=&#xA0;289&#xA0;is&#xA0;close&#xA0;to&#xA0;a&#xA0;multiple&#xA0;of&#xA0;41&#xA0;(41*7&#xA0;=&#xA0;287)</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;x&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>2.0</span></span><span>&#xA0;*</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>fract</span></span><span>(</span></span><span>p&#xA0;*&#xA0;C</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>www</span></span><span>)&#xA0;-&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;h&#xA0;=</span><span class=\"punctuation whitespace support function leading c\"><span>&#xA0;</span></span><span class=\"support function C99 c\"><span>abs</span></span><span>(x)&#xA0;-&#xA0;</span><span class=\"constant numeric c\"><span>0.5</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;ox&#xA0;=</span><span class=\"punctuation whitespace support function leading c\"><span>&#xA0;</span></span><span class=\"support function C99 c\"><span>floor</span></span><span>(x&#xA0;+&#xA0;</span><span class=\"constant numeric c\"><span>0.5</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;a0&#xA0;=&#xA0;x&#xA0;-&#xA0;ox;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;Normalise&#xA0;gradients&#xA0;implicitly&#xA0;by&#xA0;scaling&#xA0;m</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;Approximation&#xA0;of:&#xA0;m&#xA0;*=&#xA0;inversesqrt(&#xA0;a0*a0&#xA0;+&#xA0;h*h&#xA0;);</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;m&#xA0;*=&#xA0;</span><span class=\"constant numeric c\"><span>1.79284291400159</span></span><span>&#xA0;-&#xA0;</span><span class=\"constant numeric c\"><span>0.85373472095314</span></span><span>&#xA0;*&#xA0;(&#xA0;a0*a0&#xA0;+&#xA0;h*h&#xA0;);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;Compute&#xA0;final&#xA0;noise&#xA0;value&#xA0;at&#xA0;P</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;g;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;g</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>x</span></span><span>&#xA0;&#xA0;=&#xA0;a0</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>x</span></span><span>&#xA0;&#xA0;*&#xA0;x0</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>x</span></span><span>&#xA0;&#xA0;+&#xA0;h</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>x</span></span><span>&#xA0;&#xA0;*&#xA0;x0</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>y</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;g</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>yz</span></span><span>&#xA0;=&#xA0;a0</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>yz</span></span><span>&#xA0;*&#xA0;x12</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xz</span></span><span>&#xA0;+&#xA0;h</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>yz</span></span><span>&#xA0;*&#xA0;x12</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>yw</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span>&#xA0;</span><span class=\"constant numeric c\"><span>130.0</span></span><span>&#xA0;*</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>dot</span></span><span>(</span></span><span>m,&#xA0;g);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;brightness&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>snoise_1_2</span></span><span>(</span></span><span class=\"support variable glsl\"><span>gl_FragCoord</span></span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xy</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_FragColor</span></span><span>&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec4</span></span><span>(</span><span class=\"support function any-method c\"><span>vec3</span></span><span>(</span></span><span>brightness),&#xA0;</span><span class=\"constant numeric c\"><span>1</span></span><span>.);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<h3 id=\"exporting-a-glsl-module\">Exporting a GLSL Module</h3>\n<p>You can export a token from a module using the <code>glslify: export</code>\npragma, like so:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>float</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>myFunction</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;normal</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>dot</span></span><span>(</span><span class=\"support function any-method c\"><span>vec3</span></span><span>(</span></span><span class=\"constant numeric c\"><span>0</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>1</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>0</span></span><span>),&#xA0;normal);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span>&#xA0;</span><span class=\"keyword operator glsl\"><span>export</span></span><span>(</span><span class=\"entity name function glsl\"><span>myFunction</span></span><span>)</span><span>&#xA0;</span></span></div>\n</code></pre>\n<p>This means that when you import this module file elsewhere, you&apos;ll\nget <code>myFunction</code> in return:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;topDot&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>./my-function.glsl</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"entity name function c\"><span>topDot</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>vec3</span></span><span>(</span><span class=\"constant numeric c\"><span>0</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>1</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>0</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>)</span><span>;</span></span><span>&#xA0;</span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;1</span><span>&#xA0;</span></span></span></div>\n</code></pre>\n<p>If you check the output shader source, you&apos;ll notice that variables\nhave been renamed to avoid conflicts between multiple shader files.</p>\n<p>You&apos;re not limited to exporting functions either: you should be able\nto export any GLSL token, such as a struct for reuse between your\nmodules:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>struct</span></span><span>&#xA0;Light&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;position;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;color;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span><span>;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span>&#xA0;</span><span class=\"keyword operator glsl\"><span>export</span></span><span>(</span><span class=\"entity name function glsl\"><span>Light</span></span><span>)</span><span>&#xA0;</span></span></div>\n</code></pre>\n<h3 id=\"passing-references-between-modules\">Passing references between modules</h3>\n<p>Normally, glslify renames tokens to avoid conflicts across contexts.  Sometimes, however, you want to reference the same thing from different contexts.  The <code>require</code> function lets you explicitly fix reference names in order to guarantee that two different modules are talking about the same reference.</p>\n<p>Give <code>some-module</code> access to locally declared <code>bar</code> whenever it looks for <code>foo</code> internally:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>int</span></span><span>&#xA0;bar;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;some-module&apos;,foo=bar,...</span></span><span>)</span><span>&#xA0;</span></span></div>\n</code></pre>\n<p>It&apos;s important to make sure that <code>bar</code> has already been declared when you invoke <code>#pragma glslify: require(...)</code>.</p>\n<p>Now time for some imagination.  Let&apos;s pretend that we have some <code>float[500]</code> arrays that we&apos;d like to be summed up.</p>\n<p>Here&apos;s a module that performs a reduction using a function <code>map</code>.</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>float</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>accumulate</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;list[N]</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;z&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>0</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"keyword control glsl\"><span>for</span></span><span class=\"meta initialization c\"><span>&#xA0;</span><span class=\"punctuation definition parameters c\"><span>(</span></span></span><span class=\"storage type glsl\"><span>int</span></span><span>&#xA0;i&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>0</span></span><span>;&#xA0;i&lt;N;&#xA0;i++)&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;&#xA0;&#xA0;z&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>map</span></span><span>(</span></span><span>z,list[i]);</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span>&#xA0;z;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span>&#xA0;</span><span class=\"keyword operator glsl\"><span>export</span></span><span>(</span><span class=\"entity name function glsl\"><span>accumulate</span></span><span>)</span><span>&#xA0;</span></span></div>\n</code></pre>\n<p>But notice that this module doesn&apos;t actually declare <code>const int N;</code> or define a function <code>map</code> anywhere.  We have to make sure they are already defined when we require the module, and pass their names along with the <code>require</code> function:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>const</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>int</span></span><span>&#xA0;M&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>500</span></span><span>;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>float</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>add</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;a,&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;b</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span><span>&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span>&#xA0;a+b;&#xA0;</span><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;sum500&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;./accumulator.glsl&apos;,N=M,map=add</span></span><span>)</span><span>&#xA0;</span></span></div>\n</code></pre>\n<p>The accumulator has been imported and glslified into a <code>sum</code> function.  We can also multiply all of the floats in some <code>float[17]</code> arrays the same way:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>const</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>int</span></span><span>&#xA0;M&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>500</span></span><span>;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>const</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>int</span></span><span>&#xA0;L&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>17</span></span><span>;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>float</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>add</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;a,&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;b</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span><span>&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span>&#xA0;a+b;&#xA0;</span><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>float</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>mul</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;a,&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;b</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span><span>&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span>&#xA0;a*b;&#xA0;</span><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;sum500&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;./accumulator.glsl&apos;,N=M,map=add</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;product17&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;./accumulator.glsl&apos;,N=L,map=mul</span></span><span>)</span><span>&#xA0;</span></span></div>\n</code></pre>\n<p><a href=\"http://stack.gl/packages/#stackgl/glsl-hash-blur\">Glsl-hash-blur</a> is an example of a module that uses this feature.</p>\n<h2 id=\"source-transforms\">Source Transforms</h2>\n<p>Source transforms are a feature inspired by browserify, allowing you to\nmodify your GLSL source at build time on a per-package basis. This is\nuseful both for transpilation (e.g. converting from or to\n<a href=\"http://en.wikipedia.org/wiki/High-Level_Shading_Language\">HLSL</a>) or for\nmaking incremental improvements to GLSL syntax. (e.g. you can use\n<a href=\"https://github.com/hughsk/glslify-hex\">glslify-hex</a> to include CSS-style\nhex strings for colors in place of <code>vec3</code>s).</p>\n<p>There are three kinds of source transform:</p>\n<ul>\n<li><strong>Local transforms</strong>, the default. These are applied per-file, and only\napplied to a single package. If you&apos;re defining it via the CLI using <code>-t</code>\nit&apos;ll only apply itself to files outside of <code>node_modules</code>, but you\ncan include it in <code>package.json</code> too: these will be applied only to that\npackage without interfering with any of the package&apos;s parents or children.</li>\n<li><strong>Global transforms</strong> are applied after local transforms to every file,\nregardless of whether or not it&apos;s a dependency.</li>\n<li><strong>Post transforms</strong> are applied to the entire output file once it&apos;s been\nbundled. Generally, you want to reserve this for very specific use cases\nsuch as whole-shader optimisation.</li>\n</ul>\n<p>There are a number of ways to use a transform. Start by\ninstalling it in your project:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install&#xA0;--save&#xA0;glslify-hex</span></span></div>\n</code></pre>\n<p>The preferred way to enable a transform is through your project&apos;s\n<code>package.json</code> file&apos;s <code>glslify.transform</code> property, like so:</p>\n<pre><code class=\"lang-json\"><div class=\"line\"><span class=\"source json\"><span>{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&quot;name&quot;:&#xA0;&quot;my-project&quot;,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&quot;dependencies&quot;:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;glslify-hex&quot;:&#xA0;&quot;^2.0.0&quot;,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;glslify&quot;:&#xA0;&quot;^2.0.0&quot;</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;},</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&quot;glslify&quot;:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;transform&quot;:&#xA0;[&quot;glslify-hex&quot;]</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source json\"><span>}</span></span></div>\n</code></pre>\n<p>You may also include arguments to your transform as you would\nwith browserify:</p>\n<pre><code class=\"lang-json\"><div class=\"line\"><span class=\"source json\"><span>{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&quot;name&quot;:&#xA0;&quot;my-project&quot;,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&quot;dependencies&quot;:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;glslify-hex&quot;:&#xA0;&quot;^2.0.0&quot;,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;glslify&quot;:&#xA0;&quot;^2.0.0&quot;</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;},</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&quot;glslify&quot;:&#xA0;{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&quot;transform&quot;:&#xA0;[</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;[&quot;glslify-hex&quot;,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;option-1&quot;:&#xA0;true,</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;option-2&quot;:&#xA0;42</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;}]</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;&#xA0;&#xA0;]</span></span></div><div class=\"line\"><span class=\"source json\"><span>&#xA0;&#xA0;}</span></span></div><div class=\"line\"><span class=\"source json\"><span>}</span></span></div>\n</code></pre>\n<p>Note that this method is only available for local transforms.</p>\n<p>You may also specify transforms via the CLI:</p>\n<pre><code class=\"lang-bash\"><div class=\"line\"><span class=\"source shell\"><span>glslify&#xA0;-t&#xA0;&apos;local-transform&apos;&#xA0;-g&#xA0;&apos;global-transform&apos;&#xA0;-p&#xA0;&apos;post-transform&apos;</span></span></div>\n</code></pre>\n<p>Or when using the browserify transform by including them as\noptions like so:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glslify&#xA0;=&#xA0;require(&apos;glslify&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>glslify.file(__dirname&#xA0;+&#xA0;&apos;/shader.glsl&apos;,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;transform:&#xA0;[</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;[&quot;glslify-hex&quot;,&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;option-1&quot;:&#xA0;true,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;option-2&quot;:&#xA0;42</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;[&quot;global-transform&quot;,&#xA0;{&#xA0;global:&#xA0;true&#xA0;}],</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;[&quot;post-transform&quot;,&#xA0;{&#xA0;post:&#xA0;true&#xA0;}]</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;]</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div>\n</code></pre>\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n<li><a href=\"http://stack.gl/packages/\">stack.gl Packages List</a> (see &quot;Shader Components&quot;).</li>\n<li><a href=\"http://mattdesl.svbtle.com/glslify\">Modular and Versioned GLSL</a> by <a href=\"http://mattdesl.svbtle.com/\">@mattdesl</a>.</li>\n<li><a href=\"https://github.com/mattdesl/module-best-practices\">Module Best Practices</a> by <a href=\"http://mattdesl.svbtle.com/\">@mattdesl</a>.</li>\n<li><a href=\"https://github.com/maxogden/art-of-node\">Art of Node</a> by <a href=\"http://github.com/maxogden\">@maxogden</a>.</li>\n<li><a href=\"https://github.com/substack/browserify-handbook\">Browserify Handbook</a> by <a href=\"http://substack.net\">@substack</a>.</li>\n<li><a href=\"http://www.amazon.com/WebGL-Insights-Patrick-Cozzi/dp/1498716075\">WebGL Insights</a> includes a chapter introducing glslify in detail.</li>\n<li><a href=\"http://github.com/stackgl/shader-school\">Shader School</a> by <a href=\"http://github.com/mikolalysenko\">@mikolalysenko</a>, <a href=\"http://github.com/chrisdickinson\">chrisdickinson</a> and <a href=\"http://github.com/hughskennedy\">@hughskennedy</a>.</li>\n<li><a href=\"http://patriciogonzalezvivo.com/2015/thebookofshaders/\">Book of Shaders</a> by <a href=\"http://patriciogonzalezvivo.com/\">Patricio Gonzalez Vivo</a>.</li>\n<li><a href=\"http://marcinignac.com/blog/pragmatic-pbr-setup-and-gamma/\">Pragmatic Physically Based Rendering</a> by <a href=\"http://http://marcinignac.com/\">@marcinignac</a>.</li>\n<li><a href=\"http://qiita.com/yuichiroharai/items/ecbfd2d7729c7384fb3a\">glslify&#x3067;GLSL&#x3092;&#x30E2;&#x30B8;&#x30E5;&#x30FC;&#x30EB;&#x5316;&#x3057;&#x3088;&#x3046;</a> by <a href=\"http://www.yuichiroharai.com/\">@yuichiroharaiJP</a>.</li>\n</ul>\n<h2 id=\"glslify-in-the-wild\">glslify in the Wild</h2>\n<ul>\n<li><a href=\"https://plot.ly/\">Plotly</a></li>\n<li><a href=\"http://audiograph.xyz/\">Audiograph</a></li>\n<li><a href=\"https://kamra.invisi-dir.com/\">KAMRA: Deja Vu</a></li>\n<li><a href=\"http://swissarmyman.com/\">Swiss Army Man</a></li>\n<li><a href=\"https://collectingeurope.net/\">Connecting Europe</a></li>\n<li><a href=\"https://www.kuva.io/\">Kuva</a></li>\n<li><a href=\"http://thelawofthejungle.com/\">The Law of The Jungle</a></li>\n<li><a href=\"http://2016.makemepulse.com\">Make Me Pulse</a></li>\n<li><a href=\"https://github.com/edankwan/SMASHING-Mega-Scene\">SMASHING Mega Scene</a></li>\n<li><a href=\"https://tkmh.me/\">Takumi Hasegawa</a></li>\n<li><a href=\"https://hughsk.io/ectoplasmid\">ectoplasmid</a></li>\n<li><a href=\"http://glslb.in/\">glslb.in</a></li>\n<li><a href=\"https://nodesource.com/products/nsolid\">N|Solid</a></li>\n</ul>\n<h2 id=\"contributing\">Contributing</h2>\n<p>See <a href=\"https://github.com/stackgl/contributing\">stackgl/contributing</a> for details.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT. See <a href=\"http://github.com/stackgl/glslify/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}