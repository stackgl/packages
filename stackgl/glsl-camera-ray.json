{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/glsl-camera-ray\">glsl-camera-ray</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>Generates a ray for <a href=\"http://shadertoy.com\">Shadertoy</a>-style raycasting in GLSL.\nAccepts either either a camera origin/target or an arbitrary <code>mat3</code> matrix.</p>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/glsl-camera-ray/\"></a></p>\n<h3 id=\"vec3-cameraray-vec3-ro-vec3-ta-vec2-screen-float-lens-\"><code>vec3 cameraRay(vec3 ro, vec3 ta, vec2 screen, float lens)</code></h3>\n<ul>\n<li><code>vec3 ro</code> is the position of the camera.</li>\n<li><code>vec3 ta</code> is the position the camera is pointing towards.</li>\n<li><code>vec2 screen</code> is the position of the fragment on the screen, generally between -1 and 1. For non-square frames you&apos;ll want to normalize this using something like <a href=\"http://github.com/hughsk/glsl-square-frame\">glsl-square-frame</a></li>\n<li><code>lens</code> is the lens length of the camera. This works\nsimilarly to FOV, where <code>0.0</code> is horribly wide and <code>2.0</code>\nis a decent default.</li>\n</ul>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;square&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;glsl-square-frame&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;camera&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;glsl-camera-ray&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;&#xA0;iResolution;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;iGlobalTime;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;Bootstrap&#xA0;a&#xA0;Shadertoy-style&#xA0;raytracing&#xA0;scene:</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;cameraAngle&#xA0;&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>0.8</span></span><span>&#xA0;*&#xA0;iGlobalTime;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;&#xA0;rayOrigin&#xA0;&#xA0;&#xA0;&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec3</span></span><span>(</span></span><span class=\"constant numeric c\"><span>3.5</span></span><span>&#xA0;*</span><span class=\"punctuation whitespace support function leading c\"><span>&#xA0;</span></span><span class=\"support function C99 c\"><span>sin</span></span><span>(cameraAngle),&#xA0;</span><span class=\"constant numeric c\"><span>3.0</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>3.5</span></span><span>&#xA0;*</span><span class=\"punctuation whitespace support function leading c\"><span>&#xA0;</span></span><span class=\"support function C99 c\"><span>cos</span></span><span>(cameraAngle));</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;&#xA0;rayTarget&#xA0;&#xA0;&#xA0;&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec3</span></span><span>(</span></span><span class=\"constant numeric c\"><span>0</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>0</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>0</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;&#xA0;screenPos&#xA0;&#xA0;&#xA0;&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>square</span></span><span>(</span></span><span>iResolution</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xy</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;lensLength&#xA0;&#xA0;&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>2.0</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;&#xA0;rayDirection&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>camera</span></span><span>(</span></span><span>rayOrigin,&#xA0;rayTarget,&#xA0;screenPos,&#xA0;lensLength);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;...</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<h3 id=\"vec3-cameraray-mat3-camera-vec2-screen-float-lens-\"><code>vec3 cameraRay(mat3 camera, vec2 screen, float lens)</code></h3>\n<p>For more flexibility, you can supply <code>mat3 camera</code> in place\nof <code>vec3 ro, vec3 ta</code>. This way, you can use your own camera\nmodules alongside <code>glsl-camera-ray</code>.</p>\n<h2 id=\"contributing\">Contributing</h2>\n<p>See <a href=\"https://github.com/stackgl/contributing\">stackgl/contributing</a> for details.</p>\n<h2 id=\"license\">License</h2>\n<p>MIT. See <a href=\"http://github.com/stackgl/glsl-camera-ray/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}