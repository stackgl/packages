{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/gl-vec2\">gl-vec2</a><div class=\"contrib\"></div></h1>\n<p><a href=\"http://github.com/badges/stability-badges\"></a></p>\n<p>Part of a fork of <a href=\"http://github.com/toji\">@toji</a>&apos;s\n<a href=\"http://github.com/toji/gl-matrix\">gl-matrix</a> split into smaller pieces: this\npackage contains <code>glMatrix.vec2</code>.</p>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://nodei.co/npm/gl-vec2/\"></a></p>\n<h3 id=\"vec2-require-gl-vec2-\"><code>vec2 = require(&apos;gl-vec2&apos;)</code></h3>\n<p>Will load all of the module&apos;s functionality and expose it on a single\nobject. Note that any of the methods may also be required directly\nfrom their files.</p>\n<p>For example, the following are equivalent:</p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;scale&#xA0;=&#xA0;require(&apos;gl-vec2&apos;).scale</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;scale&#xA0;=&#xA0;require(&apos;gl-vec2/scale&apos;)</span></span></div>\n</code></pre>\n<h2 id=\"api\">API</h2>\n<ul>\n<li><a href=\"#addoutvec2-avec2-bvec2\">add()</a></li>\n<li><a href=\"#ceiloutvec2-avec2\">ceil()</a></li>\n<li><a href=\"#cloneavec2\">clone()</a></li>\n<li><a href=\"#copyoutvec2-avec2\">copy()</a></li>\n<li><a href=\"#create\">create()</a></li>\n<li><a href=\"#crossoutvec3-avec2-bvec2\">cross()</a></li>\n<li><a href=\"#distanceavec2-bvec2\">distance()</a></li>\n<li><a href=\"#distanceavec2-bvec2\">dist()</a></li>\n<li><a href=\"#divideoutvec2-avec2-bvec2\">divide()</a></li>\n<li><a href=\"#divideoutvec2-avec2-bvec2\">div()</a></li>\n<li><a href=\"#dotavec2-bvec2\">dot()</a></li>\n<li><a href=\"#equalsavec2-bvec2\">equals()</a></li>\n<li><a href=\"#exactequalsavec2-bvec2\">exactEquals()</a></li>\n<li><a href=\"#flooroutvec2-avec2\">floor()</a></li>\n<li><a href=\"#foreachaarray-stridenumber-offsetnumber-countnumber-fnfunction-argobject\">forEach()</a></li>\n<li><a href=\"#fromvaluesxnumber-ynumber\">fromValues()</a></li>\n<li><a href=\"#inverseoutvec2-avec2\">inverse()</a></li>\n<li><a href=\"#lengthavec2\">length()</a></li>\n<li><a href=\"#lengthavec2\">len()</a></li>\n<li><a href=\"#lerpoutvec2-avec2-bvec2-tnumber\">lerp()</a></li>\n<li><a href=\"#limitoutvec2-avec2-maxnumber\">limit()</a></li>\n<li><a href=\"#maxoutvec2-avec2-bvec2\">max()</a></li>\n<li><a href=\"#minoutvec2-avec2-bvec2\">min()</a></li>\n<li><a href=\"#multiplyoutvec2-avec2-bvec2\">multiply()</a></li>\n<li><a href=\"#multiplyoutvec2-avec2-bvec2\">mul()</a></li>\n<li><a href=\"#negateoutvec2-avec2\">negate()</a></li>\n<li><a href=\"#normalizeoutvec2-avec2\">normalize()</a></li>\n<li><a href=\"#randomoutvec2-scalenumber\">random()</a></li>\n<li><a href=\"#rotateoutvec2-avec2-anglenumber\">rotate()</a></li>\n<li><a href=\"#roundoutvec2-avec2\">round()</a></li>\n<li><a href=\"#scaleoutvec2-avec2-bnumber\">scale()</a></li>\n<li><a href=\"#scaleandaddoutvec2-avec2-bvec2-scalenumber\">scaleAndAdd()</a></li>\n<li><a href=\"#setoutvec2-xnumber-ynumber\">set()</a></li>\n<li><a href=\"#squareddistanceavec2-bvec2\">squaredDistance()</a></li>\n<li><a href=\"#squareddistanceavec2-bvec2\">sqrDist()</a></li>\n<li><a href=\"#squaredlengthavec2\">squaredLength()</a></li>\n<li><a href=\"#squaredlengthavec2\">sqrLen()</a></li>\n<li><a href=\"#subtractoutvec2-avec2-bvec2\">subtract()</a></li>\n<li><a href=\"#subtractoutvec2-avec2-bvec2\">sub()</a></li>\n<li><a href=\"#transformmat2outvec2-avec2-mmat2\">transformMat2()</a></li>\n<li><a href=\"#transformmat2doutvec2-avec2-mmat2d\">transformMat2d()</a></li>\n<li><a href=\"#transformmat3outvec2-avec2-mmat3\">transformMat3()</a></li>\n<li><a href=\"#transformmat4outvec2-avec2-mmat4\">transformMat4()</a></li>\n</ul>\n<h2 id=\"add-out-vec2-a-vec2-b-vec2-\">add(out:vec2, a:vec2, b:vec2)</h2>\n<p>  Adds two vec2&apos;s</p>\n<h2 id=\"ceil-out-vec2-a-vec2-\">ceil(out:vec2, a:vec2)</h2>\n<p>  <code>Math.ceil</code> the components of a vec2</p>\n<h2 id=\"clone-a-vec2-\">clone(a:vec2)</h2>\n<p>  Creates a new vec2 initialized with values from an existing vector</p>\n<h2 id=\"copy-out-vec2-a-vec2-\">copy(out:vec2, a:vec2)</h2>\n<p>  Copy the values from one vec2 to another</p>\n<h2 id=\"create-\">create()</h2>\n<p>  Creates a new, empty vec2</p>\n<h2 id=\"cross-out-vec3-a-vec2-b-vec2-\">cross(out:vec3, a:vec2, b:vec2)</h2>\n<p>  Computes the cross product of two vec2&apos;s\n  Note that the cross product must by definition produce a 3D vector</p>\n<h2 id=\"distance-a-vec2-b-vec2-\">distance(a:vec2, b:vec2)</h2>\n<p>  Calculates the euclidian distance between two vec2&apos;s. Aliased as <code>dist</code>.</p>\n<h2 id=\"divide-out-vec2-a-vec2-b-vec2-\">divide(out:vec2, a:vec2, b:vec2)</h2>\n<p>  Divides two vec2&apos;s. Aliased as <code>div</code>.</p>\n<h2 id=\"dot-a-vec2-b-vec2-\">dot(a:vec2, b:vec2)</h2>\n<p>  Calculates the dot product of two vec2&apos;s</p>\n<h2 id=\"equals-a-vec2-b-vec2-\">equals(a:vec2, b:vec2)</h2>\n<p>  Returns whether or not the vectors have approximately the same elements in the same position.</p>\n<h2 id=\"exactequals-a-vec2-b-vec2-\">exactEquals(a:vec2, b:vec2)</h2>\n<p>  Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)</p>\n<h2 id=\"floor-out-vec2-a-vec2-\">floor(out:vec2, a:vec2)</h2>\n<p>  <code>Math.floor</code> the components of a vec2</p>\n<h2 id=\"foreach-a-array-stride-number-offset-number-count-number-fn-function-arg-object-\">forEach(a:Array, stride:Number, offset:Number, count:Number, fn:Function, [arg]:Object)</h2>\n<p>  Perform some operation over an array of vec2s.</p>\n<h2 id=\"fromvalues-x-number-y-number-\">fromValues(x:Number, y:Number)</h2>\n<p>  Creates a new vec2 initialized with the given values</p>\n<h2 id=\"inverse-out-vec2-a-vec2-\">inverse(out:vec2, a:vec2)</h2>\n<p>  Returns the inverse of the components of a vec2</p>\n<h2 id=\"length-a-vec2-\">length(a:vec2)</h2>\n<p>  Calculates the length of a vec2. Aliased as <code>len</code>.</p>\n<h2 id=\"lerp-out-vec2-a-vec2-b-vec2-t-number-\">lerp(out:vec2, a:vec2, b:vec2, t:Number)</h2>\n<p>  Performs a linear interpolation between two vec2&apos;s</p>\n<h2 id=\"limit-out-vec2-a-vec2-max-number-\">limit(out:vec2, a:vec2, max:Number)</h2>\n<p>  Limit the magnitude of this vector to the value used for the <code>max</code> parameter</p>\n<h2 id=\"max-out-vec2-a-vec2-b-vec2-\">max(out:vec2, a:vec2, b:vec2)</h2>\n<p>  Returns the maximum of two vec2&apos;s</p>\n<h2 id=\"min-out-vec2-a-vec2-b-vec2-\">min(out:vec2, a:vec2, b:vec2)</h2>\n<p>  Returns the minimum of two vec2&apos;s</p>\n<h2 id=\"multiply-out-vec2-a-vec2-b-vec2-\">multiply(out:vec2, a:vec2, b:vec2)</h2>\n<p>  Multiplies two vec2&apos;s. Aliased as <code>mul</code>.</p>\n<h2 id=\"negate-out-vec2-a-vec2-\">negate(out:vec2, a:vec2)</h2>\n<p>  Negates the components of a vec2</p>\n<h2 id=\"normalize-out-vec2-a-vec2-\">normalize(out:vec2, a:vec2)</h2>\n<p>  Normalize a vec2</p>\n<h2 id=\"random-out-vec2-scale-number-\">random(out:vec2, [scale]:Number)</h2>\n<p>  Generates a random vector with the given scale</p>\n<h2 id=\"round-out-vec2-a-vec2-\">round(out:vec2, a:vec2)</h2>\n<p>  <code>Math.round</code> the components of a vec2</p>\n<h2 id=\"rotate-out-vec2-a-vec2-angle-number-\">rotate(out:vec2, a:vec2, angle:Number)</h2>\n<p>  Rotates a vec2 by an angle (in radians)</p>\n<h2 id=\"scale-out-vec2-a-vec2-b-number-\">scale(out:vec2, a:vec2, b:Number)</h2>\n<p>  Scales a vec2 by a scalar number</p>\n<h2 id=\"scaleandadd-out-vec2-a-vec2-b-vec2-scale-number-\">scaleAndAdd(out:vec2, a:vec2, b:vec2, scale:Number)</h2>\n<p>  Adds two vec2&apos;s after scaling the second operand by a scalar value</p>\n<h2 id=\"set-out-vec2-x-number-y-number-\">set(out:vec2, x:Number, y:Number)</h2>\n<p>  Set the components of a vec2 to the given values</p>\n<h2 id=\"squareddistance-a-vec2-b-vec2-\">squaredDistance(a:vec2, b:vec2)</h2>\n<p>  Calculates the squared euclidian distance between two vec2&apos;s. Aliased as <code>sqrDist</code>.</p>\n<h2 id=\"squaredlength-a-vec2-\">squaredLength(a:vec2)</h2>\n<p>  Calculates the squared length of a vec2. Aliased as <code>sqrLen</code>.</p>\n<h2 id=\"subtract-out-vec2-a-vec2-b-vec2-\">subtract(out:vec2, a:vec2, b:vec2)</h2>\n<p>  Subtracts vector b from vector a. Aliased as <code>sub</code>.</p>\n<h2 id=\"transformmat2-out-vec2-a-vec2-m-mat2-\">transformMat2(out:vec2, a:vec2, m:mat2)</h2>\n<p>  Transforms the vec2 with a mat2</p>\n<h2 id=\"transformmat2d-out-vec2-a-vec2-m-mat2d-\">transformMat2d(out:vec2, a:vec2, m:mat2d)</h2>\n<p>  Transforms the vec2 with a mat2d</p>\n<h2 id=\"transformmat3-out-vec2-a-vec2-m-mat3-\">transformMat3(out:vec2, a:vec2, m:mat3)</h2>\n<p>  Transforms the vec2 with a mat3\n  3rd vector component is implicitly &apos;1&apos;</p>\n<h2 id=\"transformmat4-out-vec2-a-vec2-m-mat4-\">transformMat4(out:vec2, a:vec2, m:mat4)</h2>\n<p>  Transforms the vec2 with a mat4\n  3rd vector component is implicitly &apos;0&apos;\n  4th vector component is implicitly &apos;1&apos;</p>\n<h2 id=\"license\">License</h2>\n<p><a href=\"http://en.wikipedia.org/wiki/Zlib_License\">zlib</a>. See <a href=\"https://github.com/stackgl/gl-vec2/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}