{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/gl-buffer\">gl-buffer</a><div class=\"contrib\"></div></h1>\n<p>A wrapper for WebGL buffer objects.</p>\n<iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://stack.gl/gl-buffer/\"></iframe><h2 id=\"example\">Example</h2>\n<p><a href=\"http://stack.gl/gl-buffer\">View this demo in your browser</a></p>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;shell&#xA0;=&#xA0;require(&quot;gl-now&quot;)()</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;glslify&#xA0;=&#xA0;require(&quot;glslify&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createBuffer&#xA0;=&#xA0;require(&quot;gl-buffer&quot;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createShader&#xA0;=&#xA0;glslify({</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;vertex:&#xA0;&quot;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;attribute&#xA0;vec2&#xA0;position;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;varying&#xA0;vec2&#xA0;uv;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;main()&#xA0;{\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gl_Position&#xA0;=&#xA0;vec4(position,&#xA0;0.0,&#xA0;1.0);\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;uv&#xA0;=&#xA0;position.xy;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}&quot;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;fragment:&#xA0;&quot;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;precision&#xA0;highp&#xA0;float;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;uniform&#xA0;float&#xA0;tick;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;varying&#xA0;vec2&#xA0;uv;\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;void&#xA0;main()&#xA0;{\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;gl_FragColor&#xA0;=&#xA0;vec4(0.5*(uv+1.0),&#xA0;0.5*(cos(tick)+1.0),&#xA0;1.0);\\</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;&#xA0;&#xA0;}&quot;,</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;inline:&#xA0;true</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;buffer,&#xA0;shader</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shell.on(&quot;gl-init&quot;,&#xA0;function()&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;gl&#xA0;=&#xA0;shell.gl</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//Create&#xA0;buffer</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;buffer&#xA0;=&#xA0;createBuffer(gl,&#xA0;[-1,&#xA0;0,&#xA0;0,-1,&#xA0;1,&#xA0;1])</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;//Create&#xA0;shader</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader&#xA0;=&#xA0;createShader(gl)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader.attributes.position.location&#xA0;=&#xA0;0</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>shell.on(&quot;gl-render&quot;,&#xA0;function(t)&#xA0;{</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;var&#xA0;gl&#xA0;=&#xA0;shell.gl</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader.bind()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;buffer.bind()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader.attributes.position.pointer()</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;shader.uniforms.tick&#xA0;=&#xA0;Date.now()&#xA0;/&#xA0;1000.0</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;gl.drawArrays(gl.TRIANGLES,&#xA0;0,&#xA0;3)</span></span></div><div class=\"line\"><span class=\"source js\"><span>})</span></span></div>\n</code></pre>\n<p>Output:</p>\n<p><img src=\"http://stack.gl/gl-buffer/screenshot.png\"></p>\n<h2 id=\"install\">Install</h2>\n<pre><code>npm install gl-buffer\n</code></pre><h2 id=\"api\">API</h2>\n<pre><code class=\"lang-javascript\"><div class=\"line\"><span class=\"source js\"><span>var&#xA0;createBuffer&#xA0;=&#xA0;require(&quot;gl-buffer&quot;)</span></span></div>\n</code></pre>\n<h2 id=\"constructor\">Constructor</h2>\n<p>The constructor for a GL buffer works as follows:</p>\n<h3 id=\"var-buffer-createbuffer-gl-data-type-usage-\"><code>var buffer = createBuffer(gl[, data, type, usage])</code></h3>\n<ul>\n<li><code>gl</code> is a WebGL context</li>\n<li><code>data</code> is either an integer, an array, a typed array, an array buffer or an ndarray representing the data of the buffer.  Default is <code>0</code></li>\n<li><code>type</code> is an optional parameter specifying the type of the webgl buffer.  Default is <code>gl.ARRAY_BUFFER</code>.</li>\n<li><code>usage</code> is an optional parameter representing the intended usage for the buffer (in the WebGL sense).  It is not clear this does anything in current WebGL implementations.  Default <code>gl.DYNAMIC_DRAW</code></li>\n</ul>\n<h2 id=\"properties\">Properties</h2>\n<h3 id=\"buffer-gl\"><code>buffer.gl</code></h3>\n<p>A reference to the buffer&apos;s WebGL context</p>\n<h3 id=\"buffer-handle\"><code>buffer.handle</code></h3>\n<p>A handle to the underlying WebGLBuffer object</p>\n<h3 id=\"buffer-type\"><code>buffer.type</code></h3>\n<p>The type of the buffer (either <code>gl.ARRAY_BUFFER</code> or <code>gl.ELEMENT_ARRAY_BUFFER</code>)</p>\n<h3 id=\"buffer-length\"><code>buffer.length</code></h3>\n<p>The size of the buffer in bytes</p>\n<h3 id=\"buffer-usage\"><code>buffer.usage</code></h3>\n<p>The internal WebGL usage for the buffer.</p>\n<h2 id=\"methods\">Methods</h2>\n<h3 id=\"buffer-bind-\"><code>buffer.bind()</code></h3>\n<p>Binds the buffer to the appropriate target.  Equivalent to <code>gl.bindBuffer( ... )</code></p>\n<h3 id=\"buffer-dispose-\"><code>buffer.dispose()</code></h3>\n<p>Deletes the buffer releasing all associated resources.  Equivalent to <code>gl.deleteBuffer(...)</code></p>\n<h3 id=\"buffer-update-data-offset-\"><code>buffer.update(data[, offset])</code></h3>\n<p>Updates the data in the buffer. There are two basic modes to this function.  In the first, it calls <code>gl.bufferSubData</code> to update a portion of the buffer in place, and in the second it calls <code>gl.bufferData</code> to completely resize the buffer.</p>\n<ul>\n<li><code>data</code> the new data to add to the buffer.  This follows the same semantics as in the constructor.</li>\n<li><code>offset</code> the offset <strong>in bytes</strong> to copy data into the buffer from _or_ if unspecified then the buffer is resized by calling <code>gl.bufferData</code> instead of <code>gl.bufferSubData</code>.  Default <code>0</code>.</li>\n</ul>\n<h2 id=\"credits\">Credits</h2>\n<p>(c) 2013-2014 Mikola Lysenko. MIT License</p>\n"}