{"readme":"<h1 class=\"title\"><a target=\"_blank\" href=\"https://github.com/stackgl/glsl-lighting-walkthrough\">glsl-lighting-walkthrough</a><div class=\"contrib\"></div></h1>\n<p><iframe scrolling=\"no\" seamless=\"seamless\" src=\"http://stack.gl/glsl-lighting-walkthrough/\"></iframe></p>\n<p><a href=\"http://stack.gl/glsl-lighting-walkthrough/\">(live demo)</a></p>\n<p>This article provides an overview of the various steps involved in lighting a mesh with a custom GLSL shader. Some of the features of the demo:</p>\n<ul>\n<li>per-pixel lighting</li>\n<li>flat &amp; smooth normals</li>\n<li>gamma correction for working in linear space</li>\n<li>normal &amp; specular maps for detail</li>\n<li>attenuation for point light falloff</li>\n<li>Oren-Nayar diffuse for rough surfaces</li>\n<li>Phong reflectance model for specular highlights</li>\n</ul>\n<p>It is not intended as a full-blown beginner&apos;s guide, and assumes prior knowledge of WebGL and stackgl rendering. Although it is implemented with stackgl, the same concepts and shader code could be used in ThreeJS and other frameworks.</p>\n<p>If you have questions, comments or improvements, please <a href=\"https://github.com/stackgl/glsl-lighting-walkthrough/issues\">post a new issue</a>.</p>\n<h2 id=\"contents\">contents</h2>\n<ul>\n<li><a href=\"#running-from-source\">running from source</a></li>\n<li><a href=\"#code-overview\">code overview</a></li>\n<li><a href=\"#shaders\">shaders</a></li>\n<li><a href=\"#phong\">phong</a><ul>\n<li><a href=\"#standard-derivatives\">standard derivatives</a></li>\n<li><a href=\"#vertex-shader\">vertex shader</a></li>\n<li><a href=\"#flat-normals\">flat normals</a></li>\n<li><a href=\"#smooth-normals\">smooth normals</a></li>\n<li><a href=\"#gamma-correction\">gamma correction</a></li>\n<li><a href=\"#normal-mapping\">normal mapping</a></li>\n<li><a href=\"#light-attenuation\">light attenuation</a></li>\n<li><a href=\"#diffuse\">diffuse</a></li>\n<li><a href=\"#specular\">specular</a></li>\n<li><a href=\"#final-color\">final color</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"running-from-source\">running from source</h2>\n<p>To run from source:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>git&#xA0;clone&#xA0;https://github.com/stackgl/glsl-lighting-walkthrough.git</span></span></div><div class=\"line\"><span class=\"source shell\"><span>cd&#xA0;glsl-lighting-walkthrough</span></span></div><div class=\"line\"><span class=\"source shell\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;install</span></span></div><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;run&#xA0;start</span></span></div>\n</code></pre>\n<p>And then open <code>http://localhost:9966</code> to see the demo. Changes to the source will live-reload the browser for development.</p>\n<p>To build:</p>\n<pre><code class=\"lang-sh\"><div class=\"line\"><span class=\"source shell\"><span>npm&#xA0;run&#xA0;build</span></span></div>\n</code></pre>\n<h2 id=\"code-overview\">code overview</h2>\n<p>The code is using Babelify for ES6 template strings, destructuring, and arrow functions. It is organized like so:</p>\n<ul>\n<li><a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/index.js\">index.js</a> - loads images, then boots up the app</li>\n<li><a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/lib/app.js\">lib/app.js</a> - sets up a WebGL render loop and draws the scene</li>\n<li><a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/lib/scene.js\">lib/scene.js</a> - sets up textures, positions the light and draws meshes</li>\n<li><a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/lib/create-sphere.js\">lib/create-sphere.js</a> - create a 3D sphere for the light source</li>\n<li><a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/lib/create-torus.js\">lib/create-torus.js</a> - creates a 3D torus with a phong shader</li>\n</ul>\n<h2 id=\"shaders\">shaders</h2>\n<p><a href=\"https://github.com/stackgl/glslify\">glslify</a> is used to modularize the shaders and pull some common functions from <a href=\"https://www.npmjs.com/\">npm</a>.</p>\n<p>We use a &quot;basic&quot; material for our light indicator, so that it appears at a constant color regardless of depth and lighting:</p>\n<ul>\n<li><a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/lib/shaders/basic.frag\">shaders/basic.frag</a></li>\n<li><a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/lib/shaders/basic.vert\">shaders/basic.vert</a></li>\n</ul>\n<p>We use a &quot;phong&quot; material for our torus, which we will explore in more depth below.</p>\n<ul>\n<li><a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/lib/shaders/phong.frag\">shaders/phong.frag</a></li>\n<li><a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/lib/shaders/phong.vert\">shaders/phong.vert</a></li>\n</ul>\n<p>There are many ways to skin a cat; this is just one approach to phong shading. </p>\n<h2 id=\"phong\">phong</h2>\n<h3 id=\"standard-derivatives\">standard derivatives</h3>\n<p>Our phong shader uses standard derivatives, so we need to enable the extension before we create it. The JavaScript code looks like this:</p>\n<pre><code class=\"lang-js\"><div class=\"line\"><span class=\"source js\"><span>//enable&#xA0;the&#xA0;extension</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;ext&#xA0;=&#xA0;gl.getExtension(&apos;OES_standard_derivatives&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>if&#xA0;(!ext)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;&#xA0;throw&#xA0;new&#xA0;Error(&apos;derivatives&#xA0;not&#xA0;supported&apos;)</span></span></div><div class=\"line\"><span class=\"source js\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source js\"><span>var&#xA0;shader&#xA0;=&#xA0;createShader(gl,&#xA0;vert,&#xA0;frag)</span></span></div><div class=\"line\"><span class=\"source js\"><span>...</span></span></div>\n</code></pre>\n<p>And, in our fragment shader we need to enable it explicitly:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#extension&#xA0;GL_OES_standard_derivatives&#xA0;:&#xA0;enable</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>precision&#xA0;highp&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;...</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<p>The extension is used in two places in our final shader:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/glsl-face-normal\">glsl-face-normal</a> for flat shading (optional)</li>\n<li><a href=\"https://www.npmjs.com/package/glsl-perturb-normal\">glsl-perturb-normal</a> for normal-mapping</li>\n</ul>\n<h3 id=\"vertex-shader\">vertex shader</h3>\n<p><img src=\"http://i.imgur.com/J24k2iu.png\" alt=\"white\"></p>\n<p>Our vertex shader needs to pass the texture coordinates and view space position to the fragment shader. </p>\n<p>A basic vertex shader looks like this:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>attribute</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;position;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>attribute</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;uv;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>mat4</span></span><span>&#xA0;projection;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>mat4</span></span><span>&#xA0;view;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>mat4</span></span><span>&#xA0;model;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;vUv;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;vViewPosition;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>determine&#xA0;view&#xA0;space&#xA0;position</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>mat4</span></span><span>&#xA0;modelViewMatrix&#xA0;=&#xA0;view&#xA0;*&#xA0;model;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;viewModelPosition&#xA0;=&#xA0;modelViewMatrix&#xA0;*&#xA0;position;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>pass&#xA0;varyings&#xA0;to&#xA0;fragment&#xA0;shader</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;vViewPosition&#xA0;=&#xA0;viewModelPosition</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xyz</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;vUv&#xA0;=&#xA0;uv;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>determine&#xA0;final&#xA0;3D&#xA0;position</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_Position</span></span><span>&#xA0;=&#xA0;projection&#xA0;*&#xA0;viewModelPosition;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<h3 id=\"flat-normals\">flat normals</h3>\n<p><img src=\"http://i.imgur.com/YvuhBGk.png\" alt=\"flat\"></p>\n<p>If you want flat shading, you don&apos;t need to submit normals as a vertex attribute. Instead, you can use <a href=\"https://www.npmjs.com/package/glsl-face-normal\">glsl-face-normal</a> to estimate them in the fragment shader:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;faceNormals&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;glsl-face-normal&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;vViewPosition;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;normal&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>faceNormals</span></span><span>(</span></span><span>vViewPosition);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_FragColor</span></span><span>&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec4</span></span><span>(</span></span><span>normal,&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<h3 id=\"smooth-normals\">smooth normals</h3>\n<p><img src=\"http://i.imgur.com/hnYlRG5.png\" alt=\"smooth\"></p>\n<p>For smooth normals, we use the object space normals from <a href=\"https://www.npmjs.com/package/torus-mesh\">torus-mesh</a> and pass them to the fragment shader to have them interpolated between vertices.</p>\n<p>To transform the object normals into view space, we multiply them by a &quot;normal matrix&quot; - the inverse transpose of the model view matrix.</p>\n<p>Since this doesn&apos;t change vertex to vertex, you can do it CPU-side and pass it as a uniform to the vertex shader. </p>\n<p>Or, you can just simply compute the normal matrix in the vertex step. GLSL ES does not provide built-in <code>transpose()</code> or <code>inverse()</code>, so we need to require them from npm:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/glsl-inverse\">glsl-inverse</a></li>\n<li><a href=\"https://www.npmjs.com/package/glsl-transpose\">glsl-transpose</a></li>\n</ul>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>object&#xA0;normals</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>attribute</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;normal;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>varying</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;vNormal;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;transpose&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;glsl-transpose&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;inverse&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;glsl-inverse&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;...</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;Rotate&#xA0;the&#xA0;object&#xA0;normals&#xA0;by&#xA0;a&#xA0;3x3&#xA0;normal&#xA0;matrix.</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>mat3</span></span><span>&#xA0;normalMatrix&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>transpose</span></span><span>(</span><span class=\"support function any-method c\"><span>inverse</span></span><span>(</span><span class=\"support function any-method c\"><span>mat3</span></span><span>(</span></span><span>modelViewMatrix)));</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;vNormal&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>normalize</span></span><span>(</span></span><span>normalMatrix&#xA0;*&#xA0;normal);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<h3 id=\"gamma-correction\">gamma correction</h3>\n<p>When dealing with PNG and JPG textures, it&apos;s important to remember that they most likely have gamma correction applied to them already, and so we need to account for it when doing any work in linear space.</p>\n<p>We can use <code>pow(value, 2.2)</code> and <code>pow(value, 1.0 / 2.2)</code> to convert to and from the gamma-corrected space. Or, <a href=\"https://github.com/stackgl/glsl-gamma\">glsl-gamma</a> can be used for convenience.</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;toLinear&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;glsl-gamma/in&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;toGamma&#xA0;&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;glsl-gamma/out&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>vec4</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>textureLinear</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>sampler2D</span></span><span>&#xA0;uTex,&#xA0;</span><span class=\"storage type glsl\"><span>vec2</span></span><span>&#xA0;uv</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>toLinear</span></span><span>(</span><span class=\"support function any-method c\"><span>texture2D</span></span><span>(</span></span><span>uTex,&#xA0;uv));</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>sample&#xA0;sRGB&#xA0;and&#xA0;account&#xA0;for&#xA0;gamma</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;diffuseColor&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>textureLinear</span></span><span>(</span></span><span>texDiffuse,&#xA0;uv);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>operate&#xA0;on&#xA0;RGB&#xA0;in&#xA0;linear&#xA0;space</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;...</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>output&#xA0;final&#xA0;color&#xA0;to&#xA0;sRGB&#xA0;space</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;color&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>toGamma</span></span><span>(</span></span><span>color);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<p>For details, see <a href=\"http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html\">GPU Gems - The Importance of Being Linear</a>.</p>\n<h3 id=\"normal-mapping\">normal mapping</h3>\n<p><img src=\"http://i.imgur.com/cJce72J.png\" alt=\"normalmap\"></p>\n<p>We can use normal maps to add detail to the shading without additional topology.</p>\n<p>A normal map typically stores a unit vector <code>[X,Y,Z]</code> in an image&apos;s <code>[R,G,B]</code> channels, respectively. The 0-1 colors are expanded into the -1 to 1 range, representing the unit vector.</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>&#xA0;...&#xA0;fragment&#xA0;shader&#xA0;...</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>sample&#xA0;texture&#xA0;and&#xA0;expand&#xA0;to&#xA0;-1&#xA0;..&#xA0;1</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;normalMap&#xA0;=&#xA0;textureLinear(texNormal,&#xA0;uv)&#xA0;*&#xA0;</span><span class=\"constant numeric c\"><span>2.0</span></span><span>&#xA0;-&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>some&#xA0;normal&#xA0;maps&#xA0;use&#xA0;an&#xA0;inverted&#xA0;green&#xA0;channel</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;normalMap</span><span class=\"keyword operator glsl\"><span>.y</span></span><span>&#xA0;*=&#xA0;-</span><span class=\"constant numeric c\"><span>1.0</span></span><span>;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>determine&#xA0;perturbed&#xA0;surface&#xA0;normal</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;V&#xA0;=&#xA0;</span><span class=\"support function glsl\"><span>normalize</span></span><span>(vViewPosition);&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;N&#xA0;=&#xA0;perturb(normalMap,&#xA0;normal,&#xA0;-V,&#xA0;vUv);</span></span></div>\n</code></pre>\n<h3 id=\"light-attenuation\">light attenuation</h3>\n<p><img src=\"http://i.imgur.com/qZUMbUd.png\" alt=\"attenuation\"></p>\n<p>For lighting, we need to determine the vector from the view space surface position to the view space light position. Then we can account for attenuation (falloff based on the distance from light), diffuse, and specular. </p>\n<p>The relevant bits of the fragment shader:</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage modifier glsl\"><span>uniform</span></span><span>&#xA0;</span><span class=\"storage type glsl\"><span>mat4</span></span><span>&#xA0;view;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;attenuation&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;./attenuation&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>void</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>main</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;...</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>determine&#xA0;surface&#xA0;to&#xA0;light&#xA0;vector</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec4</span></span><span>&#xA0;lightPosition&#xA0;=&#xA0;view&#xA0;*</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>vec4</span></span><span>(</span></span><span>light</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>position</span></span><span>,&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;lightVector&#xA0;=&#xA0;lightPosition</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>xyz</span></span><span>&#xA0;-&#xA0;vViewPosition;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>calculate&#xA0;attenuation</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;lightDistance&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>length</span></span><span>(</span></span><span>lightVector);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;falloff&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>attenuation</span></span><span>(</span></span><span>light</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>radius</span></span><span>,&#xA0;light</span><span class=\"punctuation separator variable-access c\"><span>.</span></span><span class=\"variable other dot-access c\"><span>falloff</span></span><span>,&#xA0;lightDistance);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>light&#xA0;direction</span><span>&#xA0;</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;L&#xA0;=</span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>normalize</span></span><span>(</span></span><span>lightVector);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;...</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<p>Our chosen <a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/lib/shaders/madams-attenuation.glsl\">attenuation function</a> is by Tom Madams, but there are many others that we could choose from.</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span class=\"storage type glsl\"><span>float</span></span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>attenuation</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;r,&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;f,&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;d</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;</span><span class=\"meta block c\"><span class=\"punctuation section block begin c\"><span>{</span></span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;denom&#xA0;=&#xA0;d&#xA0;/&#xA0;r&#xA0;+&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>;</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;attenuation&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>&#xA0;/&#xA0;(denom*denom);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;t&#xA0;=&#xA0;(attenuation&#xA0;-&#xA0;f)&#xA0;/&#xA0;(</span><span class=\"constant numeric c\"><span>1.0</span></span><span>&#xA0;-&#xA0;f);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span>&#xA0;&#xA0;</span><span class=\"keyword control glsl\"><span>return</span></span><span class=\"meta function-call c\"><span class=\"punctuation whitespace function-call leading c\"><span>&#xA0;</span></span><span class=\"support function any-method c\"><span>max</span></span><span>(</span></span><span>t,&#xA0;</span><span class=\"constant numeric c\"><span>0.0</span></span><span>);</span></span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"meta function c\"><span class=\"meta block c\"><span class=\"punctuation section block end c\"><span>}</span></span></span></span></span></div>\n</code></pre>\n<h3 id=\"diffuse\">diffuse</h3>\n<p><img src=\"http://i.imgur.com/pfqQCN7.png\" alt=\"diffuse\"></p>\n<p>With our light direction, surface normal, and view direction, we can start to work on diffuse lighting. The color is multiplied by falloff to create the effect of a distant light.</p>\n<p>For rough surfaces, <a href=\"https://www.npmjs.com/package/glsl-diffuse-oren-nayar\">glsl-diffuse-oren-nayar</a> looks a bit better than <a href=\"https://www.npmjs.com/package/glsl-diffuse-lambert\">glsl-diffuse-lambert</a>. </p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;computeDiffuse&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;glsl-diffuse-oren-nayar&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;...</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>diffuse&#xA0;term</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;diffuse&#xA0;=&#xA0;light.color&#xA0;*</span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>computeDiffuse</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span>L,&#xA0;V,&#xA0;N,&#xA0;roughness,&#xA0;albedo</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>&#xA0;*&#xA0;falloff</span><span>;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>texture&#xA0;color</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;diffuseColor&#xA0;=&#xA0;textureLinear(texDiffuse,&#xA0;uv)</span><span class=\"keyword operator glsl\"><span>.rgb</span></span><span>;</span></span></div>\n</code></pre>\n<p>These shading functions are known as <a href=\"http://en.wikipedia.org/wiki/Bidirectional_reflectance_distribution_function\">bidirectional reflectance distribution functions</a> (BRDF).</p>\n<h3 id=\"specular\">specular</h3>\n<p><img src=\"http://i.imgur.com/lDimd4U.png\" alt=\"specular\"></p>\n<p>Similarly, we can apply specular with one of the following BRDFs:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/glsl-specular-blinn-phong\">glsl-specular-blinn-phong</a></li>\n<li><a href=\"https://www.npmjs.com/package/glsl-specular-phong\">glsl-specular-phong</a></li>\n<li><a href=\"https://www.npmjs.com/package/glsl-specular-ward\">glsl-specular-ward</a></li>\n<li><a href=\"https://www.npmjs.com/package/glsl-specular-gaussian\">glsl-specular-gaussian</a></li>\n<li><a href=\"https://www.npmjs.com/package/glsl-specular-beckmann\">glsl-specular-beckmann</a></li>\n<li><a href=\"https://www.npmjs.com/package/glsl-specular-cook-torrance\">glsl-specular-cook-torrance</a></li>\n</ul>\n<p>Which one you choose depends on the material and aesthetic you are working with. In our case, <code>glsl-specular-phong</code> looks pretty good.</p>\n<p>The above screenshot is scaled by 100x for demonstration, using <code>specularScale</code> to drive the strength. The specular is also affected by the light attenuation.</p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>#</span><span class=\"meta preprocessor keyword import define glsl\"><span>pragma&#xA0;glslify:</span></span><span class=\"entity name function glsl\"><span>&#xA0;computeSpecular&#xA0;</span></span><span class=\"operator glsl\"><span>=&#xA0;</span></span><span class=\"keyword operator glsl\"><span>require</span></span><span>(</span><span class=\"string quoted double\"><span>&apos;glsl-specular-phong&apos;</span></span><span>)</span><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;...</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;specularStrength&#xA0;=&#xA0;textureLinear(texSpecular,&#xA0;uv)</span><span class=\"keyword operator glsl\"><span>.r</span></span><span>;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>float</span></span><span>&#xA0;specular&#xA0;=&#xA0;specularStrength&#xA0;*</span><span class=\"meta function c\"><span class=\"punctuation whitespace function leading c\"><span>&#xA0;</span></span><span class=\"entity name function c\"><span>computeSpecular</span></span><span class=\"meta parens c\"><span class=\"punctuation section parens begin c\"><span>(</span></span><span>L,&#xA0;V,&#xA0;N,&#xA0;shininess</span><span class=\"punctuation section parens end c\"><span>)</span></span></span><span>;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;specular&#xA0;*=&#xA0;specularScale;</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;specular&#xA0;*=&#xA0;falloff;</span></span></div>\n</code></pre>\n<h3 id=\"final-color\">final color</h3>\n<p><img src=\"http://i.imgur.com/ZN5FmKz.png\" alt=\"final\"></p>\n<p>We now calculate the final color in the following manner. </p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;...</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>compute&#xA0;final&#xA0;color</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;</span><span class=\"storage type glsl\"><span>vec3</span></span><span>&#xA0;color&#xA0;=&#xA0;diffuseColor&#xA0;*&#xA0;(diffuse&#xA0;+&#xA0;light</span><span class=\"keyword operator glsl\"><span>.a</span></span><span>mbient)&#xA0;+&#xA0;specular;</span></span></div>\n</code></pre>\n<p>Our final color is going straight to the screen, so we should re-apply the gamma correction we removed earlier. If the color was going through a post-processing pipeline, we could continue operating in linear space until the final step. </p>\n<pre><code class=\"lang-glsl\"><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;...</span></span></div><div class=\"line\"><span class=\"source glsl\"><span class=\"punctuation whitespace comment leading c++\"><span>&#xA0;&#xA0;</span></span><span class=\"comment line double-slash c++\"><span class=\"punctuation definition comment c++\"><span>//</span></span><span>output&#xA0;color</span><span>&#xA0;</span></span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_FragColor</span></span><span class=\"keyword operator glsl\"><span>.rgb</span></span><span>&#xA0;=&#xA0;toGamma(color);</span></span></div><div class=\"line\"><span class=\"source glsl\"><span>&#xA0;&#xA0;</span><span class=\"support variable glsl\"><span>gl_FragColor</span></span><span class=\"keyword operator glsl\"><span>.a</span></span><span>&#xA0;&#xA0;&#xA0;=&#xA0;</span><span class=\"constant numeric c\"><span>1.0</span></span><span>;</span></span></div>\n</code></pre>\n<p>The <a href=\"http://stack.gl/glsl-lighting-walkthrough/\">final result</a>. </p>\n<h2 id=\"further-reading\">Further Reading</h2>\n<ul>\n<li><a href=\"http://www.tomdalling.com/blog/category/modern-opengl/\">Tom Dalling - Modern OpenGL Series</a></li>\n<li><a href=\"http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html\">GPU Gems - The Importance of Being Linear</a></li>\n<li><a href=\"http://www.thetenthplanet.de/archives/1180\">Normal Mapping Without Precomputed Tangents</a></li>\n</ul>\n<h2 id=\"license\">License</h2>\n<p>MIT. See <a href=\"http://github.com/stackgl/glsl-lighting-walkthrough/blob/master/LICENSE.md\">LICENSE.md</a> for details.</p>\n"}